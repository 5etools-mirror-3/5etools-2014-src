{"version":3,"file":"world.onscreen.js","sources":["../node_modules/@babylonjs/core/Materials/materialDefines.js","../src/components/world/engine.js","../node_modules/@babylonjs/core/Misc/sceneOptimizer.js","../src/components/world/scene.js","../node_modules/@babylonjs/core/Cameras/targetCamera.js","../src/components/world/camera.js","../node_modules/@babylonjs/core/Lights/light.js","../node_modules/@babylonjs/core/Lights/shadowLight.js","../node_modules/@babylonjs/core/Lights/directionalLight.js","../node_modules/@babylonjs/core/Lights/hemisphericLight.js","../node_modules/@babylonjs/core/Maths/math.size.js","../node_modules/@babylonjs/core/Materials/Textures/thinTexture.js","../node_modules/@babylonjs/core/Materials/Textures/baseTexture.js","../node_modules/@babylonjs/core/Misc/copyTools.js","../node_modules/@babylonjs/core/Materials/Textures/texture.js","../node_modules/@babylonjs/core/Engines/renderTargetWrapper.js","../node_modules/@babylonjs/core/Engines/WebGL/webGLRenderTargetWrapper.js","../node_modules/@babylonjs/core/Engines/Extensions/engine.renderTarget.js","../node_modules/@babylonjs/core/Engines/Extensions/engine.renderTargetCube.js","../node_modules/@babylonjs/core/Shaders/postprocess.vertex.js","../node_modules/@babylonjs/core/Materials/effectRenderer.js","../node_modules/@babylonjs/core/Shaders/pass.fragment.js","../node_modules/@babylonjs/core/Misc/dumpTools.js","../node_modules/@babylonjs/core/Materials/Textures/renderTargetTexture.js","../node_modules/@babylonjs/core/PostProcesses/postProcess.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/kernelBlurVaryingDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/packingFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/kernelBlurFragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/kernelBlurFragment2.js","../node_modules/@babylonjs/core/Shaders/kernelBlur.fragment.js","../node_modules/@babylonjs/core/Shaders/kernelBlur.vertex.js","../node_modules/@babylonjs/core/PostProcesses/blurPostProcess.js","../node_modules/@babylonjs/core/Materials/effectFallbacks.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bayerDitherFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/shadowMapFragmentExtraDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/shadowMapFragment.js","../node_modules/@babylonjs/core/Shaders/shadowMap.fragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/helperFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/meshVertexDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/shadowMapUboDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/morphTargetsVertexGlobal.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/morphTargetsVertex.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/instancesVertex.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bonesVertex.js","../node_modules/@babylonjs/core/Lights/Shadows/shadowGenerator.js","../node_modules/@babylonjs/core/Shaders/depth.fragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration.js","../node_modules/@babylonjs/core/Shaders/depth.vertex.js","../node_modules/@babylonjs/core/Rendering/depthRenderer.js","../node_modules/@babylonjs/core/Shaders/minmaxRedux.fragment.js","../node_modules/@babylonjs/core/Misc/minMaxReducer.js","../node_modules/@babylonjs/core/Misc/depthReducer.js","../node_modules/@babylonjs/core/Lights/Shadows/cascadedShadowGenerator.js","../node_modules/@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent.js","../src/components/world/lights.js","../node_modules/@babylonjs/core/Meshes/Builders/boxBuilder.js","../node_modules/@babylonjs/core/Materials/prePassConfiguration.js","../node_modules/@babylonjs/core/Materials/pushMaterial.js","../node_modules/@babylonjs/core/Materials/materialFlags.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/decalFragmentDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/defaultFragmentDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/defaultUboDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/oitDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/mainUVVaryingDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/samplerFragmentDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/fresnelFunction.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/reflectionFunction.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragmentMainFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragmentFunctions.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/logDepthDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpFragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/decalFragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/depthPrePass.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/lightFragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/oitFragment.js","../node_modules/@babylonjs/core/Shaders/default.fragment.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/bumpVertexDeclaration.js","../node_modules/@babylonjs/core/Materials/materialPluginBase.js","../node_modules/@babylonjs/core/Materials/material.detailMapConfiguration.js","../node_modules/@babylonjs/core/Materials/standardMaterial.js","../node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingCompatibility.js","../node_modules/@babylonjs/materials/shadowOnly/shadowOnly.fragment.js","../node_modules/@babylonjs/materials/shadowOnly/shadowOnly.vertex.js","../node_modules/@babylonjs/materials/shadowOnly/shadowOnlyMaterial.js","../src/components/Container.js","../node_modules/@babylonjs/materials/custom/customMaterial.js","../src/components/ThemeLoader.js","../src/components/world.onscreen.js"],"sourcesContent":["/**\n * Manages the defines for the Material\n */\nexport class MaterialDefines {\n    /**\n     * Creates a new instance\n     * @param externalProperties list of external properties to inject into the object\n     */\n    constructor(externalProperties) {\n        /** @internal */\n        this._keys = [];\n        this._isDirty = true;\n        /** @internal */\n        this._areLightsDirty = true;\n        /** @internal */\n        this._areLightsDisposed = false;\n        /** @internal */\n        this._areAttributesDirty = true;\n        /** @internal */\n        this._areTexturesDirty = true;\n        /** @internal */\n        this._areFresnelDirty = true;\n        /** @internal */\n        this._areMiscDirty = true;\n        /** @internal */\n        this._arePrePassDirty = true;\n        /** @internal */\n        this._areImageProcessingDirty = true;\n        /** @internal */\n        this._normals = false;\n        /** @internal */\n        this._uvs = false;\n        /** @internal */\n        this._needNormals = false;\n        /** @internal */\n        this._needUVs = false;\n        this._externalProperties = externalProperties;\n        // Initialize External Properties\n        if (externalProperties) {\n            for (const prop in externalProperties) {\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\n                    this._setDefaultValue(prop);\n                }\n            }\n        }\n    }\n    /**\n     * Specifies if the material needs to be re-calculated\n     */\n    get isDirty() {\n        return this._isDirty;\n    }\n    /**\n     * Marks the material to indicate that it has been re-calculated\n     */\n    markAsProcessed() {\n        this._isDirty = false;\n        this._areAttributesDirty = false;\n        this._areTexturesDirty = false;\n        this._areFresnelDirty = false;\n        this._areLightsDirty = false;\n        this._areLightsDisposed = false;\n        this._areMiscDirty = false;\n        this._arePrePassDirty = false;\n        this._areImageProcessingDirty = false;\n    }\n    /**\n     * Marks the material to indicate that it needs to be re-calculated\n     */\n    markAsUnprocessed() {\n        this._isDirty = true;\n    }\n    /**\n     * Marks the material to indicate all of its defines need to be re-calculated\n     */\n    markAllAsDirty() {\n        this._areTexturesDirty = true;\n        this._areAttributesDirty = true;\n        this._areLightsDirty = true;\n        this._areFresnelDirty = true;\n        this._areMiscDirty = true;\n        this._areImageProcessingDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the material to indicate that image processing needs to be re-calculated\n     */\n    markAsImageProcessingDirty() {\n        this._areImageProcessingDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the material to indicate the lights need to be re-calculated\n     * @param disposed Defines whether the light is dirty due to dispose or not\n     */\n    markAsLightDirty(disposed = false) {\n        this._areLightsDirty = true;\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the attribute state as changed\n     */\n    markAsAttributesDirty() {\n        this._areAttributesDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the texture state as changed\n     */\n    markAsTexturesDirty() {\n        this._areTexturesDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the fresnel state as changed\n     */\n    markAsFresnelDirty() {\n        this._areFresnelDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the misc state as changed\n     */\n    markAsMiscDirty() {\n        this._areMiscDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Marks the prepass state as changed\n     */\n    markAsPrePassDirty() {\n        this._arePrePassDirty = true;\n        this._isDirty = true;\n    }\n    /**\n     * Rebuilds the material defines\n     */\n    rebuild() {\n        this._keys.length = 0;\n        for (const key of Object.keys(this)) {\n            if (key[0] === \"_\") {\n                continue;\n            }\n            this._keys.push(key);\n        }\n        if (this._externalProperties) {\n            for (const name in this._externalProperties) {\n                if (this._keys.indexOf(name) === -1) {\n                    this._keys.push(name);\n                }\n            }\n        }\n    }\n    /**\n     * Specifies if two material defines are equal\n     * @param other - A material define instance to compare to\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\n     */\n    isEqual(other) {\n        if (this._keys.length !== other._keys.length) {\n            return false;\n        }\n        for (let index = 0; index < this._keys.length; index++) {\n            const prop = this._keys[index];\n            if (this[prop] !== other[prop]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Clones this instance's defines to another instance\n     * @param other - material defines to clone values to\n     */\n    cloneTo(other) {\n        if (this._keys.length !== other._keys.length) {\n            other._keys = this._keys.slice(0);\n        }\n        for (let index = 0; index < this._keys.length; index++) {\n            const prop = this._keys[index];\n            other[prop] = this[prop];\n        }\n    }\n    /**\n     * Resets the material define values\n     */\n    reset() {\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\n    }\n    _setDefaultValue(prop) {\n        var _a, _b, _c, _d, _e;\n        const type = (_c = (_b = (_a = this._externalProperties) === null || _a === void 0 ? void 0 : _a[prop]) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : typeof this[prop];\n        const defValue = (_e = (_d = this._externalProperties) === null || _d === void 0 ? void 0 : _d[prop]) === null || _e === void 0 ? void 0 : _e.default;\n        switch (type) {\n            case \"number\":\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : 0;\n                break;\n            case \"string\":\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : \"\";\n                break;\n            default:\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : false;\n                break;\n        }\n    }\n    /**\n     * Converts the material define values to a string\n     * @returns - String of material define information\n     */\n    toString() {\n        let result = \"\";\n        for (let index = 0; index < this._keys.length; index++) {\n            const prop = this._keys[index];\n            const value = this[prop];\n            const type = typeof value;\n            switch (type) {\n                case \"number\":\n                case \"string\":\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\n                    break;\n                default:\n                    if (value) {\n                        result += \"#define \" + prop + \"\\n\";\n                    }\n                    break;\n            }\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=materialDefines.js.map","import { Engine } from '@babylonjs/core/Engines/engine'\n\nfunction createEngine(canvas) {\n  const engine = new Engine(canvas, true, {\n    preserveDrawingBuffer: true,\n    stencil: true,\n  })\n\n  return engine\n}\n\nexport { createEngine }","import { EngineStore } from \"../Engines/engineStore.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Observable } from \"./observable.js\";\n/**\n * Defines the root class used to create scene optimization to use with SceneOptimizer\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        return true;\n    }\n    /**\n     * Creates the SceneOptimization object\n     * @param priority defines the priority of this optimization (0 by default which means first in the list)\n     */\n    constructor(\n    /**\n     * Defines the priority of this optimization (0 by default which means first in the list)\n     */\n    priority = 0) {\n        this.priority = priority;\n    }\n}\n/**\n * Defines an optimization used to reduce the size of render target textures\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class TextureOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Reducing render target texture size to \" + this.maximumSize;\n    }\n    /**\n     * Creates the TextureOptimization object\n     * @param priority defines the priority of this optimization (0 by default which means first in the list)\n     * @param maximumSize defines the maximum sized allowed for textures (1024 is the default value). If a texture is bigger, it will be scaled down using a factor defined by the step parameter\n     * @param step defines the factor (0.5 by default) used to scale down textures bigger than maximum sized allowed.\n     */\n    constructor(\n    /**\n     * Defines the priority of this optimization (0 by default which means first in the list)\n     */\n    priority = 0, \n    /**\n     * Defines the maximum sized allowed for textures (1024 is the default value). If a texture is bigger, it will be scaled down using a factor defined by the step parameter\n     */\n    maximumSize = 1024, \n    /**\n     * Defines the factor (0.5 by default) used to scale down textures bigger than maximum sized allowed.\n     */\n    step = 0.5) {\n        super(priority);\n        this.priority = priority;\n        this.maximumSize = maximumSize;\n        this.step = step;\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        let allDone = true;\n        for (let index = 0; index < scene.textures.length; index++) {\n            const texture = scene.textures[index];\n            if (!texture.canRescale || texture.getContext) {\n                continue;\n            }\n            const currentSize = texture.getSize();\n            const maxDimension = Math.max(currentSize.width, currentSize.height);\n            if (maxDimension > this.maximumSize) {\n                texture.scale(this.step);\n                allDone = false;\n            }\n        }\n        return allDone;\n    }\n}\n/**\n * Defines an optimization used to increase or decrease the rendering resolution\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class HardwareScalingOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Setting hardware scaling level to \" + this._currentScale;\n    }\n    /**\n     * Creates the HardwareScalingOptimization object\n     * @param priority defines the priority of this optimization (0 by default which means first in the list)\n     * @param maximumScale defines the maximum scale to use (2 by default)\n     * @param step defines the step to use between two passes (0.5 by default)\n     */\n    constructor(\n    /**\n     * Defines the priority of this optimization (0 by default which means first in the list)\n     */\n    priority = 0, \n    /**\n     * Defines the maximum scale to use (2 by default)\n     */\n    maximumScale = 2, \n    /**\n     * Defines the step to use between two passes (0.5 by default)\n     */\n    step = 0.25) {\n        super(priority);\n        this.priority = priority;\n        this.maximumScale = maximumScale;\n        this.step = step;\n        this._currentScale = -1;\n        this._directionOffset = 1;\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        if (this._currentScale === -1) {\n            this._currentScale = scene.getEngine().getHardwareScalingLevel();\n            if (this._currentScale > this.maximumScale) {\n                this._directionOffset = -1;\n            }\n        }\n        this._currentScale += this._directionOffset * this.step;\n        scene.getEngine().setHardwareScalingLevel(this._currentScale);\n        return this._directionOffset === 1 ? this._currentScale >= this.maximumScale : this._currentScale <= this.maximumScale;\n    }\n}\n/**\n * Defines an optimization used to remove shadows\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class ShadowsOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Turning shadows on/off\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        scene.shadowsEnabled = optimizer.isInImprovementMode;\n        return true;\n    }\n}\n/**\n * Defines an optimization used to turn post-processes off\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class PostProcessesOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Turning post-processes on/off\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        scene.postProcessesEnabled = optimizer.isInImprovementMode;\n        return true;\n    }\n}\n/**\n * Defines an optimization used to turn lens flares off\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class LensFlaresOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Turning lens flares on/off\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        scene.lensFlaresEnabled = optimizer.isInImprovementMode;\n        return true;\n    }\n}\n/**\n * Defines an optimization based on user defined callback.\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class CustomOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        if (this.onGetDescription) {\n            return this.onGetDescription();\n        }\n        return \"Running user defined callback\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        if (this.onApply) {\n            return this.onApply(scene, optimizer);\n        }\n        return true;\n    }\n}\n/**\n * Defines an optimization used to turn particles off\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class ParticlesOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Turning particles on/off\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        scene.particlesEnabled = optimizer.isInImprovementMode;\n        return true;\n    }\n}\n/**\n * Defines an optimization used to turn render targets off\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class RenderTargetsOptimization extends SceneOptimization {\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Turning render targets off\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer) {\n        scene.renderTargetsEnabled = optimizer.isInImprovementMode;\n        return true;\n    }\n}\n/**\n * Defines an optimization used to merge meshes with compatible materials\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class MergeMeshesOptimization extends SceneOptimization {\n    constructor() {\n        super(...arguments);\n        this._canBeMerged = (abstractMesh) => {\n            if (!(abstractMesh instanceof Mesh)) {\n                return false;\n            }\n            const mesh = abstractMesh;\n            if (mesh.isDisposed()) {\n                return false;\n            }\n            if (!mesh.isVisible || !mesh.isEnabled()) {\n                return false;\n            }\n            if (mesh.instances.length > 0) {\n                return false;\n            }\n            if (mesh.skeleton || mesh.hasLODLevels) {\n                return false;\n            }\n            if (mesh.getTotalVertices() === 0) {\n                return false;\n            }\n            return true;\n        };\n    }\n    /**\n     * Gets or sets a boolean which defines if optimization octree has to be updated\n     */\n    static get UpdateSelectionTree() {\n        return MergeMeshesOptimization._UpdateSelectionTree;\n    }\n    /**\n     * Gets or sets a boolean which defines if optimization octree has to be updated\n     */\n    static set UpdateSelectionTree(value) {\n        MergeMeshesOptimization._UpdateSelectionTree = value;\n    }\n    /**\n     * Gets a string describing the action executed by the current optimization\n     * @returns description string\n     */\n    getDescription() {\n        return \"Merging similar meshes together\";\n    }\n    /**\n     * This function will be called by the SceneOptimizer when its priority is reached in order to apply the change required by the current optimization\n     * @param scene defines the current scene where to apply this optimization\n     * @param optimizer defines the current optimizer\n     * @param updateSelectionTree defines that the selection octree has to be updated (false by default)\n     * @returns true if everything that can be done was applied\n     */\n    apply(scene, optimizer, updateSelectionTree) {\n        const globalPool = scene.meshes.slice(0);\n        let globalLength = globalPool.length;\n        for (let index = 0; index < globalLength; index++) {\n            const currentPool = new Array();\n            const current = globalPool[index];\n            // Checks\n            if (!this._canBeMerged(current)) {\n                continue;\n            }\n            currentPool.push(current);\n            // Find compatible meshes\n            for (let subIndex = index + 1; subIndex < globalLength; subIndex++) {\n                const otherMesh = globalPool[subIndex];\n                if (!this._canBeMerged(otherMesh)) {\n                    continue;\n                }\n                if (otherMesh.material !== current.material) {\n                    continue;\n                }\n                if (otherMesh.checkCollisions !== current.checkCollisions) {\n                    continue;\n                }\n                currentPool.push(otherMesh);\n                globalLength--;\n                globalPool.splice(subIndex, 1);\n                subIndex--;\n            }\n            if (currentPool.length < 2) {\n                continue;\n            }\n            // Merge meshes\n            Mesh.MergeMeshes(currentPool, undefined, true);\n        }\n        // Call the octree system optimization if it is defined.\n        const sceneAsAny = scene;\n        if (sceneAsAny.createOrUpdateSelectionOctree) {\n            if (updateSelectionTree != undefined) {\n                if (updateSelectionTree) {\n                    sceneAsAny.createOrUpdateSelectionOctree();\n                }\n            }\n            else if (MergeMeshesOptimization.UpdateSelectionTree) {\n                sceneAsAny.createOrUpdateSelectionOctree();\n            }\n        }\n        return true;\n    }\n}\nMergeMeshesOptimization._UpdateSelectionTree = false;\n/**\n * Defines a list of options used by SceneOptimizer\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class SceneOptimizerOptions {\n    /**\n     * Creates a new list of options used by SceneOptimizer\n     * @param targetFrameRate defines the target frame rate to reach (60 by default)\n     * @param trackerDuration defines the interval between two checks (2000ms by default)\n     */\n    constructor(\n    /**\n     * Defines the target frame rate to reach (60 by default)\n     */\n    targetFrameRate = 60, \n    /**\n     * Defines the interval between two checks (2000ms by default)\n     */\n    trackerDuration = 2000) {\n        this.targetFrameRate = targetFrameRate;\n        this.trackerDuration = trackerDuration;\n        /**\n         * Gets the list of optimizations to apply\n         */\n        this.optimizations = new Array();\n    }\n    /**\n     * Add a new optimization\n     * @param optimization defines the SceneOptimization to add to the list of active optimizations\n     * @returns the current SceneOptimizerOptions\n     */\n    addOptimization(optimization) {\n        this.optimizations.push(optimization);\n        return this;\n    }\n    /**\n     * Add a new custom optimization\n     * @param onApply defines the callback called to apply the custom optimization (true if everything that can be done was applied)\n     * @param onGetDescription defines the callback called to get the description attached with the optimization.\n     * @param priority defines the priority of this optimization (0 by default which means first in the list)\n     * @returns the current SceneOptimizerOptions\n     */\n    addCustomOptimization(onApply, onGetDescription, priority = 0) {\n        const optimization = new CustomOptimization(priority);\n        optimization.onApply = onApply;\n        optimization.onGetDescription = onGetDescription;\n        this.optimizations.push(optimization);\n        return this;\n    }\n    /**\n     * Creates a list of pre-defined optimizations aimed to reduce the visual impact on the scene\n     * @param targetFrameRate defines the target frame rate (60 by default)\n     * @returns a SceneOptimizerOptions object\n     */\n    static LowDegradationAllowed(targetFrameRate) {\n        const result = new SceneOptimizerOptions(targetFrameRate);\n        let priority = 0;\n        result.addOptimization(new MergeMeshesOptimization(priority));\n        result.addOptimization(new ShadowsOptimization(priority));\n        result.addOptimization(new LensFlaresOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new PostProcessesOptimization(priority));\n        result.addOptimization(new ParticlesOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new TextureOptimization(priority, 1024));\n        return result;\n    }\n    /**\n     * Creates a list of pre-defined optimizations aimed to have a moderate impact on the scene visual\n     * @param targetFrameRate defines the target frame rate (60 by default)\n     * @returns a SceneOptimizerOptions object\n     */\n    static ModerateDegradationAllowed(targetFrameRate) {\n        const result = new SceneOptimizerOptions(targetFrameRate);\n        let priority = 0;\n        result.addOptimization(new MergeMeshesOptimization(priority));\n        result.addOptimization(new ShadowsOptimization(priority));\n        result.addOptimization(new LensFlaresOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new PostProcessesOptimization(priority));\n        result.addOptimization(new ParticlesOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new TextureOptimization(priority, 512));\n        // Next priority\n        priority++;\n        result.addOptimization(new RenderTargetsOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new HardwareScalingOptimization(priority, 2));\n        return result;\n    }\n    /**\n     * Creates a list of pre-defined optimizations aimed to have a big impact on the scene visual\n     * @param targetFrameRate defines the target frame rate (60 by default)\n     * @returns a SceneOptimizerOptions object\n     */\n    static HighDegradationAllowed(targetFrameRate) {\n        const result = new SceneOptimizerOptions(targetFrameRate);\n        let priority = 0;\n        result.addOptimization(new MergeMeshesOptimization(priority));\n        result.addOptimization(new ShadowsOptimization(priority));\n        result.addOptimization(new LensFlaresOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new PostProcessesOptimization(priority));\n        result.addOptimization(new ParticlesOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new TextureOptimization(priority, 256));\n        // Next priority\n        priority++;\n        result.addOptimization(new RenderTargetsOptimization(priority));\n        // Next priority\n        priority++;\n        result.addOptimization(new HardwareScalingOptimization(priority, 4));\n        return result;\n    }\n}\n/**\n * Class used to run optimizations in order to reach a target frame rate\n * @description More details at https://doc.babylonjs.com/features/featuresDeepDive/scene/sceneOptimizer\n */\nexport class SceneOptimizer {\n    /**\n     * Gets or sets a boolean indicating if the optimizer is in improvement mode\n     */\n    get isInImprovementMode() {\n        return this._improvementMode;\n    }\n    set isInImprovementMode(value) {\n        this._improvementMode = value;\n    }\n    /**\n     * Gets the current priority level (0 at start)\n     */\n    get currentPriorityLevel() {\n        return this._currentPriorityLevel;\n    }\n    /**\n     * Gets the current frame rate checked by the SceneOptimizer\n     */\n    get currentFrameRate() {\n        return this._currentFrameRate;\n    }\n    /**\n     * Gets or sets the current target frame rate (60 by default)\n     */\n    get targetFrameRate() {\n        return this._targetFrameRate;\n    }\n    /**\n     * Gets or sets the current target frame rate (60 by default)\n     */\n    set targetFrameRate(value) {\n        this._targetFrameRate = value;\n    }\n    /**\n     * Gets or sets the current interval between two checks (every 2000ms by default)\n     */\n    get trackerDuration() {\n        return this._trackerDuration;\n    }\n    /**\n     * Gets or sets the current interval between two checks (every 2000ms by default)\n     */\n    set trackerDuration(value) {\n        this._trackerDuration = value;\n    }\n    /**\n     * Gets the list of active optimizations\n     */\n    get optimizations() {\n        return this._options.optimizations;\n    }\n    /**\n     * Creates a new SceneOptimizer\n     * @param scene defines the scene to work on\n     * @param options defines the options to use with the SceneOptimizer\n     * @param autoGeneratePriorities defines if priorities must be generated and not read from SceneOptimization property (true by default)\n     * @param improvementMode defines if the scene optimizer must run the maximum optimization while staying over a target frame instead of trying to reach the target framerate (false by default)\n     */\n    constructor(scene, options, autoGeneratePriorities = true, improvementMode = false) {\n        this._isRunning = false;\n        this._currentPriorityLevel = 0;\n        this._targetFrameRate = 60;\n        this._trackerDuration = 2000;\n        this._currentFrameRate = 0;\n        this._improvementMode = false;\n        /**\n         * Defines an observable called when the optimizer reaches the target frame rate\n         */\n        this.onSuccessObservable = new Observable();\n        /**\n         * Defines an observable called when the optimizer enables an optimization\n         */\n        this.onNewOptimizationAppliedObservable = new Observable();\n        /**\n         * Defines an observable called when the optimizer is not able to reach the target frame rate\n         */\n        this.onFailureObservable = new Observable();\n        if (!options) {\n            this._options = new SceneOptimizerOptions();\n        }\n        else {\n            this._options = options;\n        }\n        if (this._options.targetFrameRate) {\n            this._targetFrameRate = this._options.targetFrameRate;\n        }\n        if (this._options.trackerDuration) {\n            this._trackerDuration = this._options.trackerDuration;\n        }\n        if (autoGeneratePriorities) {\n            let priority = 0;\n            for (const optim of this._options.optimizations) {\n                optim.priority = priority++;\n            }\n        }\n        this._improvementMode = improvementMode;\n        this._scene = scene || EngineStore.LastCreatedScene;\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\n            this._sceneDisposeObserver = null;\n            this.dispose();\n        });\n    }\n    /**\n     * Stops the current optimizer\n     */\n    stop() {\n        this._isRunning = false;\n    }\n    /**\n     * Reset the optimizer to initial step (current priority level = 0)\n     */\n    reset() {\n        this._currentPriorityLevel = 0;\n    }\n    /**\n     * Start the optimizer. By default it will try to reach a specific framerate\n     * but if the optimizer is set with improvementMode === true then it will run all optimization while frame rate is above the target frame rate\n     */\n    start() {\n        if (this._isRunning) {\n            return;\n        }\n        this._isRunning = true;\n        // Let's wait for the scene to be ready before running our check\n        this._scene.executeWhenReady(() => {\n            setTimeout(() => {\n                this._checkCurrentState();\n            }, this._trackerDuration);\n        });\n    }\n    _checkCurrentState() {\n        if (!this._isRunning) {\n            return;\n        }\n        const scene = this._scene;\n        const options = this._options;\n        this._currentFrameRate = Math.round(scene.getEngine().getFps());\n        if ((this._improvementMode && this._currentFrameRate <= this._targetFrameRate) || (!this._improvementMode && this._currentFrameRate >= this._targetFrameRate)) {\n            this._isRunning = false;\n            this.onSuccessObservable.notifyObservers(this);\n            return;\n        }\n        // Apply current level of optimizations\n        let allDone = true;\n        let noOptimizationApplied = true;\n        for (let index = 0; index < options.optimizations.length; index++) {\n            const optimization = options.optimizations[index];\n            if (optimization.priority === this._currentPriorityLevel) {\n                noOptimizationApplied = false;\n                allDone = allDone && optimization.apply(scene, this);\n                this.onNewOptimizationAppliedObservable.notifyObservers(optimization);\n            }\n        }\n        // If no optimization was applied, this is a failure :(\n        if (noOptimizationApplied) {\n            this._isRunning = false;\n            this.onFailureObservable.notifyObservers(this);\n            return;\n        }\n        // If all optimizations were done, move to next level\n        if (allDone) {\n            this._currentPriorityLevel++;\n        }\n        // Let's the system running for a specific amount of time before checking FPS\n        scene.executeWhenReady(() => {\n            setTimeout(() => {\n                this._checkCurrentState();\n            }, this._trackerDuration);\n        });\n    }\n    /**\n     * Release all resources\n     */\n    dispose() {\n        this.stop();\n        this.onSuccessObservable.clear();\n        this.onFailureObservable.clear();\n        this.onNewOptimizationAppliedObservable.clear();\n        if (this._sceneDisposeObserver) {\n            this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\n        }\n    }\n    /**\n     * Helper function to create a SceneOptimizer with one single line of code\n     * @param scene defines the scene to work on\n     * @param options defines the options to use with the SceneOptimizer\n     * @param onSuccess defines a callback to call on success\n     * @param onFailure defines a callback to call on failure\n     * @returns the new SceneOptimizer object\n     */\n    static OptimizeAsync(scene, options, onSuccess, onFailure) {\n        const optimizer = new SceneOptimizer(scene, options || SceneOptimizerOptions.ModerateDegradationAllowed(), false);\n        if (onSuccess) {\n            optimizer.onSuccessObservable.add(() => {\n                onSuccess();\n            });\n        }\n        if (onFailure) {\n            optimizer.onFailureObservable.add(() => {\n                onFailure();\n            });\n        }\n        optimizer.start();\n        return optimizer;\n    }\n}\n//# sourceMappingURL=sceneOptimizer.js.map","import { Color4 } from '@babylonjs/core/Maths/math.color'\nimport { Scene } from '@babylonjs/core/scene'\nimport { SceneOptimizer, SceneOptimizerOptions } from '@babylonjs/core/Misc/sceneOptimizer'\n\nfunction createScene(options) {\n  const { engine } = options\n  const scene = new Scene(engine)\n\n  // scene.useRightHandedSystem = true\n  scene.clearColor = new Color4(0,0,0,0);\n\n  scene.pointerMovePredicate = () => false;\n  scene.pointerDownPredicate = () => false;\n  scene.pointerUpPredicate = () => false;\n  scene.clearCachedVertexData();\n  // used to map 3D mesh faces to actual dice values\n  scene.themeData = {}\n\n  const optimizationSettings = SceneOptimizerOptions.LowDegradationAllowed()\n  optimizationSettings.optimizations = optimizationSettings.optimizations.splice(1)\n  optimizationSettings.targetFrameRate = 60\n\n  SceneOptimizer.OptimizeAsync(scene,optimizationSettings)\n\n  return scene\n}\n\nexport { createScene }","import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, serializeAsVector3, serializeAsMeshReference } from \"../Misc/decorators.js\";\nimport { Camera } from \"./camera.js\";\nimport { Quaternion, Matrix, Vector3, Vector2, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\n/**\n * A target camera takes a mesh or position as a target and continues to look at it while it moves.\n * This is the base of the follow, arc rotate cameras and Free camera\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n */\nexport class TargetCamera extends Camera {\n    /**\n     * Instantiates a target camera that takes a mesh or position as a target and continues to look at it while it moves.\n     * This is the base of the follow, arc rotate cameras and Free camera\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n     * @param name Defines the name of the camera in the scene\n     * @param position Defines the start position of the camera in the scene\n     * @param scene Defines the scene the camera belongs to\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\n     */\n    constructor(name, position, scene, setActiveOnSceneIfNoneActive = true) {\n        super(name, position, scene, setActiveOnSceneIfNoneActive);\n        this._tmpUpVector = Vector3.Zero();\n        this._tmpTargetVector = Vector3.Zero();\n        /**\n         * Define the current direction the camera is moving to\n         */\n        this.cameraDirection = new Vector3(0, 0, 0);\n        /**\n         * Define the current rotation the camera is rotating to\n         */\n        this.cameraRotation = new Vector2(0, 0);\n        /** Gets or sets a boolean indicating that the scaling of the parent hierarchy will not be taken in account by the camera */\n        this.ignoreParentScaling = false;\n        /**\n         * When set, the up vector of the camera will be updated by the rotation of the camera\n         */\n        this.updateUpVectorFromRotation = false;\n        this._tmpQuaternion = new Quaternion();\n        /**\n         * Define the current rotation of the camera\n         */\n        this.rotation = new Vector3(0, 0, 0);\n        /**\n         * Define the current speed of the camera\n         */\n        this.speed = 2.0;\n        /**\n         * Add constraint to the camera to prevent it to move freely in all directions and\n         * around all axis.\n         */\n        this.noRotationConstraint = false;\n        /**\n         * Reverses mouselook direction to 'natural' panning as opposed to traditional direct\n         * panning\n         */\n        this.invertRotation = false;\n        /**\n         * Speed multiplier for inverse camera panning\n         */\n        this.inverseRotationSpeed = 0.2;\n        /**\n         * Define the current target of the camera as an object or a position.\n         * Please note that locking a target will disable panning.\n         */\n        this.lockedTarget = null;\n        /** @internal */\n        this._currentTarget = Vector3.Zero();\n        /** @internal */\n        this._initialFocalDistance = 1;\n        /** @internal */\n        this._viewMatrix = Matrix.Zero();\n        /** @internal */\n        this._camMatrix = Matrix.Zero();\n        /** @internal */\n        this._cameraTransformMatrix = Matrix.Zero();\n        /** @internal */\n        this._cameraRotationMatrix = Matrix.Zero();\n        /** @internal */\n        this._referencePoint = new Vector3(0, 0, 1);\n        /** @internal */\n        this._transformedReferencePoint = Vector3.Zero();\n        this._defaultUp = Vector3.Up();\n        this._cachedRotationZ = 0;\n        this._cachedQuaternionRotationZ = 0;\n    }\n    /**\n     * Gets the position in front of the camera at a given distance.\n     * @param distance The distance from the camera we want the position to be\n     * @returns the position\n     */\n    getFrontPosition(distance) {\n        this.getWorldMatrix();\n        const direction = this.getTarget().subtract(this.position);\n        direction.normalize();\n        direction.scaleInPlace(distance);\n        return this.globalPosition.add(direction);\n    }\n    /** @internal */\n    _getLockedTargetPosition() {\n        if (!this.lockedTarget) {\n            return null;\n        }\n        if (this.lockedTarget.absolutePosition) {\n            const lockedTarget = this.lockedTarget;\n            const m = lockedTarget.computeWorldMatrix();\n            // in some cases the absolute position resets externally, but doesn't update since the matrix is cached.\n            m.getTranslationToRef(lockedTarget.absolutePosition);\n        }\n        return this.lockedTarget.absolutePosition || this.lockedTarget;\n    }\n    /**\n     * Store current camera state of the camera (fov, position, rotation, etc..)\n     * @returns the camera\n     */\n    storeState() {\n        this._storedPosition = this.position.clone();\n        this._storedRotation = this.rotation.clone();\n        if (this.rotationQuaternion) {\n            this._storedRotationQuaternion = this.rotationQuaternion.clone();\n        }\n        return super.storeState();\n    }\n    /**\n     * Restored camera state. You must call storeState() first\n     * @returns whether it was successful or not\n     * @internal\n     */\n    _restoreStateValues() {\n        if (!super._restoreStateValues()) {\n            return false;\n        }\n        this.position = this._storedPosition.clone();\n        this.rotation = this._storedRotation.clone();\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion = this._storedRotationQuaternion.clone();\n        }\n        this.cameraDirection.copyFromFloats(0, 0, 0);\n        this.cameraRotation.copyFromFloats(0, 0);\n        return true;\n    }\n    /** @internal */\n    _initCache() {\n        super._initCache();\n        this._cache.lockedTarget = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.rotation = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.rotationQuaternion = new Quaternion(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    }\n    /**\n     * @internal\n     */\n    _updateCache(ignoreParentClass) {\n        if (!ignoreParentClass) {\n            super._updateCache();\n        }\n        const lockedTargetPosition = this._getLockedTargetPosition();\n        if (!lockedTargetPosition) {\n            this._cache.lockedTarget = null;\n        }\n        else {\n            if (!this._cache.lockedTarget) {\n                this._cache.lockedTarget = lockedTargetPosition.clone();\n            }\n            else {\n                this._cache.lockedTarget.copyFrom(lockedTargetPosition);\n            }\n        }\n        this._cache.rotation.copyFrom(this.rotation);\n        if (this.rotationQuaternion) {\n            this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);\n        }\n    }\n    // Synchronized\n    /** @internal */\n    _isSynchronizedViewMatrix() {\n        if (!super._isSynchronizedViewMatrix()) {\n            return false;\n        }\n        const lockedTargetPosition = this._getLockedTargetPosition();\n        return ((this._cache.lockedTarget ? this._cache.lockedTarget.equals(lockedTargetPosition) : !lockedTargetPosition) &&\n            (this.rotationQuaternion ? this.rotationQuaternion.equals(this._cache.rotationQuaternion) : this._cache.rotation.equals(this.rotation)));\n    }\n    // Methods\n    /** @internal */\n    _computeLocalCameraSpeed() {\n        const engine = this.getEngine();\n        return this.speed * Math.sqrt(engine.getDeltaTime() / (engine.getFps() * 100.0));\n    }\n    // Target\n    /**\n     * Defines the target the camera should look at.\n     * @param target Defines the new target as a Vector\n     */\n    setTarget(target) {\n        this.upVector.normalize();\n        this._initialFocalDistance = target.subtract(this.position).length();\n        if (this.position.z === target.z) {\n            this.position.z += Epsilon;\n        }\n        this._referencePoint.normalize().scaleInPlace(this._initialFocalDistance);\n        Matrix.LookAtLHToRef(this.position, target, this._defaultUp, this._camMatrix);\n        this._camMatrix.invert();\n        this.rotation.x = Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10]);\n        const vDir = target.subtract(this.position);\n        if (vDir.x >= 0.0) {\n            this.rotation.y = -Math.atan(vDir.z / vDir.x) + Math.PI / 2.0;\n        }\n        else {\n            this.rotation.y = -Math.atan(vDir.z / vDir.x) - Math.PI / 2.0;\n        }\n        this.rotation.z = 0;\n        if (isNaN(this.rotation.x)) {\n            this.rotation.x = 0;\n        }\n        if (isNaN(this.rotation.y)) {\n            this.rotation.y = 0;\n        }\n        if (isNaN(this.rotation.z)) {\n            this.rotation.z = 0;\n        }\n        if (this.rotationQuaternion) {\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this.rotationQuaternion);\n        }\n    }\n    /**\n     * Defines the target point of the camera.\n     * The camera looks towards it form the radius distance.\n     */\n    get target() {\n        return this.getTarget();\n    }\n    set target(value) {\n        this.setTarget(value);\n    }\n    /**\n     * Return the current target position of the camera. This value is expressed in local space.\n     * @returns the target position\n     */\n    getTarget() {\n        return this._currentTarget;\n    }\n    /** @internal */\n    _decideIfNeedsToMove() {\n        return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\n    }\n    /** @internal */\n    _updatePosition() {\n        if (this.parent) {\n            this.parent.getWorldMatrix().invertToRef(TmpVectors.Matrix[0]);\n            Vector3.TransformNormalToRef(this.cameraDirection, TmpVectors.Matrix[0], TmpVectors.Vector3[0]);\n            this.position.addInPlace(TmpVectors.Vector3[0]);\n            return;\n        }\n        this.position.addInPlace(this.cameraDirection);\n    }\n    /** @internal */\n    _checkInputs() {\n        const directionMultiplier = this.invertRotation ? -this.inverseRotationSpeed : 1.0;\n        const needToMove = this._decideIfNeedsToMove();\n        const needToRotate = Math.abs(this.cameraRotation.x) > 0 || Math.abs(this.cameraRotation.y) > 0;\n        // Move\n        if (needToMove) {\n            this._updatePosition();\n        }\n        // Rotate\n        if (needToRotate) {\n            //rotate, if quaternion is set and rotation was used\n            if (this.rotationQuaternion) {\n                this.rotationQuaternion.toEulerAnglesToRef(this.rotation);\n            }\n            this.rotation.x += this.cameraRotation.x * directionMultiplier;\n            this.rotation.y += this.cameraRotation.y * directionMultiplier;\n            // Apply constraints\n            if (!this.noRotationConstraint) {\n                const limit = 1.570796;\n                if (this.rotation.x > limit) {\n                    this.rotation.x = limit;\n                }\n                if (this.rotation.x < -limit) {\n                    this.rotation.x = -limit;\n                }\n            }\n            //rotate, if quaternion is set and rotation was used\n            if (this.rotationQuaternion) {\n                const len = this.rotation.lengthSquared();\n                if (len) {\n                    Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this.rotationQuaternion);\n                }\n            }\n        }\n        // Inertia\n        if (needToMove) {\n            if (Math.abs(this.cameraDirection.x) < this.speed * Epsilon) {\n                this.cameraDirection.x = 0;\n            }\n            if (Math.abs(this.cameraDirection.y) < this.speed * Epsilon) {\n                this.cameraDirection.y = 0;\n            }\n            if (Math.abs(this.cameraDirection.z) < this.speed * Epsilon) {\n                this.cameraDirection.z = 0;\n            }\n            this.cameraDirection.scaleInPlace(this.inertia);\n        }\n        if (needToRotate) {\n            if (Math.abs(this.cameraRotation.x) < this.speed * Epsilon) {\n                this.cameraRotation.x = 0;\n            }\n            if (Math.abs(this.cameraRotation.y) < this.speed * Epsilon) {\n                this.cameraRotation.y = 0;\n            }\n            this.cameraRotation.scaleInPlace(this.inertia);\n        }\n        super._checkInputs();\n    }\n    _updateCameraRotationMatrix() {\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion.toRotationMatrix(this._cameraRotationMatrix);\n        }\n        else {\n            Matrix.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this._cameraRotationMatrix);\n        }\n    }\n    /**\n     * Update the up vector to apply the rotation of the camera (So if you changed the camera rotation.z this will let you update the up vector as well)\n     * @returns the current camera\n     */\n    _rotateUpVectorWithCameraRotationMatrix() {\n        Vector3.TransformNormalToRef(this._defaultUp, this._cameraRotationMatrix, this.upVector);\n        return this;\n    }\n    /** @internal */\n    _getViewMatrix() {\n        if (this.lockedTarget) {\n            this.setTarget(this._getLockedTargetPosition());\n        }\n        // Compute\n        this._updateCameraRotationMatrix();\n        // Apply the changed rotation to the upVector\n        if (this.rotationQuaternion && this._cachedQuaternionRotationZ != this.rotationQuaternion.z) {\n            this._rotateUpVectorWithCameraRotationMatrix();\n            this._cachedQuaternionRotationZ = this.rotationQuaternion.z;\n        }\n        else if (this._cachedRotationZ !== this.rotation.z) {\n            this._rotateUpVectorWithCameraRotationMatrix();\n            this._cachedRotationZ = this.rotation.z;\n        }\n        Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint);\n        // Computing target and final matrix\n        this.position.addToRef(this._transformedReferencePoint, this._currentTarget);\n        if (this.updateUpVectorFromRotation) {\n            if (this.rotationQuaternion) {\n                Axis.Y.rotateByQuaternionToRef(this.rotationQuaternion, this.upVector);\n            }\n            else {\n                Quaternion.FromEulerVectorToRef(this.rotation, this._tmpQuaternion);\n                Axis.Y.rotateByQuaternionToRef(this._tmpQuaternion, this.upVector);\n            }\n        }\n        this._computeViewMatrix(this.position, this._currentTarget, this.upVector);\n        return this._viewMatrix;\n    }\n    _computeViewMatrix(position, target, up) {\n        if (this.ignoreParentScaling) {\n            if (this.parent) {\n                const parentWorldMatrix = this.parent.getWorldMatrix();\n                Vector3.TransformCoordinatesToRef(position, parentWorldMatrix, this._globalPosition);\n                Vector3.TransformCoordinatesToRef(target, parentWorldMatrix, this._tmpTargetVector);\n                Vector3.TransformNormalToRef(up, parentWorldMatrix, this._tmpUpVector);\n                this._markSyncedWithParent();\n            }\n            else {\n                this._globalPosition.copyFrom(position);\n                this._tmpTargetVector.copyFrom(target);\n                this._tmpUpVector.copyFrom(up);\n            }\n            if (this.getScene().useRightHandedSystem) {\n                Matrix.LookAtRHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\n            }\n            else {\n                Matrix.LookAtLHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\n            }\n            return;\n        }\n        if (this.getScene().useRightHandedSystem) {\n            Matrix.LookAtRHToRef(position, target, up, this._viewMatrix);\n        }\n        else {\n            Matrix.LookAtLHToRef(position, target, up, this._viewMatrix);\n        }\n        if (this.parent) {\n            const parentWorldMatrix = this.parent.getWorldMatrix();\n            this._viewMatrix.invert();\n            this._viewMatrix.multiplyToRef(parentWorldMatrix, this._viewMatrix);\n            this._viewMatrix.getTranslationToRef(this._globalPosition);\n            this._viewMatrix.invert();\n            this._markSyncedWithParent();\n        }\n        else {\n            this._globalPosition.copyFrom(position);\n        }\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createRigCamera(name, cameraIndex) {\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\n            const rigCamera = new TargetCamera(name, this.position.clone(), this.getScene());\n            rigCamera.isRigCamera = true;\n            rigCamera.rigParent = this;\n            if (this.cameraRigMode === Camera.RIG_MODE_VR || this.cameraRigMode === Camera.RIG_MODE_WEBVR) {\n                if (!this.rotationQuaternion) {\n                    this.rotationQuaternion = new Quaternion();\n                }\n                rigCamera._cameraRigParams = {};\n                rigCamera.rotationQuaternion = new Quaternion();\n            }\n            rigCamera.mode = this.mode;\n            rigCamera.orthoLeft = this.orthoLeft;\n            rigCamera.orthoRight = this.orthoRight;\n            rigCamera.orthoTop = this.orthoTop;\n            rigCamera.orthoBottom = this.orthoBottom;\n            return rigCamera;\n        }\n        return null;\n    }\n    /**\n     * @internal\n     */\n    _updateRigCameras() {\n        const camLeft = this._rigCameras[0];\n        const camRight = this._rigCameras[1];\n        this.computeWorldMatrix();\n        switch (this.cameraRigMode) {\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED: {\n                //provisionnaly using _cameraRigParams.stereoHalfAngle instead of calculations based on _cameraRigParams.interaxialDistance:\n                const leftSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? 1 : -1;\n                const rightSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? -1 : 1;\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * leftSign, camLeft);\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * rightSign, camRight);\n                break;\n            }\n            case Camera.RIG_MODE_VR:\n                if (camLeft.rotationQuaternion) {\n                    camLeft.rotationQuaternion.copyFrom(this.rotationQuaternion);\n                    camRight.rotationQuaternion.copyFrom(this.rotationQuaternion);\n                }\n                else {\n                    camLeft.rotation.copyFrom(this.rotation);\n                    camRight.rotation.copyFrom(this.rotation);\n                }\n                camLeft.position.copyFrom(this.position);\n                camRight.position.copyFrom(this.position);\n                break;\n        }\n        super._updateRigCameras();\n    }\n    _getRigCamPositionAndTarget(halfSpace, rigCamera) {\n        const target = this.getTarget();\n        target.subtractToRef(this.position, TargetCamera._TargetFocalPoint);\n        TargetCamera._TargetFocalPoint.normalize().scaleInPlace(this._initialFocalDistance);\n        const newFocalTarget = TargetCamera._TargetFocalPoint.addInPlace(this.position);\n        Matrix.TranslationToRef(-newFocalTarget.x, -newFocalTarget.y, -newFocalTarget.z, TargetCamera._TargetTransformMatrix);\n        TargetCamera._TargetTransformMatrix.multiplyToRef(Matrix.RotationAxis(rigCamera.upVector, halfSpace), TargetCamera._RigCamTransformMatrix);\n        Matrix.TranslationToRef(newFocalTarget.x, newFocalTarget.y, newFocalTarget.z, TargetCamera._TargetTransformMatrix);\n        TargetCamera._RigCamTransformMatrix.multiplyToRef(TargetCamera._TargetTransformMatrix, TargetCamera._RigCamTransformMatrix);\n        Vector3.TransformCoordinatesToRef(this.position, TargetCamera._RigCamTransformMatrix, rigCamera.position);\n        rigCamera.setTarget(newFocalTarget);\n    }\n    /**\n     * Gets the current object class name.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"TargetCamera\";\n    }\n}\nTargetCamera._RigCamTransformMatrix = new Matrix();\nTargetCamera._TargetTransformMatrix = new Matrix();\nTargetCamera._TargetFocalPoint = new Vector3();\n__decorate([\n    serializeAsVector3()\n], TargetCamera.prototype, \"rotation\", void 0);\n__decorate([\n    serialize()\n], TargetCamera.prototype, \"speed\", void 0);\n__decorate([\n    serializeAsMeshReference(\"lockedTargetId\")\n], TargetCamera.prototype, \"lockedTarget\", void 0);\n//# sourceMappingURL=targetCamera.js.map","import { Vector3 } from '@babylonjs/core/Maths/math.vector'\nimport { TargetCamera } from '@babylonjs/core/Cameras/targetCamera'\n\n// this module has dynamically loaded modules so it's been made async\nfunction createCamera(options) {\n  const { scene } = options\n  let camera\n  const cameraDistance = 36.5\n\n\tcamera = new TargetCamera(\"TargetCamera1\", new Vector3(0, cameraDistance, 0), scene)\n\tcamera.fov = .25\n\tcamera.minZ = 5\n\tcamera.maxZ = cameraDistance + 1\n  camera.setTarget(Vector3.Zero())\n  return camera\n}\n\nexport { createCamera }","import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty } from \"../Misc/decorators.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3, TmpColors } from \"../Maths/math.color.js\";\nimport { Node } from \"../node.js\";\nimport { UniformBuffer } from \"../Materials/uniformBuffer.js\";\nimport { GetClass } from \"../Misc/typeStore.js\";\nimport { LightConstants } from \"./lightConstants.js\";\n/**\n * Base class of all the lights in Babylon. It groups all the generic information about lights.\n * Lights are used, as you would expect, to affect how meshes are seen, in terms of both illumination and colour.\n * All meshes allow light to pass through them unless shadow generation is activated. The default number of lights allowed is four but this can be increased.\n */\nexport class Light extends Node {\n    /**\n     * Defines how far from the source the light is impacting in scene units.\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\n     */\n    get range() {\n        return this._range;\n    }\n    /**\n     * Defines how far from the source the light is impacting in scene units.\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\n     */\n    set range(value) {\n        this._range = value;\n        this._inverseSquaredRange = 1.0 / (this.range * this.range);\n    }\n    /**\n     * Gets the photometric scale used to interpret the intensity.\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\n     */\n    get intensityMode() {\n        return this._intensityMode;\n    }\n    /**\n     * Sets the photometric scale used to interpret the intensity.\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\n     */\n    set intensityMode(value) {\n        this._intensityMode = value;\n        this._computePhotometricScale();\n    }\n    /**\n     * Gets the light radius used by PBR Materials to simulate soft area lights.\n     */\n    get radius() {\n        return this._radius;\n    }\n    /**\n     * sets the light radius used by PBR Materials to simulate soft area lights.\n     */\n    set radius(value) {\n        this._radius = value;\n        this._computePhotometricScale();\n    }\n    /**\n     * Gets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\n     * the current shadow generator.\n     */\n    get shadowEnabled() {\n        return this._shadowEnabled;\n    }\n    /**\n     * Sets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\n     * the current shadow generator.\n     */\n    set shadowEnabled(value) {\n        if (this._shadowEnabled === value) {\n            return;\n        }\n        this._shadowEnabled = value;\n        this._markMeshesAsLightDirty();\n    }\n    /**\n     * Gets the only meshes impacted by this light.\n     */\n    get includedOnlyMeshes() {\n        return this._includedOnlyMeshes;\n    }\n    /**\n     * Sets the only meshes impacted by this light.\n     */\n    set includedOnlyMeshes(value) {\n        this._includedOnlyMeshes = value;\n        this._hookArrayForIncludedOnly(value);\n    }\n    /**\n     * Gets the meshes not impacted by this light.\n     */\n    get excludedMeshes() {\n        return this._excludedMeshes;\n    }\n    /**\n     * Sets the meshes not impacted by this light.\n     */\n    set excludedMeshes(value) {\n        this._excludedMeshes = value;\n        this._hookArrayForExcluded(value);\n    }\n    /**\n     * Gets the layer id use to find what meshes are not impacted by the light.\n     * Inactive if 0\n     */\n    get excludeWithLayerMask() {\n        return this._excludeWithLayerMask;\n    }\n    /**\n     * Sets the layer id use to find what meshes are not impacted by the light.\n     * Inactive if 0\n     */\n    set excludeWithLayerMask(value) {\n        this._excludeWithLayerMask = value;\n        this._resyncMeshes();\n    }\n    /**\n     * Gets the layer id use to find what meshes are impacted by the light.\n     * Inactive if 0\n     */\n    get includeOnlyWithLayerMask() {\n        return this._includeOnlyWithLayerMask;\n    }\n    /**\n     * Sets the layer id use to find what meshes are impacted by the light.\n     * Inactive if 0\n     */\n    set includeOnlyWithLayerMask(value) {\n        this._includeOnlyWithLayerMask = value;\n        this._resyncMeshes();\n    }\n    /**\n     * Gets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\n     */\n    get lightmapMode() {\n        return this._lightmapMode;\n    }\n    /**\n     * Sets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\n     */\n    set lightmapMode(value) {\n        if (this._lightmapMode === value) {\n            return;\n        }\n        this._lightmapMode = value;\n        this._markMeshesAsLightDirty();\n    }\n    /**\n     * Creates a Light object in the scene.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     * @param name The friendly name of the light\n     * @param scene The scene the light belongs too\n     */\n    constructor(name, scene) {\n        super(name, scene);\n        /**\n         * Diffuse gives the basic color to an object.\n         */\n        this.diffuse = new Color3(1.0, 1.0, 1.0);\n        /**\n         * Specular produces a highlight color on an object.\n         * Note: This is not affecting PBR materials.\n         */\n        this.specular = new Color3(1.0, 1.0, 1.0);\n        /**\n         * Defines the falloff type for this light. This lets overriding how punctual light are\n         * falling off base on range or angle.\n         * This can be set to any values in Light.FALLOFF_x.\n         *\n         * Note: This is only useful for PBR Materials at the moment. This could be extended if required to\n         * other types of materials.\n         */\n        this.falloffType = Light.FALLOFF_DEFAULT;\n        /**\n         * Strength of the light.\n         * Note: By default it is define in the framework own unit.\n         * Note: In PBR materials the intensityMode can be use to chose what unit the intensity is defined in.\n         */\n        this.intensity = 1.0;\n        this._range = Number.MAX_VALUE;\n        this._inverseSquaredRange = 0;\n        /**\n         * Cached photometric scale default to 1.0 as the automatic intensity mode defaults to 1.0 for every type\n         * of light.\n         */\n        this._photometricScale = 1.0;\n        this._intensityMode = Light.INTENSITYMODE_AUTOMATIC;\n        this._radius = 0.00001;\n        /**\n         * Defines the rendering priority of the lights. It can help in case of fallback or number of lights\n         * exceeding the number allowed of the materials.\n         */\n        this.renderPriority = 0;\n        this._shadowEnabled = true;\n        this._excludeWithLayerMask = 0;\n        this._includeOnlyWithLayerMask = 0;\n        this._lightmapMode = 0;\n        /**\n         * Shadow generators associated to the light.\n         * @internal Internal use only.\n         */\n        this._shadowGenerators = null;\n        /**\n         * @internal Internal use only.\n         */\n        this._excludedMeshesIds = new Array();\n        /**\n         * @internal Internal use only.\n         */\n        this._includedOnlyMeshesIds = new Array();\n        /** @internal */\n        this._isLight = true;\n        this.getScene().addLight(this);\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name);\n        this._buildUniformLayout();\n        this.includedOnlyMeshes = new Array();\n        this.excludedMeshes = new Array();\n        this._resyncMeshes();\n    }\n    /**\n     * Sets the passed Effect \"effect\" with the Light textures.\n     * @param effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The light\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    transferTexturesToEffect(effect, lightIndex) {\n        // Do nothing by default.\n        return this;\n    }\n    /**\n     * Binds the lights information from the scene to the effect for the given mesh.\n     * @param lightIndex Light index\n     * @param scene The scene where the light belongs to\n     * @param effect The effect we are binding the data to\n     * @param useSpecular Defines if specular is supported\n     * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\n     */\n    _bindLight(lightIndex, scene, effect, useSpecular, receiveShadows = true) {\n        var _a;\n        const iAsString = lightIndex.toString();\n        let needUpdate = false;\n        this._uniformBuffer.bindToEffect(effect, \"Light\" + iAsString);\n        if (this._renderId !== scene.getRenderId() || this._lastUseSpecular !== useSpecular || !this._uniformBuffer.useUbo) {\n            this._renderId = scene.getRenderId();\n            this._lastUseSpecular = useSpecular;\n            const scaledIntensity = this.getScaledIntensity();\n            this.transferToEffect(effect, iAsString);\n            this.diffuse.scaleToRef(scaledIntensity, TmpColors.Color3[0]);\n            this._uniformBuffer.updateColor4(\"vLightDiffuse\", TmpColors.Color3[0], this.range, iAsString);\n            if (useSpecular) {\n                this.specular.scaleToRef(scaledIntensity, TmpColors.Color3[1]);\n                this._uniformBuffer.updateColor4(\"vLightSpecular\", TmpColors.Color3[1], this.radius, iAsString);\n            }\n            needUpdate = true;\n        }\n        // Textures might still need to be rebound.\n        this.transferTexturesToEffect(effect, iAsString);\n        // Shadows\n        if (scene.shadowsEnabled && this.shadowEnabled && receiveShadows) {\n            const shadowGenerator = (_a = this.getShadowGenerator(scene.activeCamera)) !== null && _a !== void 0 ? _a : this.getShadowGenerator();\n            if (shadowGenerator) {\n                shadowGenerator.bindShadowLight(iAsString, effect);\n                needUpdate = true;\n            }\n        }\n        if (needUpdate) {\n            this._uniformBuffer.update();\n        }\n        else {\n            this._uniformBuffer.bindUniformBuffer();\n        }\n    }\n    /**\n     * Returns the string \"Light\".\n     * @returns the class name\n     */\n    getClassName() {\n        return \"Light\";\n    }\n    /**\n     * Converts the light information to a readable string for debug purpose.\n     * @param fullDetails Supports for multiple levels of logging within scene loading\n     * @returns the human readable light info\n     */\n    toString(fullDetails) {\n        let ret = \"Name: \" + this.name;\n        ret += \", type: \" + [\"Point\", \"Directional\", \"Spot\", \"Hemispheric\"][this.getTypeID()];\n        if (this.animations) {\n            for (let i = 0; i < this.animations.length; i++) {\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\n            }\n        }\n        return ret;\n    }\n    /** @internal */\n    _syncParentEnabledState() {\n        super._syncParentEnabledState();\n        if (!this.isDisposed()) {\n            this._resyncMeshes();\n        }\n    }\n    /**\n     * Set the enabled state of this node.\n     * @param value - the new enabled state\n     */\n    setEnabled(value) {\n        super.setEnabled(value);\n        this._resyncMeshes();\n    }\n    /**\n     * Returns the Light associated shadow generator if any.\n     * @param camera Camera for which the shadow generator should be retrieved (default: null). If null, retrieves the default shadow generator\n     * @returns the associated shadow generator.\n     */\n    getShadowGenerator(camera = null) {\n        var _a;\n        if (this._shadowGenerators === null) {\n            return null;\n        }\n        return (_a = this._shadowGenerators.get(camera)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Returns all the shadow generators associated to this light\n     * @returns\n     */\n    getShadowGenerators() {\n        return this._shadowGenerators;\n    }\n    /**\n     * Returns a Vector3, the absolute light position in the World.\n     * @returns the world space position of the light\n     */\n    getAbsolutePosition() {\n        return Vector3.Zero();\n    }\n    /**\n     * Specifies if the light will affect the passed mesh.\n     * @param mesh The mesh to test against the light\n     * @returns true the mesh is affected otherwise, false.\n     */\n    canAffectMesh(mesh) {\n        if (!mesh) {\n            return true;\n        }\n        if (this.includedOnlyMeshes && this.includedOnlyMeshes.length > 0 && this.includedOnlyMeshes.indexOf(mesh) === -1) {\n            return false;\n        }\n        if (this.excludedMeshes && this.excludedMeshes.length > 0 && this.excludedMeshes.indexOf(mesh) !== -1) {\n            return false;\n        }\n        if (this.includeOnlyWithLayerMask !== 0 && (this.includeOnlyWithLayerMask & mesh.layerMask) === 0) {\n            return false;\n        }\n        if (this.excludeWithLayerMask !== 0 && this.excludeWithLayerMask & mesh.layerMask) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Releases resources associated with this node.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    dispose(doNotRecurse, disposeMaterialAndTextures = false) {\n        if (this._shadowGenerators) {\n            const iterator = this._shadowGenerators.values();\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n                const shadowGenerator = key.value;\n                shadowGenerator.dispose();\n            }\n            this._shadowGenerators = null;\n        }\n        // Animations\n        this.getScene().stopAnimation(this);\n        if (this._parentContainer) {\n            const index = this._parentContainer.lights.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.lights.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        // Remove from meshes\n        for (const mesh of this.getScene().meshes) {\n            mesh._removeLightSource(this, true);\n        }\n        this._uniformBuffer.dispose();\n        // Remove from scene\n        this.getScene().removeLight(this);\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\n    }\n    /**\n     * Returns the light type ID (integer).\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n     */\n    getTypeID() {\n        return 0;\n    }\n    /**\n     * Returns the intensity scaled by the Photometric Scale according to the light type and intensity mode.\n     * @returns the scaled intensity in intensity mode unit\n     */\n    getScaledIntensity() {\n        return this._photometricScale * this.intensity;\n    }\n    /**\n     * Returns a new Light object, named \"name\", from the current one.\n     * @param name The name of the cloned light\n     * @param newParent The parent of this light, if it has one\n     * @returns the new created light\n     */\n    clone(name, newParent = null) {\n        const constructor = Light.GetConstructorFromName(this.getTypeID(), name, this.getScene());\n        if (!constructor) {\n            return null;\n        }\n        const clonedLight = SerializationHelper.Clone(constructor, this);\n        if (name) {\n            clonedLight.name = name;\n        }\n        if (newParent) {\n            clonedLight.parent = newParent;\n        }\n        clonedLight.setEnabled(this.isEnabled());\n        this.onClonedObservable.notifyObservers(clonedLight);\n        return clonedLight;\n    }\n    /**\n     * Serializes the current light into a Serialization object.\n     * @returns the serialized object.\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.uniqueId = this.uniqueId;\n        // Type\n        serializationObject.type = this.getTypeID();\n        // Parent\n        if (this.parent) {\n            this.parent._serializeAsParent(serializationObject);\n        }\n        // Inclusion / exclusions\n        if (this.excludedMeshes.length > 0) {\n            serializationObject.excludedMeshesIds = [];\n            this.excludedMeshes.forEach((mesh) => {\n                serializationObject.excludedMeshesIds.push(mesh.id);\n            });\n        }\n        if (this.includedOnlyMeshes.length > 0) {\n            serializationObject.includedOnlyMeshesIds = [];\n            this.includedOnlyMeshes.forEach((mesh) => {\n                serializationObject.includedOnlyMeshesIds.push(mesh.id);\n            });\n        }\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n        serializationObject.ranges = this.serializeAnimationRanges();\n        serializationObject.isEnabled = this.isEnabled();\n        return serializationObject;\n    }\n    /**\n     * Creates a new typed light from the passed type (integer) : point light = 0, directional light = 1, spot light = 2, hemispheric light = 3.\n     * This new light is named \"name\" and added to the passed scene.\n     * @param type Type according to the types available in Light.LIGHTTYPEID_x\n     * @param name The friendly name of the light\n     * @param scene The scene the new light will belong to\n     * @returns the constructor function\n     */\n    static GetConstructorFromName(type, name, scene) {\n        const constructorFunc = Node.Construct(\"Light_Type_\" + type, name, scene);\n        if (constructorFunc) {\n            return constructorFunc;\n        }\n        // Default to no light for none present once.\n        return null;\n    }\n    /**\n     * Parses the passed \"parsedLight\" and returns a new instanced Light from this parsing.\n     * @param parsedLight The JSON representation of the light\n     * @param scene The scene to create the parsed light in\n     * @returns the created light after parsing\n     */\n    static Parse(parsedLight, scene) {\n        const constructor = Light.GetConstructorFromName(parsedLight.type, parsedLight.name, scene);\n        if (!constructor) {\n            return null;\n        }\n        const light = SerializationHelper.Parse(constructor, parsedLight, scene);\n        // Inclusion / exclusions\n        if (parsedLight.excludedMeshesIds) {\n            light._excludedMeshesIds = parsedLight.excludedMeshesIds;\n        }\n        if (parsedLight.includedOnlyMeshesIds) {\n            light._includedOnlyMeshesIds = parsedLight.includedOnlyMeshesIds;\n        }\n        // Parent\n        if (parsedLight.parentId !== undefined) {\n            light._waitingParentId = parsedLight.parentId;\n        }\n        if (parsedLight.parentInstanceIndex !== undefined) {\n            light._waitingParentInstanceIndex = parsedLight.parentInstanceIndex;\n        }\n        // Falloff\n        if (parsedLight.falloffType !== undefined) {\n            light.falloffType = parsedLight.falloffType;\n        }\n        // Lightmaps\n        if (parsedLight.lightmapMode !== undefined) {\n            light.lightmapMode = parsedLight.lightmapMode;\n        }\n        // Animations\n        if (parsedLight.animations) {\n            for (let animationIndex = 0; animationIndex < parsedLight.animations.length; animationIndex++) {\n                const parsedAnimation = parsedLight.animations[animationIndex];\n                const internalClass = GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    light.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n            Node.ParseAnimationRanges(light, parsedLight, scene);\n        }\n        if (parsedLight.autoAnimate) {\n            scene.beginAnimation(light, parsedLight.autoAnimateFrom, parsedLight.autoAnimateTo, parsedLight.autoAnimateLoop, parsedLight.autoAnimateSpeed || 1.0);\n        }\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\n        if (parsedLight.isEnabled !== undefined) {\n            light.setEnabled(parsedLight.isEnabled);\n        }\n        return light;\n    }\n    _hookArrayForExcluded(array) {\n        const oldPush = array.push;\n        array.push = (...items) => {\n            const result = oldPush.apply(array, items);\n            for (const item of items) {\n                item._resyncLightSource(this);\n            }\n            return result;\n        };\n        const oldSplice = array.splice;\n        array.splice = (index, deleteCount) => {\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\n            for (const item of deleted) {\n                item._resyncLightSource(this);\n            }\n            return deleted;\n        };\n        for (const item of array) {\n            item._resyncLightSource(this);\n        }\n    }\n    _hookArrayForIncludedOnly(array) {\n        const oldPush = array.push;\n        array.push = (...items) => {\n            const result = oldPush.apply(array, items);\n            this._resyncMeshes();\n            return result;\n        };\n        const oldSplice = array.splice;\n        array.splice = (index, deleteCount) => {\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\n            this._resyncMeshes();\n            return deleted;\n        };\n        this._resyncMeshes();\n    }\n    _resyncMeshes() {\n        for (const mesh of this.getScene().meshes) {\n            mesh._resyncLightSource(this);\n        }\n    }\n    /**\n     * Forces the meshes to update their light related information in their rendering used effects\n     * @internal Internal Use Only\n     */\n    _markMeshesAsLightDirty() {\n        for (const mesh of this.getScene().meshes) {\n            if (mesh.lightSources.indexOf(this) !== -1) {\n                mesh._markSubMeshesAsLightDirty();\n            }\n        }\n    }\n    /**\n     * Recomputes the cached photometric scale if needed.\n     */\n    _computePhotometricScale() {\n        this._photometricScale = this._getPhotometricScale();\n        this.getScene().resetCachedMaterial();\n    }\n    /**\n     * Returns the Photometric Scale according to the light type and intensity mode.\n     */\n    _getPhotometricScale() {\n        let photometricScale = 0.0;\n        const lightTypeID = this.getTypeID();\n        //get photometric mode\n        let photometricMode = this.intensityMode;\n        if (photometricMode === Light.INTENSITYMODE_AUTOMATIC) {\n            if (lightTypeID === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\n                photometricMode = Light.INTENSITYMODE_ILLUMINANCE;\n            }\n            else {\n                photometricMode = Light.INTENSITYMODE_LUMINOUSINTENSITY;\n            }\n        }\n        //compute photometric scale\n        switch (lightTypeID) {\n            case Light.LIGHTTYPEID_POINTLIGHT:\n            case Light.LIGHTTYPEID_SPOTLIGHT:\n                switch (photometricMode) {\n                    case Light.INTENSITYMODE_LUMINOUSPOWER:\n                        photometricScale = 1.0 / (4.0 * Math.PI);\n                        break;\n                    case Light.INTENSITYMODE_LUMINOUSINTENSITY:\n                        photometricScale = 1.0;\n                        break;\n                    case Light.INTENSITYMODE_LUMINANCE:\n                        photometricScale = this.radius * this.radius;\n                        break;\n                }\n                break;\n            case Light.LIGHTTYPEID_DIRECTIONALLIGHT:\n                switch (photometricMode) {\n                    case Light.INTENSITYMODE_ILLUMINANCE:\n                        photometricScale = 1.0;\n                        break;\n                    case Light.INTENSITYMODE_LUMINANCE: {\n                        // When radius (and therefore solid angle) is non-zero a directional lights brightness can be specified via central (peak) luminance.\n                        // For a directional light the 'radius' defines the angular radius (in radians) rather than world-space radius (e.g. in metres).\n                        let apexAngleRadians = this.radius;\n                        // Impose a minimum light angular size to avoid the light becoming an infinitely small angular light source (i.e. a dirac delta function).\n                        apexAngleRadians = Math.max(apexAngleRadians, 0.001);\n                        const solidAngle = 2.0 * Math.PI * (1.0 - Math.cos(apexAngleRadians));\n                        photometricScale = solidAngle;\n                        break;\n                    }\n                }\n                break;\n            case Light.LIGHTTYPEID_HEMISPHERICLIGHT:\n                // No fall off in hemispheric light.\n                photometricScale = 1.0;\n                break;\n        }\n        return photometricScale;\n    }\n    /**\n     * Reorder the light in the scene according to their defined priority.\n     * @internal Internal Use Only\n     */\n    _reorderLightsInScene() {\n        const scene = this.getScene();\n        if (this._renderPriority != 0) {\n            scene.requireLightSorting = true;\n        }\n        this.getScene().sortLightsByPriority();\n    }\n}\n/**\n * Falloff Default: light is falling off following the material specification:\n * standard material is using standard falloff whereas pbr material can request special falloff per materials.\n */\nLight.FALLOFF_DEFAULT = LightConstants.FALLOFF_DEFAULT;\n/**\n * Falloff Physical: light is falling off following the inverse squared distance law.\n */\nLight.FALLOFF_PHYSICAL = LightConstants.FALLOFF_PHYSICAL;\n/**\n * Falloff gltf: light is falling off as described in the gltf moving to PBR document\n * to enhance interoperability with other engines.\n */\nLight.FALLOFF_GLTF = LightConstants.FALLOFF_GLTF;\n/**\n * Falloff Standard: light is falling off like in the standard material\n * to enhance interoperability with other materials.\n */\nLight.FALLOFF_STANDARD = LightConstants.FALLOFF_STANDARD;\n//lightmapMode Consts\n/**\n * If every light affecting the material is in this lightmapMode,\n * material.lightmapTexture adds or multiplies\n * (depends on material.useLightmapAsShadowmap)\n * after every other light calculations.\n */\nLight.LIGHTMAP_DEFAULT = LightConstants.LIGHTMAP_DEFAULT;\n/**\n * material.lightmapTexture as only diffuse lighting from this light\n * adds only specular lighting from this light\n * adds dynamic shadows\n */\nLight.LIGHTMAP_SPECULAR = LightConstants.LIGHTMAP_SPECULAR;\n/**\n * material.lightmapTexture as only lighting\n * no light calculation from this light\n * only adds dynamic shadows from this light\n */\nLight.LIGHTMAP_SHADOWSONLY = LightConstants.LIGHTMAP_SHADOWSONLY;\n// Intensity Mode Consts\n/**\n * Each light type uses the default quantity according to its type:\n *      point/spot lights use luminous intensity\n *      directional lights use illuminance\n */\nLight.INTENSITYMODE_AUTOMATIC = LightConstants.INTENSITYMODE_AUTOMATIC;\n/**\n * lumen (lm)\n */\nLight.INTENSITYMODE_LUMINOUSPOWER = LightConstants.INTENSITYMODE_LUMINOUSPOWER;\n/**\n * candela (lm/sr)\n */\nLight.INTENSITYMODE_LUMINOUSINTENSITY = LightConstants.INTENSITYMODE_LUMINOUSINTENSITY;\n/**\n * lux (lm/m^2)\n */\nLight.INTENSITYMODE_ILLUMINANCE = LightConstants.INTENSITYMODE_ILLUMINANCE;\n/**\n * nit (cd/m^2)\n */\nLight.INTENSITYMODE_LUMINANCE = LightConstants.INTENSITYMODE_LUMINANCE;\n// Light types ids const.\n/**\n * Light type const id of the point light.\n */\nLight.LIGHTTYPEID_POINTLIGHT = LightConstants.LIGHTTYPEID_POINTLIGHT;\n/**\n * Light type const id of the directional light.\n */\nLight.LIGHTTYPEID_DIRECTIONALLIGHT = LightConstants.LIGHTTYPEID_DIRECTIONALLIGHT;\n/**\n * Light type const id of the spot light.\n */\nLight.LIGHTTYPEID_SPOTLIGHT = LightConstants.LIGHTTYPEID_SPOTLIGHT;\n/**\n * Light type const id of the hemispheric light.\n */\nLight.LIGHTTYPEID_HEMISPHERICLIGHT = LightConstants.LIGHTTYPEID_HEMISPHERICLIGHT;\n__decorate([\n    serializeAsColor3()\n], Light.prototype, \"diffuse\", void 0);\n__decorate([\n    serializeAsColor3()\n], Light.prototype, \"specular\", void 0);\n__decorate([\n    serialize()\n], Light.prototype, \"falloffType\", void 0);\n__decorate([\n    serialize()\n], Light.prototype, \"intensity\", void 0);\n__decorate([\n    serialize()\n], Light.prototype, \"range\", null);\n__decorate([\n    serialize()\n], Light.prototype, \"intensityMode\", null);\n__decorate([\n    serialize()\n], Light.prototype, \"radius\", null);\n__decorate([\n    serialize()\n], Light.prototype, \"_renderPriority\", void 0);\n__decorate([\n    expandToProperty(\"_reorderLightsInScene\")\n], Light.prototype, \"renderPriority\", void 0);\n__decorate([\n    serialize(\"shadowEnabled\")\n], Light.prototype, \"_shadowEnabled\", void 0);\n__decorate([\n    serialize(\"excludeWithLayerMask\")\n], Light.prototype, \"_excludeWithLayerMask\", void 0);\n__decorate([\n    serialize(\"includeOnlyWithLayerMask\")\n], Light.prototype, \"_includeOnlyWithLayerMask\", void 0);\n__decorate([\n    serialize(\"lightmapMode\")\n], Light.prototype, \"_lightmapMode\", void 0);\n//# sourceMappingURL=light.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { serialize, serializeAsVector3 } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Light } from \"./light.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\n/**\n * Base implementation IShadowLight\n * It groups all the common behaviour in order to reduce duplication and better follow the DRY pattern.\n */\nexport class ShadowLight extends Light {\n    constructor() {\n        super(...arguments);\n        this._needProjectionMatrixCompute = true;\n    }\n    _setPosition(value) {\n        this._position = value;\n    }\n    /**\n     * Sets the position the shadow will be casted from. Also use as the light position for both\n     * point and spot lights.\n     */\n    get position() {\n        return this._position;\n    }\n    /**\n     * Sets the position the shadow will be casted from. Also use as the light position for both\n     * point and spot lights.\n     */\n    set position(value) {\n        this._setPosition(value);\n    }\n    _setDirection(value) {\n        this._direction = value;\n    }\n    /**\n     * In 2d mode (needCube being false), gets the direction used to cast the shadow.\n     * Also use as the light direction on spot and directional lights.\n     */\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * In 2d mode (needCube being false), sets the direction used to cast the shadow.\n     * Also use as the light direction on spot and directional lights.\n     */\n    set direction(value) {\n        this._setDirection(value);\n    }\n    /**\n     * Gets the shadow projection clipping minimum z value.\n     */\n    get shadowMinZ() {\n        return this._shadowMinZ;\n    }\n    /**\n     * Sets the shadow projection clipping minimum z value.\n     */\n    set shadowMinZ(value) {\n        this._shadowMinZ = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Sets the shadow projection clipping maximum z value.\n     */\n    get shadowMaxZ() {\n        return this._shadowMaxZ;\n    }\n    /**\n     * Gets the shadow projection clipping maximum z value.\n     */\n    set shadowMaxZ(value) {\n        this._shadowMaxZ = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\n     */\n    computeTransformedInformation() {\n        if (this.parent && this.parent.getWorldMatrix) {\n            if (!this.transformedPosition) {\n                this.transformedPosition = Vector3.Zero();\n            }\n            Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this.transformedPosition);\n            // In case the direction is present.\n            if (this.direction) {\n                if (!this.transformedDirection) {\n                    this.transformedDirection = Vector3.Zero();\n                }\n                Vector3.TransformNormalToRef(this.direction, this.parent.getWorldMatrix(), this.transformedDirection);\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Return the depth scale used for the shadow map.\n     * @returns the depth scale.\n     */\n    getDepthScale() {\n        return 50.0;\n    }\n    /**\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getShadowDirection(faceIndex) {\n        return this.transformedDirection ? this.transformedDirection : this.direction;\n    }\n    /**\n     * Returns the ShadowLight absolute position in the World.\n     * @returns the position vector in world space\n     */\n    getAbsolutePosition() {\n        return this.transformedPosition ? this.transformedPosition : this.position;\n    }\n    /**\n     * Sets the ShadowLight direction toward the passed target.\n     * @param target The point to target in local space\n     * @returns the updated ShadowLight direction\n     */\n    setDirectionToTarget(target) {\n        this.direction = Vector3.Normalize(target.subtract(this.position));\n        return this.direction;\n    }\n    /**\n     * Returns the light rotation in euler definition.\n     * @returns the x y z rotation in local space.\n     */\n    getRotation() {\n        this.direction.normalize();\n        const xaxis = Vector3.Cross(this.direction, Axis.Y);\n        const yaxis = Vector3.Cross(xaxis, this.direction);\n        return Vector3.RotationFromAxis(xaxis, yaxis, this.direction);\n    }\n    /**\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\n     * @returns true if a cube texture needs to be use\n     */\n    needCube() {\n        return false;\n    }\n    /**\n     * Detects if the projection matrix requires to be recomputed this frame.\n     * @returns true if it requires to be recomputed otherwise, false.\n     */\n    needProjectionMatrixCompute() {\n        return this._needProjectionMatrixCompute;\n    }\n    /**\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\n     */\n    forceProjectionMatrixCompute() {\n        this._needProjectionMatrixCompute = true;\n    }\n    /** @internal */\n    _initCache() {\n        super._initCache();\n        this._cache.position = Vector3.Zero();\n    }\n    /** @internal */\n    _isSynchronized() {\n        if (!this._cache.position.equals(this.position)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Computes the world matrix of the node\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\n     * @returns the world matrix\n     */\n    computeWorldMatrix(force) {\n        if (!force && this.isSynchronized()) {\n            this._currentRenderId = this.getScene().getRenderId();\n            return this._worldMatrix;\n        }\n        this._updateCache();\n        this._cache.position.copyFrom(this.position);\n        if (!this._worldMatrix) {\n            this._worldMatrix = Matrix.Identity();\n        }\n        Matrix.TranslationToRef(this.position.x, this.position.y, this.position.z, this._worldMatrix);\n        if (this.parent && this.parent.getWorldMatrix) {\n            this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(), this._worldMatrix);\n            this._markSyncedWithParent();\n        }\n        // Cache the determinant\n        this._worldMatrixDeterminantIsDirty = true;\n        return this._worldMatrix;\n    }\n    /**\n     * Gets the minZ used for shadow according to both the scene and the light.\n     * @param activeCamera The camera we are returning the min for\n     * @returns the depth min z\n     */\n    getDepthMinZ(activeCamera) {\n        return this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n    }\n    /**\n     * Gets the maxZ used for shadow according to both the scene and the light.\n     * @param activeCamera The camera we are returning the max for\n     * @returns the depth max z\n     */\n    getDepthMaxZ(activeCamera) {\n        return this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n    }\n    /**\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\n     * @param matrix The matrix to updated with the projection information\n     * @param viewMatrix The transform matrix of the light\n     * @param renderList The list of mesh to render in the map\n     * @returns The current light\n     */\n    setShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n        if (this.customProjectionMatrixBuilder) {\n            this.customProjectionMatrixBuilder(viewMatrix, renderList, matrix);\n        }\n        else {\n            this._setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList);\n        }\n        return this;\n    }\n    /** @internal */\n    _syncParentEnabledState() {\n        super._syncParentEnabledState();\n        if (!this.parent || !this.parent.getWorldMatrix) {\n            this.transformedPosition = null;\n            this.transformedDirection = null;\n        }\n    }\n}\n__decorate([\n    serializeAsVector3()\n], ShadowLight.prototype, \"position\", null);\n__decorate([\n    serializeAsVector3()\n], ShadowLight.prototype, \"direction\", null);\n__decorate([\n    serialize()\n], ShadowLight.prototype, \"shadowMinZ\", null);\n__decorate([\n    serialize()\n], ShadowLight.prototype, \"shadowMaxZ\", null);\n//# sourceMappingURL=shadowLight.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { Light } from \"./light.js\";\nimport { ShadowLight } from \"./shadowLight.js\";\nNode.AddNodeConstructor(\"Light_Type_1\", (name, scene) => {\n    return () => new DirectionalLight(name, Vector3.Zero(), scene);\n});\n/**\n * A directional light is defined by a direction (what a surprise!).\n * The light is emitted from everywhere in the specified direction, and has an infinite range.\n * An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n */\nexport class DirectionalLight extends ShadowLight {\n    /**\n     * Fix frustum size for the shadow generation. This is disabled if the value is 0.\n     */\n    get shadowFrustumSize() {\n        return this._shadowFrustumSize;\n    }\n    /**\n     * Specifies a fix frustum size for the shadow generation.\n     */\n    set shadowFrustumSize(value) {\n        this._shadowFrustumSize = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Gets the shadow projection scale against the optimal computed one.\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\n     */\n    get shadowOrthoScale() {\n        return this._shadowOrthoScale;\n    }\n    /**\n     * Sets the shadow projection scale against the optimal computed one.\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\n     */\n    set shadowOrthoScale(value) {\n        this._shadowOrthoScale = value;\n        this.forceProjectionMatrixCompute();\n    }\n    /**\n     * Gets or sets the orthoLeft property used to build the light frustum\n     */\n    get orthoLeft() {\n        return this._orthoLeft;\n    }\n    set orthoLeft(left) {\n        this._orthoLeft = left;\n    }\n    /**\n     * Gets or sets the orthoRight property used to build the light frustum\n     */\n    get orthoRight() {\n        return this._orthoRight;\n    }\n    set orthoRight(right) {\n        this._orthoRight = right;\n    }\n    /**\n     * Gets or sets the orthoTop property used to build the light frustum\n     */\n    get orthoTop() {\n        return this._orthoTop;\n    }\n    set orthoTop(top) {\n        this._orthoTop = top;\n    }\n    /**\n     * Gets or sets the orthoBottom property used to build the light frustum\n     */\n    get orthoBottom() {\n        return this._orthoBottom;\n    }\n    set orthoBottom(bottom) {\n        this._orthoBottom = bottom;\n    }\n    /**\n     * Creates a DirectionalLight object in the scene, oriented towards the passed direction (Vector3).\n     * The directional light is emitted from everywhere in the given direction.\n     * It can cast shadows.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     * @param name The friendly name of the light\n     * @param direction The direction of the light\n     * @param scene The scene the light belongs to\n     */\n    constructor(name, direction, scene) {\n        super(name, scene);\n        this._shadowFrustumSize = 0;\n        this._shadowOrthoScale = 0.1;\n        /**\n         * Automatically compute the projection matrix to best fit (including all the casters)\n         * on each frame.\n         */\n        this.autoUpdateExtends = true;\n        /**\n         * Automatically compute the shadowMinZ and shadowMaxZ for the projection matrix to best fit (including all the casters)\n         * on each frame. autoUpdateExtends must be set to true for this to work\n         */\n        this.autoCalcShadowZBounds = false;\n        // Cache\n        this._orthoLeft = Number.MAX_VALUE;\n        this._orthoRight = Number.MIN_VALUE;\n        this._orthoTop = Number.MIN_VALUE;\n        this._orthoBottom = Number.MAX_VALUE;\n        this.position = direction.scale(-1.0);\n        this.direction = direction;\n    }\n    /**\n     * Returns the string \"DirectionalLight\".\n     * @returns The class name\n     */\n    getClassName() {\n        return \"DirectionalLight\";\n    }\n    /**\n     * Returns the integer 1.\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n     */\n    getTypeID() {\n        return Light.LIGHTTYPEID_DIRECTIONALLIGHT;\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as projection matrix for the shadows cast by the light according to the passed view matrix.\n     * Returns the DirectionalLight Shadow projection matrix.\n     * @param matrix\n     * @param viewMatrix\n     * @param renderList\n     */\n    _setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n        if (this.shadowFrustumSize > 0) {\n            this._setDefaultFixedFrustumShadowProjectionMatrix(matrix);\n        }\n        else {\n            this._setDefaultAutoExtendShadowProjectionMatrix(matrix, viewMatrix, renderList);\n        }\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as fixed frustum projection matrix for the shadows cast by the light according to the passed view matrix.\n     * Returns the DirectionalLight Shadow projection matrix.\n     * @param matrix\n     */\n    _setDefaultFixedFrustumShadowProjectionMatrix(matrix) {\n        const activeCamera = this.getScene().activeCamera;\n        if (!activeCamera) {\n            return;\n        }\n        Matrix.OrthoLHToRef(this.shadowFrustumSize, this.shadowFrustumSize, this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ, this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ, matrix, this.getScene().getEngine().isNDCHalfZRange);\n    }\n    /**\n     * Sets the passed matrix \"matrix\" as auto extend projection matrix for the shadows cast by the light according to the passed view matrix.\n     * Returns the DirectionalLight Shadow projection matrix.\n     * @param matrix\n     * @param viewMatrix\n     * @param renderList\n     */\n    _setDefaultAutoExtendShadowProjectionMatrix(matrix, viewMatrix, renderList) {\n        const activeCamera = this.getScene().activeCamera;\n        if (!activeCamera) {\n            return;\n        }\n        // Check extends\n        if (this.autoUpdateExtends || this._orthoLeft === Number.MAX_VALUE) {\n            const tempVector3 = Vector3.Zero();\n            this._orthoLeft = Number.MAX_VALUE;\n            this._orthoRight = Number.MIN_VALUE;\n            this._orthoTop = Number.MIN_VALUE;\n            this._orthoBottom = Number.MAX_VALUE;\n            let shadowMinZ = Number.MAX_VALUE;\n            let shadowMaxZ = Number.MIN_VALUE;\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\n                const mesh = renderList[meshIndex];\n                if (!mesh) {\n                    continue;\n                }\n                const boundingInfo = mesh.getBoundingInfo();\n                const boundingBox = boundingInfo.boundingBox;\n                for (let index = 0; index < boundingBox.vectorsWorld.length; index++) {\n                    Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index], viewMatrix, tempVector3);\n                    if (tempVector3.x < this._orthoLeft) {\n                        this._orthoLeft = tempVector3.x;\n                    }\n                    if (tempVector3.y < this._orthoBottom) {\n                        this._orthoBottom = tempVector3.y;\n                    }\n                    if (tempVector3.x > this._orthoRight) {\n                        this._orthoRight = tempVector3.x;\n                    }\n                    if (tempVector3.y > this._orthoTop) {\n                        this._orthoTop = tempVector3.y;\n                    }\n                    if (this.autoCalcShadowZBounds) {\n                        if (tempVector3.z < shadowMinZ) {\n                            shadowMinZ = tempVector3.z;\n                        }\n                        if (tempVector3.z > shadowMaxZ) {\n                            shadowMaxZ = tempVector3.z;\n                        }\n                    }\n                }\n            }\n            if (this.autoCalcShadowZBounds) {\n                this._shadowMinZ = shadowMinZ;\n                this._shadowMaxZ = shadowMaxZ;\n            }\n        }\n        const xOffset = this._orthoRight - this._orthoLeft;\n        const yOffset = this._orthoTop - this._orthoBottom;\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\n        Matrix.OrthoOffCenterLHToRef(this._orthoLeft - xOffset * this.shadowOrthoScale, this._orthoRight + xOffset * this.shadowOrthoScale, this._orthoBottom - yOffset * this.shadowOrthoScale, this._orthoTop + yOffset * this.shadowOrthoScale, useReverseDepthBuffer ? maxZ : minZ, useReverseDepthBuffer ? minZ : maxZ, matrix, this.getScene().getEngine().isNDCHalfZRange);\n    }\n    _buildUniformLayout() {\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\n        this._uniformBuffer.create();\n    }\n    /**\n     * Sets the passed Effect object with the DirectionalLight transformed position (or position if not parented) and the passed name.\n     * @param effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The directional light\n     */\n    transferToEffect(effect, lightIndex) {\n        if (this.computeTransformedInformation()) {\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z, 1, lightIndex);\n            return this;\n        }\n        this._uniformBuffer.updateFloat4(\"vLightData\", this.direction.x, this.direction.y, this.direction.z, 1, lightIndex);\n        return this;\n    }\n    transferToNodeMaterialEffect(effect, lightDataUniformName) {\n        if (this.computeTransformedInformation()) {\n            effect.setFloat3(lightDataUniformName, this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z);\n            return this;\n        }\n        effect.setFloat3(lightDataUniformName, this.direction.x, this.direction.y, this.direction.z);\n        return this;\n    }\n    /**\n     * Gets the minZ used for shadow according to both the scene and the light.\n     *\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\n     * (when not using reverse depth buffer / NDC half Z range)\n     * @param activeCamera The camera we are returning the min for\n     * @returns the depth min z\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getDepthMinZ(activeCamera) {\n        const engine = this._scene.getEngine();\n        return !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\n    }\n    /**\n     * Gets the maxZ used for shadow according to both the scene and the light.\n     *\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\n     * (when not using reverse depth buffer / NDC half Z range)\n     * @param activeCamera The camera we are returning the max for\n     * @returns the depth max z\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getDepthMaxZ(activeCamera) {\n        const engine = this._scene.getEngine();\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\n    }\n    /**\n     * Prepares the list of defines specific to the light type.\n     * @param defines the list of defines\n     * @param lightIndex defines the index of the light for the effect\n     */\n    prepareLightSpecificDefines(defines, lightIndex) {\n        defines[\"DIRLIGHT\" + lightIndex] = true;\n    }\n}\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"shadowFrustumSize\", null);\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"shadowOrthoScale\", null);\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"autoUpdateExtends\", void 0);\n__decorate([\n    serialize()\n], DirectionalLight.prototype, \"autoCalcShadowZBounds\", void 0);\n__decorate([\n    serialize(\"orthoLeft\")\n], DirectionalLight.prototype, \"_orthoLeft\", void 0);\n__decorate([\n    serialize(\"orthoRight\")\n], DirectionalLight.prototype, \"_orthoRight\", void 0);\n__decorate([\n    serialize(\"orthoTop\")\n], DirectionalLight.prototype, \"_orthoTop\", void 0);\n__decorate([\n    serialize(\"orthoBottom\")\n], DirectionalLight.prototype, \"_orthoBottom\", void 0);\n//# sourceMappingURL=directionalLight.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { serializeAsColor3, serializeAsVector3 } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Node } from \"../node.js\";\nimport { Light } from \"./light.js\";\nNode.AddNodeConstructor(\"Light_Type_3\", (name, scene) => {\n    return () => new HemisphericLight(name, Vector3.Zero(), scene);\n});\n/**\n * The HemisphericLight simulates the ambient environment light,\n * so the passed direction is the light reflection direction, not the incoming direction.\n */\nexport class HemisphericLight extends Light {\n    /**\n     * Creates a HemisphericLight object in the scene according to the passed direction (Vector3).\n     * The HemisphericLight simulates the ambient environment light, so the passed direction is the light reflection direction, not the incoming direction.\n     * The HemisphericLight can't cast shadows.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     * @param name The friendly name of the light\n     * @param direction The direction of the light reflection\n     * @param scene The scene the light belongs to\n     */\n    constructor(name, direction, scene) {\n        super(name, scene);\n        /**\n         * The groundColor is the light in the opposite direction to the one specified during creation.\n         * You can think of the diffuse and specular light as coming from the centre of the object in the given direction and the groundColor light in the opposite direction.\n         */\n        this.groundColor = new Color3(0.0, 0.0, 0.0);\n        this.direction = direction || Vector3.Up();\n    }\n    _buildUniformLayout() {\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n        this._uniformBuffer.addUniform(\"vLightGround\", 3);\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\n        this._uniformBuffer.create();\n    }\n    /**\n     * Returns the string \"HemisphericLight\".\n     * @returns The class name\n     */\n    getClassName() {\n        return \"HemisphericLight\";\n    }\n    /**\n     * Sets the HemisphericLight direction towards the passed target (Vector3).\n     * Returns the updated direction.\n     * @param target The target the direction should point to\n     * @returns The computed direction\n     */\n    setDirectionToTarget(target) {\n        this.direction = Vector3.Normalize(target.subtract(Vector3.Zero()));\n        return this.direction;\n    }\n    /**\n     * Returns the shadow generator associated to the light.\n     * @returns Always null for hemispheric lights because it does not support shadows.\n     */\n    getShadowGenerator() {\n        return null;\n    }\n    /**\n     * Sets the passed Effect object with the HemisphericLight normalized direction and color and the passed name (string).\n     * @param _effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The hemispheric light\n     */\n    transferToEffect(_effect, lightIndex) {\n        const normalizeDirection = Vector3.Normalize(this.direction);\n        this._uniformBuffer.updateFloat4(\"vLightData\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, 0.0, lightIndex);\n        this._uniformBuffer.updateColor3(\"vLightGround\", this.groundColor.scale(this.intensity), lightIndex);\n        return this;\n    }\n    transferToNodeMaterialEffect(effect, lightDataUniformName) {\n        const normalizeDirection = Vector3.Normalize(this.direction);\n        effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\n        return this;\n    }\n    /**\n     * Computes the world matrix of the node\n     * @returns the world matrix\n     */\n    computeWorldMatrix() {\n        if (!this._worldMatrix) {\n            this._worldMatrix = Matrix.Identity();\n        }\n        return this._worldMatrix;\n    }\n    /**\n     * Returns the integer 3.\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n     */\n    getTypeID() {\n        return Light.LIGHTTYPEID_HEMISPHERICLIGHT;\n    }\n    /**\n     * Prepares the list of defines specific to the light type.\n     * @param defines the list of defines\n     * @param lightIndex defines the index of the light for the effect\n     */\n    prepareLightSpecificDefines(defines, lightIndex) {\n        defines[\"HEMILIGHT\" + lightIndex] = true;\n    }\n}\n__decorate([\n    serializeAsColor3()\n], HemisphericLight.prototype, \"groundColor\", void 0);\n__decorate([\n    serializeAsVector3()\n], HemisphericLight.prototype, \"direction\", void 0);\n//# sourceMappingURL=hemisphericLight.js.map","/**\n * Size containing width and height\n */\nexport class Size {\n    /**\n     * Creates a Size object from the given width and height (floats).\n     * @param width width of the new size\n     * @param height height of the new size\n     */\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Returns a string with the Size width and height\n     * @returns a string with the Size width and height\n     */\n    toString() {\n        return `{W: ${this.width}, H: ${this.height}}`;\n    }\n    /**\n     * \"Size\"\n     * @returns the string \"Size\"\n     */\n    getClassName() {\n        return \"Size\";\n    }\n    /**\n     * Returns the Size hash code.\n     * @returns a hash code for a unique width and height\n     */\n    getHashCode() {\n        let hash = this.width | 0;\n        hash = (hash * 397) ^ (this.height | 0);\n        return hash;\n    }\n    /**\n     * Updates the current size from the given one.\n     * @param src the given size\n     */\n    copyFrom(src) {\n        this.width = src.width;\n        this.height = src.height;\n    }\n    /**\n     * Updates in place the current Size from the given floats.\n     * @param width width of the new size\n     * @param height height of the new size\n     * @returns the updated Size.\n     */\n    copyFromFloats(width, height) {\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    /**\n     * Updates in place the current Size from the given floats.\n     * @param width width to set\n     * @param height height to set\n     * @returns the updated Size.\n     */\n    set(width, height) {\n        return this.copyFromFloats(width, height);\n    }\n    /**\n     * Multiplies the width and height by numbers\n     * @param w factor to multiple the width by\n     * @param h factor to multiple the height by\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\n     */\n    multiplyByFloats(w, h) {\n        return new Size(this.width * w, this.height * h);\n    }\n    /**\n     * Clones the size\n     * @returns a new Size copied from the given one.\n     */\n    clone() {\n        return new Size(this.width, this.height);\n    }\n    /**\n     * True if the current Size and the given one width and height are strictly equal.\n     * @param other the other size to compare against\n     * @returns True if the current Size and the given one width and height are strictly equal.\n     */\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        return this.width === other.width && this.height === other.height;\n    }\n    /**\n     * The surface of the Size : width * height (float).\n     */\n    get surface() {\n        return this.width * this.height;\n    }\n    /**\n     * Create a new size of zero\n     * @returns a new Size set to (0.0, 0.0)\n     */\n    static Zero() {\n        return new Size(0.0, 0.0);\n    }\n    /**\n     * Sums the width and height of two sizes\n     * @param otherSize size to add to this size\n     * @returns a new Size set as the addition result of the current Size and the given one.\n     */\n    add(otherSize) {\n        const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n        return r;\n    }\n    /**\n     * Subtracts the width and height of two\n     * @param otherSize size to subtract to this size\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\n     */\n    subtract(otherSize) {\n        const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n        return r;\n    }\n    /**\n     * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n     * @param start starting size to lerp between\n     * @param end end size to lerp between\n     * @param amount amount to lerp between the start and end values\n     * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n     */\n    static Lerp(start, end, amount) {\n        const w = start.width + (end.width - start.width) * amount;\n        const h = start.height + (end.height - start.height) * amount;\n        return new Size(w, h);\n    }\n}\n//# sourceMappingURL=math.size.js.map","\nimport { Size } from \"../../Maths/math.size.js\";\n/**\n * Base class of all the textures in babylon.\n * It groups all the common properties required to work with Thin Engine.\n */\nexport class ThinTexture {\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get wrapU() {\n        return this._wrapU;\n    }\n    set wrapU(value) {\n        this._wrapU = value;\n    }\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get wrapV() {\n        return this._wrapV;\n    }\n    set wrapV(value) {\n        this._wrapV = value;\n    }\n    /**\n     * How a texture is mapped.\n     * Unused in thin texture mode.\n     */\n    get coordinatesMode() {\n        return 0;\n    }\n    /**\n     * Define if the texture is a cube texture or if false a 2d texture.\n     */\n    get isCube() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.isCube;\n    }\n    set isCube(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.isCube = value;\n    }\n    /**\n     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\n     */\n    get is3D() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.is3D;\n    }\n    set is3D(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.is3D = value;\n    }\n    /**\n     * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\n     */\n    get is2DArray() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.is2DArray;\n    }\n    set is2DArray(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.is2DArray = value;\n    }\n    /**\n     * Get the class name of the texture.\n     * @returns \"ThinTexture\"\n     */\n    getClassName() {\n        return \"ThinTexture\";\n    }\n    static _IsRenderTargetWrapper(texture) {\n        return (texture === null || texture === void 0 ? void 0 : texture._shareDepth) !== undefined;\n    }\n    /**\n     * Instantiates a new ThinTexture.\n     * Base class of all the textures in babylon.\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache\n     * @param internalTexture Define the internalTexture to wrap. You can also pass a RenderTargetWrapper, in which case the texture will be the render target's texture\n     */\n    constructor(internalTexture) {\n        this._wrapU = 1;\n        this._wrapV = 1;\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        this.wrapR = 1;\n        /**\n         * With compliant hardware and browser (supporting anisotropic filtering)\n         * this defines the level of anisotropic filtering in the texture.\n         * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\n         */\n        this.anisotropicFilteringLevel = 4;\n        /**\n         * Define the current state of the loading sequence when in delayed load mode.\n         */\n        this.delayLoadState = 0;\n        /** @internal */\n        this._texture = null;\n        this._engine = null;\n        this._cachedSize = Size.Zero();\n        this._cachedBaseSize = Size.Zero();\n        /** @internal */\n        this._initialSamplingMode = 2;\n        this._texture = ThinTexture._IsRenderTargetWrapper(internalTexture) ? internalTexture.texture : internalTexture;\n        if (this._texture) {\n            this._engine = this._texture.getEngine();\n        }\n    }\n    /**\n     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\n     * @returns true if fully ready\n     */\n    isReady() {\n        if (this.delayLoadState === 4) {\n            this.delayLoad();\n            return false;\n        }\n        if (this._texture) {\n            return this._texture.isReady;\n        }\n        return false;\n    }\n    /**\n     * Triggers the load sequence in delayed load mode.\n     */\n    delayLoad() { }\n    /**\n     * Get the underlying lower level texture from Babylon.\n     * @returns the internal texture\n     */\n    getInternalTexture() {\n        return this._texture;\n    }\n    /**\n     * Get the size of the texture.\n     * @returns the texture size.\n     */\n    getSize() {\n        if (this._texture) {\n            if (this._texture.width) {\n                this._cachedSize.width = this._texture.width;\n                this._cachedSize.height = this._texture.height;\n                return this._cachedSize;\n            }\n            if (this._texture._size) {\n                this._cachedSize.width = this._texture._size;\n                this._cachedSize.height = this._texture._size;\n                return this._cachedSize;\n            }\n        }\n        return this._cachedSize;\n    }\n    /**\n     * Get the base size of the texture.\n     * It can be different from the size if the texture has been resized for POT for instance\n     * @returns the base size\n     */\n    getBaseSize() {\n        if (!this.isReady() || !this._texture) {\n            this._cachedBaseSize.width = 0;\n            this._cachedBaseSize.height = 0;\n            return this._cachedBaseSize;\n        }\n        if (this._texture._size) {\n            this._cachedBaseSize.width = this._texture._size;\n            this._cachedBaseSize.height = this._texture._size;\n            return this._cachedBaseSize;\n        }\n        this._cachedBaseSize.width = this._texture.baseWidth;\n        this._cachedBaseSize.height = this._texture.baseHeight;\n        return this._cachedBaseSize;\n    }\n    /**\n     * Get the current sampling mode associated with the texture.\n     */\n    get samplingMode() {\n        if (!this._texture) {\n            return this._initialSamplingMode;\n        }\n        return this._texture.samplingMode;\n    }\n    /**\n     * Update the sampling mode of the texture.\n     * Default is Trilinear mode.\n     *\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 1     | NEAREST_SAMPLINGMODE or NEAREST_NEAREST_MIPLINEAR  | Nearest is: mag = nearest, min = nearest, mip = linear |\n     * | 2     | BILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPNEAREST | Bilinear is: mag = linear, min = linear, mip = nearest |\n     * | 3     | TRILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPLINEAR | Trilinear is: mag = linear, min = linear, mip = linear |\n     * | 4     | NEAREST_NEAREST_MIPNEAREST |             |\n     * | 5    | NEAREST_LINEAR_MIPNEAREST |             |\n     * | 6    | NEAREST_LINEAR_MIPLINEAR |             |\n     * | 7    | NEAREST_LINEAR |             |\n     * | 8    | NEAREST_NEAREST |             |\n     * | 9   | LINEAR_NEAREST_MIPNEAREST |             |\n     * | 10   | LINEAR_NEAREST_MIPLINEAR |             |\n     * | 11   | LINEAR_LINEAR |             |\n     * | 12   | LINEAR_NEAREST |             |\n     *\n     *    > _mag_: magnification filter (close to the viewer)\n     *    > _min_: minification filter (far from the viewer)\n     *    > _mip_: filter used between mip map levels\n     *@param samplingMode Define the new sampling mode of the texture\n     */\n    updateSamplingMode(samplingMode) {\n        if (this._texture && this._engine) {\n            this._engine.updateTextureSamplingMode(samplingMode, this._texture);\n        }\n    }\n    /**\n     * Release and destroy the underlying lower level texture aka internalTexture.\n     */\n    releaseInternalTexture() {\n        if (this._texture) {\n            this._texture.dispose();\n            this._texture = null;\n        }\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        if (this._texture) {\n            this.releaseInternalTexture();\n            this._engine = null;\n        }\n    }\n}\n//# sourceMappingURL=thinTexture.js.map","import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, SerializationHelper, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Matrix } from \"../../Maths/math.vector.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\n\nimport { RandomGUID } from \"../../Misc/guid.js\";\nimport \"../../Misc/fileTools.js\";\nimport { ThinTexture } from \"./thinTexture.js\";\n/**\n * Base class of all the textures in babylon.\n * It groups all the common properties the materials, post process, lights... might need\n * in order to make a correct use of the texture.\n */\nexport class BaseTexture extends ThinTexture {\n    /**\n     * Define if the texture is having a usable alpha value (can be use for transparency or glossiness for instance).\n     */\n    set hasAlpha(value) {\n        if (this._hasAlpha === value) {\n            return;\n        }\n        this._hasAlpha = value;\n        if (this._scene) {\n            this._scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this);\n            });\n        }\n    }\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n    /**\n     * Defines if the alpha value should be determined via the rgb values.\n     * If true the luminance of the pixel might be used to find the corresponding alpha value.\n     */\n    set getAlphaFromRGB(value) {\n        if (this._getAlphaFromRGB === value) {\n            return;\n        }\n        this._getAlphaFromRGB = value;\n        if (this._scene) {\n            this._scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this);\n            });\n        }\n    }\n    get getAlphaFromRGB() {\n        return this._getAlphaFromRGB;\n    }\n    /**\n     * Define the UV channel to use starting from 0 and defaulting to 0.\n     * This is part of the texture as textures usually maps to one uv set.\n     */\n    set coordinatesIndex(value) {\n        if (this._coordinatesIndex === value) {\n            return;\n        }\n        this._coordinatesIndex = value;\n        if (this._scene) {\n            this._scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this);\n            });\n        }\n    }\n    get coordinatesIndex() {\n        return this._coordinatesIndex;\n    }\n    /**\n     * How a texture is mapped.\n     *\n     * | Value | Type                                | Description |\n     * | ----- | ----------------------------------- | ----------- |\n     * | 0     | EXPLICIT_MODE                       |             |\n     * | 1     | SPHERICAL_MODE                      |             |\n     * | 2     | PLANAR_MODE                         |             |\n     * | 3     | CUBIC_MODE                          |             |\n     * | 4     | PROJECTION_MODE                     |             |\n     * | 5     | SKYBOX_MODE                         |             |\n     * | 6     | INVCUBIC_MODE                       |             |\n     * | 7     | EQUIRECTANGULAR_MODE                |             |\n     * | 8     | FIXED_EQUIRECTANGULAR_MODE          |             |\n     * | 9     | FIXED_EQUIRECTANGULAR_MIRRORED_MODE |             |\n     */\n    set coordinatesMode(value) {\n        if (this._coordinatesMode === value) {\n            return;\n        }\n        this._coordinatesMode = value;\n        if (this._scene) {\n            this._scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this);\n            });\n        }\n    }\n    get coordinatesMode() {\n        return this._coordinatesMode;\n    }\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get wrapU() {\n        return this._wrapU;\n    }\n    set wrapU(value) {\n        this._wrapU = value;\n    }\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get wrapV() {\n        return this._wrapV;\n    }\n    set wrapV(value) {\n        this._wrapV = value;\n    }\n    /**\n     * Define if the texture is a cube texture or if false a 2d texture.\n     */\n    get isCube() {\n        if (!this._texture) {\n            return this._isCube;\n        }\n        return this._texture.isCube;\n    }\n    set isCube(value) {\n        if (!this._texture) {\n            this._isCube = value;\n        }\n        else {\n            this._texture.isCube = value;\n        }\n    }\n    /**\n     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\n     */\n    get is3D() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.is3D;\n    }\n    set is3D(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.is3D = value;\n    }\n    /**\n     * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\n     */\n    get is2DArray() {\n        if (!this._texture) {\n            return false;\n        }\n        return this._texture.is2DArray;\n    }\n    set is2DArray(value) {\n        if (!this._texture) {\n            return;\n        }\n        this._texture.is2DArray = value;\n    }\n    /**\n     * Define if the texture contains data in gamma space (most of the png/jpg aside bump).\n     * HDR texture are usually stored in linear space.\n     * This only impacts the PBR and Background materials\n     */\n    get gammaSpace() {\n        if (!this._texture) {\n            return this._gammaSpace;\n        }\n        else {\n            if (this._texture._gammaSpace === null) {\n                this._texture._gammaSpace = this._gammaSpace;\n            }\n        }\n        return this._texture._gammaSpace && !this._texture._useSRGBBuffer;\n    }\n    set gammaSpace(gamma) {\n        if (!this._texture) {\n            if (this._gammaSpace === gamma) {\n                return;\n            }\n            this._gammaSpace = gamma;\n        }\n        else {\n            if (this._texture._gammaSpace === gamma) {\n                return;\n            }\n            this._texture._gammaSpace = gamma;\n        }\n        this._markAllSubMeshesAsTexturesDirty();\n    }\n    /**\n     * Gets or sets whether or not the texture contains RGBD data.\n     */\n    get isRGBD() {\n        return this._texture != null && this._texture._isRGBD;\n    }\n    set isRGBD(value) {\n        if (this._texture) {\n            this._texture._isRGBD = value;\n        }\n    }\n    /**\n     * Are mip maps generated for this texture or not.\n     */\n    get noMipmap() {\n        return false;\n    }\n    /**\n     * With prefiltered texture, defined the offset used during the prefiltering steps.\n     */\n    get lodGenerationOffset() {\n        if (this._texture) {\n            return this._texture._lodGenerationOffset;\n        }\n        return 0.0;\n    }\n    set lodGenerationOffset(value) {\n        if (this._texture) {\n            this._texture._lodGenerationOffset = value;\n        }\n    }\n    /**\n     * With prefiltered texture, defined the scale used during the prefiltering steps.\n     */\n    get lodGenerationScale() {\n        if (this._texture) {\n            return this._texture._lodGenerationScale;\n        }\n        return 0.0;\n    }\n    set lodGenerationScale(value) {\n        if (this._texture) {\n            this._texture._lodGenerationScale = value;\n        }\n    }\n    /**\n     * With prefiltered texture, defined if the specular generation is based on a linear ramp.\n     * By default we are using a log2 of the linear roughness helping to keep a better resolution for\n     * average roughness values.\n     */\n    get linearSpecularLOD() {\n        if (this._texture) {\n            return this._texture._linearSpecularLOD;\n        }\n        return false;\n    }\n    set linearSpecularLOD(value) {\n        if (this._texture) {\n            this._texture._linearSpecularLOD = value;\n        }\n    }\n    /**\n     * In case a better definition than spherical harmonics is required for the diffuse part of the environment.\n     * You can set the irradiance texture to rely on a texture instead of the spherical approach.\n     * This texture need to have the same characteristics than its parent (Cube vs 2d, coordinates mode, Gamma/Linear, RGBD).\n     */\n    get irradianceTexture() {\n        if (this._texture) {\n            return this._texture._irradianceTexture;\n        }\n        return null;\n    }\n    set irradianceTexture(value) {\n        if (this._texture) {\n            this._texture._irradianceTexture = value;\n        }\n    }\n    /**\n     * Define the unique id of the texture in the scene.\n     */\n    get uid() {\n        if (!this._uid) {\n            this._uid = RandomGUID();\n        }\n        return this._uid;\n    }\n    /**\n     * Return a string representation of the texture.\n     * @returns the texture as a string\n     */\n    toString() {\n        return this.name;\n    }\n    /**\n     * Get the class name of the texture.\n     * @returns \"BaseTexture\"\n     */\n    getClassName() {\n        return \"BaseTexture\";\n    }\n    /**\n     * Callback triggered when the texture has been disposed.\n     * Kept for back compatibility, you can use the onDisposeObservable instead.\n     */\n    set onDispose(callback) {\n        if (this._onDisposeObserver) {\n            this.onDisposeObservable.remove(this._onDisposeObserver);\n        }\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    }\n    /**\n     * Define if the texture is preventing a material to render or not.\n     * If not and the texture is not ready, the engine will use a default black texture instead.\n     */\n    get isBlocking() {\n        return true;\n    }\n    /**\n     * Was there any loading error?\n     */\n    get loadingError() {\n        return this._loadingError;\n    }\n    /**\n     * If a loading error occurred this object will be populated with information about the error.\n     */\n    get errorObject() {\n        return this._errorObject;\n    }\n    /**\n     * Instantiates a new BaseTexture.\n     * Base class of all the textures in babylon.\n     * It groups all the common properties the materials, post process, lights... might need\n     * in order to make a correct use of the texture.\n     * @param sceneOrEngine Define the scene or engine the texture belongs to\n     * @param internalTexture Define the internal texture associated with the texture\n     */\n    constructor(sceneOrEngine, internalTexture = null) {\n        super(null);\n        /**\n         * Gets or sets an object used to store user defined information.\n         */\n        this.metadata = null;\n        /**\n         * For internal use only. Please do not use.\n         */\n        this.reservedDataStore = null;\n        this._hasAlpha = false;\n        this._getAlphaFromRGB = false;\n        /**\n         * Intensity or strength of the texture.\n         * It is commonly used by materials to fine tune the intensity of the texture\n         */\n        this.level = 1;\n        this._coordinatesIndex = 0;\n        /**\n         * Gets or sets a boolean indicating that the texture should try to reduce shader code if there is no UV manipulation.\n         * (ie. when texture.getTextureMatrix().isIdentityAs3x2() returns true)\n         */\n        this.optimizeUVAllocation = true;\n        this._coordinatesMode = 0;\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        this.wrapR = 1;\n        /**\n         * With compliant hardware and browser (supporting anisotropic filtering)\n         * this defines the level of anisotropic filtering in the texture.\n         * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\n         */\n        this.anisotropicFilteringLevel = BaseTexture.DEFAULT_ANISOTROPIC_FILTERING_LEVEL;\n        /** @internal */\n        this._isCube = false;\n        this._gammaSpace = true;\n        /**\n         * Is Z inverted in the texture (useful in a cube texture).\n         */\n        this.invertZ = false;\n        /**\n         * @internal\n         */\n        this.lodLevelInAlpha = false;\n        /**\n         * Define if the texture is a render target.\n         */\n        this.isRenderTarget = false;\n        /** @internal */\n        this._prefiltered = false;\n        /** @internal */\n        this._forceSerialize = false;\n        /**\n         * Define the list of animation attached to the texture.\n         */\n        this.animations = new Array();\n        /**\n         * An event triggered when the texture is disposed.\n         */\n        this.onDisposeObservable = new Observable();\n        this._onDisposeObserver = null;\n        this._scene = null;\n        /** @internal */\n        this._uid = null;\n        /** @internal */\n        this._parentContainer = null;\n        this._loadingError = false;\n        if (sceneOrEngine) {\n            if (BaseTexture._IsScene(sceneOrEngine)) {\n                this._scene = sceneOrEngine;\n            }\n            else {\n                this._engine = sceneOrEngine;\n            }\n        }\n        else {\n            this._scene = EngineStore.LastCreatedScene;\n        }\n        if (this._scene) {\n            this.uniqueId = this._scene.getUniqueId();\n            this._scene.addTexture(this);\n            this._engine = this._scene.getEngine();\n        }\n        this._texture = internalTexture;\n        this._uid = null;\n    }\n    /**\n     * Get the scene the texture belongs to.\n     * @returns the scene or null if undefined\n     */\n    getScene() {\n        return this._scene;\n    }\n    /** @internal */\n    _getEngine() {\n        return this._engine;\n    }\n    /**\n     * Checks if the texture has the same transform matrix than another texture\n     * @param texture texture to check against\n     * @returns true if the transforms are the same, else false\n     */\n    checkTransformsAreIdentical(texture) {\n        return texture !== null;\n    }\n    /**\n     * Get the texture transform matrix used to offset tile the texture for instance.\n     * @returns the transformation matrix\n     */\n    getTextureMatrix() {\n        return Matrix.IdentityReadOnly;\n    }\n    /**\n     * Get the texture reflection matrix used to rotate/transform the reflection.\n     * @returns the reflection matrix\n     */\n    getReflectionTextureMatrix() {\n        return Matrix.IdentityReadOnly;\n    }\n    /**\n     * Get if the texture is ready to be consumed (either it is ready or it is not blocking)\n     * @returns true if ready, not blocking or if there was an error loading the texture\n     */\n    isReadyOrNotBlocking() {\n        return !this.isBlocking || this.isReady() || this.loadingError;\n    }\n    /**\n     * Scales the texture if is `canRescale()`\n     * @param ratio the resize factor we want to use to rescale\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    scale(ratio) { }\n    /**\n     * Get if the texture can rescale.\n     */\n    get canRescale() {\n        return false;\n    }\n    /**\n     * @internal\n     */\n    _getFromCache(url, noMipmap, sampling, invertY, useSRGBBuffer, isCube) {\n        const engine = this._getEngine();\n        if (!engine) {\n            return null;\n        }\n        const correctedUseSRGBBuffer = engine._getUseSRGBBuffer(!!useSRGBBuffer, noMipmap);\n        const texturesCache = engine.getLoadedTexturesCache();\n        for (let index = 0; index < texturesCache.length; index++) {\n            const texturesCacheEntry = texturesCache[index];\n            if (useSRGBBuffer === undefined || correctedUseSRGBBuffer === texturesCacheEntry._useSRGBBuffer) {\n                if (invertY === undefined || invertY === texturesCacheEntry.invertY) {\n                    if (texturesCacheEntry.url === url && texturesCacheEntry.generateMipMaps === !noMipmap) {\n                        if (!sampling || sampling === texturesCacheEntry.samplingMode) {\n                            if (isCube === undefined || isCube === texturesCacheEntry.isCube) {\n                                texturesCacheEntry.incrementReferences();\n                                return texturesCacheEntry;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /** @internal */\n    _rebuild() { }\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    clone() {\n        return null;\n    }\n    /**\n     * Get the texture underlying type (INT, FLOAT...)\n     */\n    get textureType() {\n        if (!this._texture) {\n            return 0;\n        }\n        return this._texture.type !== undefined ? this._texture.type : 0;\n    }\n    /**\n     * Get the texture underlying format (RGB, RGBA...)\n     */\n    get textureFormat() {\n        if (!this._texture) {\n            return 5;\n        }\n        return this._texture.format !== undefined ? this._texture.format : 5;\n    }\n    /**\n     * Indicates that textures need to be re-calculated for all materials\n     */\n    _markAllSubMeshesAsTexturesDirty() {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        scene.markAllMaterialsAsDirty(1);\n    }\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as an ArrayBuffer.\n     * This will returns an RGBA array buffer containing either in values (0-255) or\n     * float values (0-1) depending of the underlying buffer type.\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @param buffer defines a user defined buffer to fill with data (can be null)\n     * @param flushRenderer true to flush the renderer from the pending commands before reading the pixels\n     * @param noDataConversion false to convert the data to Uint8Array (if texture type is UNSIGNED_BYTE) or to Float32Array (if texture type is anything but UNSIGNED_BYTE). If true, the type of the generated buffer (if buffer==null) will depend on the type of the texture\n     * @param x defines the region x coordinates to start reading from (default to 0)\n     * @param y defines the region y coordinates to start reading from (default to 0)\n     * @param width defines the region width to read from (default to the texture size at level)\n     * @param height defines the region width to read from (default to the texture size at level)\n     * @returns The Array buffer promise containing the pixels data.\n     */\n    readPixels(faceIndex = 0, level = 0, buffer = null, flushRenderer = true, noDataConversion = false, x = 0, y = 0, width = Number.MAX_VALUE, height = Number.MAX_VALUE) {\n        if (!this._texture) {\n            return null;\n        }\n        const engine = this._getEngine();\n        if (!engine) {\n            return null;\n        }\n        const size = this.getSize();\n        let maxWidth = size.width;\n        let maxHeight = size.height;\n        if (level !== 0) {\n            maxWidth = maxWidth / Math.pow(2, level);\n            maxHeight = maxHeight / Math.pow(2, level);\n            maxWidth = Math.round(maxWidth);\n            maxHeight = Math.round(maxHeight);\n        }\n        width = Math.min(maxWidth, width);\n        height = Math.min(maxHeight, height);\n        try {\n            if (this._texture.isCube) {\n                return engine._readTexturePixels(this._texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y);\n            }\n            return engine._readTexturePixels(this._texture, width, height, -1, level, buffer, flushRenderer, noDataConversion, x, y);\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    /**\n     * @internal\n     */\n    _readPixelsSync(faceIndex = 0, level = 0, buffer = null, flushRenderer = true, noDataConversion = false) {\n        if (!this._texture) {\n            return null;\n        }\n        const size = this.getSize();\n        let width = size.width;\n        let height = size.height;\n        const engine = this._getEngine();\n        if (!engine) {\n            return null;\n        }\n        if (level != 0) {\n            width = width / Math.pow(2, level);\n            height = height / Math.pow(2, level);\n            width = Math.round(width);\n            height = Math.round(height);\n        }\n        try {\n            if (this._texture.isCube) {\n                return engine._readTexturePixelsSync(this._texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion);\n            }\n            return engine._readTexturePixelsSync(this._texture, width, height, -1, level, buffer, flushRenderer, noDataConversion);\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    /** @internal */\n    get _lodTextureHigh() {\n        if (this._texture) {\n            return this._texture._lodTextureHigh;\n        }\n        return null;\n    }\n    /** @internal */\n    get _lodTextureMid() {\n        if (this._texture) {\n            return this._texture._lodTextureMid;\n        }\n        return null;\n    }\n    /** @internal */\n    get _lodTextureLow() {\n        if (this._texture) {\n            return this._texture._lodTextureLow;\n        }\n        return null;\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        if (this._scene) {\n            // Animations\n            if (this._scene.stopAnimation) {\n                this._scene.stopAnimation(this);\n            }\n            // Remove from scene\n            this._scene.removePendingData(this);\n            const index = this._scene.textures.indexOf(this);\n            if (index >= 0) {\n                this._scene.textures.splice(index, 1);\n            }\n            this._scene.onTextureRemovedObservable.notifyObservers(this);\n            this._scene = null;\n            if (this._parentContainer) {\n                const index = this._parentContainer.textures.indexOf(this);\n                if (index > -1) {\n                    this._parentContainer.textures.splice(index, 1);\n                }\n                this._parentContainer = null;\n            }\n        }\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.metadata = null;\n        super.dispose();\n    }\n    /**\n     * Serialize the texture into a JSON representation that can be parsed later on.\n     * @param allowEmptyName True to force serialization even if name is empty. Default: false\n     * @returns the JSON representation of the texture\n     */\n    serialize(allowEmptyName = false) {\n        if (!this.name && !allowEmptyName) {\n            return null;\n        }\n        const serializationObject = SerializationHelper.Serialize(this);\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n        return serializationObject;\n    }\n    /**\n     * Helper function to be called back once a list of texture contains only ready textures.\n     * @param textures Define the list of textures to wait for\n     * @param callback Define the callback triggered once the entire list will be ready\n     */\n    static WhenAllReady(textures, callback) {\n        let numRemaining = textures.length;\n        if (numRemaining === 0) {\n            callback();\n            return;\n        }\n        for (let i = 0; i < textures.length; i++) {\n            const texture = textures[i];\n            if (texture.isReady()) {\n                if (--numRemaining === 0) {\n                    callback();\n                }\n            }\n            else {\n                const onLoadObservable = texture.onLoadObservable;\n                if (onLoadObservable) {\n                    onLoadObservable.addOnce(() => {\n                        if (--numRemaining === 0) {\n                            callback();\n                        }\n                    });\n                }\n                else {\n                    if (--numRemaining === 0) {\n                        callback();\n                    }\n                }\n            }\n        }\n    }\n    static _IsScene(sceneOrEngine) {\n        return sceneOrEngine.getClassName() === \"Scene\";\n    }\n}\n/**\n * Default anisotropic filtering level for the application.\n * It is set to 4 as a good tradeoff between perf and quality.\n */\nBaseTexture.DEFAULT_ANISOTROPIC_FILTERING_LEVEL = 4;\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"uniqueId\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"name\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"metadata\", void 0);\n__decorate([\n    serialize(\"hasAlpha\")\n], BaseTexture.prototype, \"_hasAlpha\", void 0);\n__decorate([\n    serialize(\"getAlphaFromRGB\")\n], BaseTexture.prototype, \"_getAlphaFromRGB\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"level\", void 0);\n__decorate([\n    serialize(\"coordinatesIndex\")\n], BaseTexture.prototype, \"_coordinatesIndex\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"optimizeUVAllocation\", void 0);\n__decorate([\n    serialize(\"coordinatesMode\")\n], BaseTexture.prototype, \"_coordinatesMode\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"wrapU\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"wrapV\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"wrapR\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"anisotropicFilteringLevel\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"isCube\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"is3D\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"is2DArray\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"gammaSpace\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"invertZ\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"lodLevelInAlpha\", void 0);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"lodGenerationOffset\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"lodGenerationScale\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"linearSpecularLOD\", null);\n__decorate([\n    serializeAsTexture()\n], BaseTexture.prototype, \"irradianceTexture\", null);\n__decorate([\n    serialize()\n], BaseTexture.prototype, \"isRenderTarget\", void 0);\n//# sourceMappingURL=baseTexture.js.map","/**\n * Transform some pixel data to a base64 string\n * @param pixels defines the pixel data to transform to base64\n * @param size defines the width and height of the (texture) data\n * @param invertY true if the data must be inverted for the Y coordinate during the conversion\n * @returns The base64 encoded string or null\n */\nexport function GenerateBase64StringFromPixelData(pixels, size, invertY = false) {\n    const width = size.width;\n    const height = size.height;\n    if (pixels instanceof Float32Array) {\n        let len = pixels.byteLength / pixels.BYTES_PER_ELEMENT;\n        const npixels = new Uint8Array(len);\n        while (--len >= 0) {\n            let val = pixels[len];\n            if (val < 0) {\n                val = 0;\n            }\n            else if (val > 1) {\n                val = 1;\n            }\n            npixels[len] = val * 255;\n        }\n        pixels = npixels;\n    }\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        return null;\n    }\n    const imageData = ctx.createImageData(width, height);\n    const castData = imageData.data;\n    castData.set(pixels);\n    ctx.putImageData(imageData, 0, 0);\n    if (invertY) {\n        const canvas2 = document.createElement(\"canvas\");\n        canvas2.width = width;\n        canvas2.height = height;\n        const ctx2 = canvas2.getContext(\"2d\");\n        if (!ctx2) {\n            return null;\n        }\n        ctx2.translate(0, height);\n        ctx2.scale(1, -1);\n        ctx2.drawImage(canvas, 0, 0);\n        return canvas2.toDataURL(\"image/png\");\n    }\n    return canvas.toDataURL(\"image/png\");\n}\n/**\n * Reads the pixels stored in the webgl texture and returns them as a base64 string\n * @param texture defines the texture to read pixels from\n * @param faceIndex defines the face of the texture to read (in case of cube texture)\n * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n * @returns The base64 encoded string or null\n */\nexport function GenerateBase64StringFromTexture(texture, faceIndex = 0, level = 0) {\n    const internalTexture = texture.getInternalTexture();\n    if (!internalTexture) {\n        return null;\n    }\n    const pixels = texture._readPixelsSync(faceIndex, level);\n    if (!pixels) {\n        return null;\n    }\n    return GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\n}\n/**\n * Reads the pixels stored in the webgl texture and returns them as a base64 string\n * @param texture defines the texture to read pixels from\n * @param faceIndex defines the face of the texture to read (in case of cube texture)\n * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n * @returns The base64 encoded string or null wrapped in a promise\n */\nexport async function GenerateBase64StringFromTextureAsync(texture, faceIndex = 0, level = 0) {\n    const internalTexture = texture.getInternalTexture();\n    if (!internalTexture) {\n        return null;\n    }\n    const pixels = await texture.readPixels(faceIndex, level);\n    if (!pixels) {\n        return null;\n    }\n    return GenerateBase64StringFromPixelData(pixels, texture.getSize(), internalTexture.invertY);\n}\n/**\n * Class used to host copy specific utilities\n * (Back-compat)\n */\nexport const CopyTools = {\n    /**\n     * Transform some pixel data to a base64 string\n     * @param pixels defines the pixel data to transform to base64\n     * @param size defines the width and height of the (texture) data\n     * @param invertY true if the data must be inverted for the Y coordinate during the conversion\n     * @returns The base64 encoded string or null\n     */\n    GenerateBase64StringFromPixelData,\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\n     * @param texture defines the texture to read pixels from\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @returns The base64 encoded string or null\n     */\n    GenerateBase64StringFromTexture,\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\n     * @param texture defines the texture to read pixels from\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @returns The base64 encoded string or null wrapped in a promise\n     */\n    GenerateBase64StringFromTextureAsync,\n};\n//# sourceMappingURL=copyTools.js.map","import { __decorate } from \"../../tslib.es6.js\";\nimport { serialize, SerializationHelper } from \"../../Misc/decorators.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector.js\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\n\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\nimport { TimingTools } from \"../../Misc/timingTools.js\";\nimport { InstantiationTools } from \"../../Misc/instantiationTools.js\";\nimport { Plane } from \"../../Maths/math.plane.js\";\nimport { EncodeArrayBufferToBase64 } from \"../../Misc/stringTools.js\";\nimport { GenerateBase64StringFromTexture, GenerateBase64StringFromTextureAsync } from \"../../Misc/copyTools.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#texture\n */\nexport class Texture extends BaseTexture {\n    /**\n     * Are mip maps generated for this texture or not.\n     */\n    get noMipmap() {\n        return this._noMipmap;\n    }\n    /** Returns the texture mime type if it was defined by a loader (undefined else) */\n    get mimeType() {\n        return this._mimeType;\n    }\n    /**\n     * Is the texture preventing material to render while loading.\n     * If false, a default texture will be used instead of the loading one during the preparation step.\n     */\n    set isBlocking(value) {\n        this._isBlocking = value;\n    }\n    get isBlocking() {\n        return this._isBlocking;\n    }\n    /**\n     * Gets a boolean indicating if the texture needs to be inverted on the y axis during loading\n     */\n    get invertY() {\n        return this._invertY;\n    }\n    /**\n     * Instantiates a new texture.\n     * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#texture\n     * @param url defines the url of the picture to load as a texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode defines the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad defines a callback triggered when the texture has been loaded\n     * @param onError defines a callback triggered when an error occurred during the loading session\n     * @param buffer defines the buffer to load the texture from in case the texture is loaded from a buffer representation\n     * @param deleteBuffer defines if the buffer we are loading the texture from should be deleted after load\n     * @param format defines the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param mimeType defines an optional mime type information\n     * @param loaderOptions options to be passed to the loader\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @param forcedExtension defines the extension to use to pick the right loader\n     */\n    constructor(url, sceneOrEngine, noMipmapOrOptions, invertY, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, onLoad = null, onError = null, buffer = null, deleteBuffer = false, format, mimeType, loaderOptions, creationFlags, forcedExtension) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        super(sceneOrEngine);\n        /**\n         * Define the url of the texture.\n         */\n        this.url = null;\n        /**\n         * Define an offset on the texture to offset the u coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#offsetting\n         */\n        this.uOffset = 0;\n        /**\n         * Define an offset on the texture to offset the v coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#offsetting\n         */\n        this.vOffset = 0;\n        /**\n         * Define an offset on the texture to scale the u coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#tiling\n         */\n        this.uScale = 1.0;\n        /**\n         * Define an offset on the texture to scale the v coordinates of the UVs\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#tiling\n         */\n        this.vScale = 1.0;\n        /**\n         * Define an offset on the texture to rotate around the u coordinates of the UVs\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\n         */\n        this.uAng = 0;\n        /**\n         * Define an offset on the texture to rotate around the v coordinates of the UVs\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\n         */\n        this.vAng = 0;\n        /**\n         * Define an offset on the texture to rotate around the w coordinates of the UVs (in case of 3d texture)\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials\n         */\n        this.wAng = 0;\n        /**\n         * Defines the center of rotation (U)\n         */\n        this.uRotationCenter = 0.5;\n        /**\n         * Defines the center of rotation (V)\n         */\n        this.vRotationCenter = 0.5;\n        /**\n         * Defines the center of rotation (W)\n         */\n        this.wRotationCenter = 0.5;\n        /**\n         * Sets this property to true to avoid deformations when rotating the texture with non-uniform scaling\n         */\n        this.homogeneousRotationInUVTransform = false;\n        /**\n         * List of inspectable custom properties (used by the Inspector)\n         * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\n         */\n        this.inspectableCustomProperties = null;\n        /** @internal */\n        this._noMipmap = false;\n        /** @internal */\n        this._invertY = false;\n        this._rowGenerationMatrix = null;\n        this._cachedTextureMatrix = null;\n        this._projectionModeMatrix = null;\n        this._t0 = null;\n        this._t1 = null;\n        this._t2 = null;\n        this._cachedUOffset = -1;\n        this._cachedVOffset = -1;\n        this._cachedUScale = 0;\n        this._cachedVScale = 0;\n        this._cachedUAng = -1;\n        this._cachedVAng = -1;\n        this._cachedWAng = -1;\n        this._cachedReflectionProjectionMatrixId = -1;\n        this._cachedURotationCenter = -1;\n        this._cachedVRotationCenter = -1;\n        this._cachedWRotationCenter = -1;\n        this._cachedHomogeneousRotationInUVTransform = false;\n        this._cachedReflectionTextureMatrix = null;\n        this._cachedReflectionUOffset = -1;\n        this._cachedReflectionVOffset = -1;\n        this._cachedReflectionUScale = 0;\n        this._cachedReflectionVScale = 0;\n        this._cachedReflectionCoordinatesMode = -1;\n        /** @internal */\n        this._buffer = null;\n        this._deleteBuffer = false;\n        this._format = null;\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n        /**\n         * Observable triggered once the texture has been loaded.\n         */\n        this.onLoadObservable = new Observable();\n        this._isBlocking = true;\n        this.name = url || \"\";\n        this.url = url;\n        let noMipmap;\n        let useSRGBBuffer = false;\n        let internalTexture = null;\n        if (typeof noMipmapOrOptions === \"object\" && noMipmapOrOptions !== null) {\n            noMipmap = (_a = noMipmapOrOptions.noMipmap) !== null && _a !== void 0 ? _a : false;\n            invertY = (_b = noMipmapOrOptions.invertY) !== null && _b !== void 0 ? _b : (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true);\n            samplingMode = (_c = noMipmapOrOptions.samplingMode) !== null && _c !== void 0 ? _c : Texture.TRILINEAR_SAMPLINGMODE;\n            onLoad = (_d = noMipmapOrOptions.onLoad) !== null && _d !== void 0 ? _d : null;\n            onError = (_e = noMipmapOrOptions.onError) !== null && _e !== void 0 ? _e : null;\n            buffer = (_f = noMipmapOrOptions.buffer) !== null && _f !== void 0 ? _f : null;\n            deleteBuffer = (_g = noMipmapOrOptions.deleteBuffer) !== null && _g !== void 0 ? _g : false;\n            format = noMipmapOrOptions.format;\n            mimeType = noMipmapOrOptions.mimeType;\n            loaderOptions = noMipmapOrOptions.loaderOptions;\n            creationFlags = noMipmapOrOptions.creationFlags;\n            useSRGBBuffer = (_h = noMipmapOrOptions.useSRGBBuffer) !== null && _h !== void 0 ? _h : false;\n            internalTexture = (_j = noMipmapOrOptions.internalTexture) !== null && _j !== void 0 ? _j : null;\n        }\n        else {\n            noMipmap = !!noMipmapOrOptions;\n        }\n        this._noMipmap = noMipmap;\n        this._invertY = invertY === undefined ? (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true) : invertY;\n        this._initialSamplingMode = samplingMode;\n        this._buffer = buffer;\n        this._deleteBuffer = deleteBuffer;\n        this._mimeType = mimeType;\n        this._loaderOptions = loaderOptions;\n        this._creationFlags = creationFlags;\n        this._useSRGBBuffer = useSRGBBuffer;\n        this._forcedExtension = forcedExtension;\n        if (format) {\n            this._format = format;\n        }\n        const scene = this.getScene();\n        const engine = this._getEngine();\n        if (!engine) {\n            return;\n        }\n        engine.onBeforeTextureInitObservable.notifyObservers(this);\n        const load = () => {\n            if (this._texture) {\n                if (this._texture._invertVScale) {\n                    this.vScale *= -1;\n                    this.vOffset += 1;\n                }\n                // Update texture to match internal texture's wrapping\n                if (this._texture._cachedWrapU !== null) {\n                    this.wrapU = this._texture._cachedWrapU;\n                    this._texture._cachedWrapU = null;\n                }\n                if (this._texture._cachedWrapV !== null) {\n                    this.wrapV = this._texture._cachedWrapV;\n                    this._texture._cachedWrapV = null;\n                }\n                if (this._texture._cachedWrapR !== null) {\n                    this.wrapR = this._texture._cachedWrapR;\n                    this._texture._cachedWrapR = null;\n                }\n            }\n            if (this.onLoadObservable.hasObservers()) {\n                this.onLoadObservable.notifyObservers(this);\n            }\n            if (onLoad) {\n                onLoad();\n            }\n            if (!this.isBlocking && scene) {\n                scene.resetCachedMaterial();\n            }\n        };\n        const errorHandler = (message, exception) => {\n            this._loadingError = true;\n            this._errorObject = { message, exception };\n            if (onError) {\n                onError(message, exception);\n            }\n            Texture.OnTextureLoadErrorObservable.notifyObservers(this);\n        };\n        if (!this.url && !internalTexture) {\n            this._delayedOnLoad = load;\n            this._delayedOnError = errorHandler;\n            return;\n        }\n        this._texture = internalTexture !== null && internalTexture !== void 0 ? internalTexture : this._getFromCache(this.url, noMipmap, samplingMode, this._invertY, useSRGBBuffer);\n        if (!this._texture) {\n            if (!scene || !scene.useDelayedTextureLoading) {\n                try {\n                    this._texture = engine.createTexture(this.url, noMipmap, this._invertY, scene, samplingMode, load, errorHandler, this._buffer, undefined, this._format, this._forcedExtension, mimeType, loaderOptions, creationFlags, useSRGBBuffer);\n                }\n                catch (e) {\n                    errorHandler(\"error loading\", e);\n                    throw e;\n                }\n                if (deleteBuffer) {\n                    this._buffer = null;\n                }\n            }\n            else {\n                this.delayLoadState = 4;\n                this._delayedOnLoad = load;\n                this._delayedOnError = errorHandler;\n            }\n        }\n        else {\n            if (this._texture.isReady) {\n                TimingTools.SetImmediate(() => load());\n            }\n            else {\n                const loadObserver = this._texture.onLoadedObservable.add(load);\n                this._texture.onErrorObservable.add((e) => {\n                    var _a;\n                    errorHandler(e.message, e.exception);\n                    (_a = this._texture) === null || _a === void 0 ? void 0 : _a.onLoadedObservable.remove(loadObserver);\n                });\n            }\n        }\n    }\n    /**\n     * Update the url (and optional buffer) of this texture if url was null during construction.\n     * @param url the url of the texture\n     * @param buffer the buffer of the texture (defaults to null)\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\n     * @param forcedExtension defines the extension to use to pick the right loader\n     */\n    updateURL(url, buffer = null, onLoad, forcedExtension) {\n        if (this.url) {\n            this.releaseInternalTexture();\n            this.getScene().markAllMaterialsAsDirty(1);\n        }\n        if (!this.name || this.name.startsWith(\"data:\")) {\n            this.name = url;\n        }\n        this.url = url;\n        this._buffer = buffer;\n        this._forcedExtension = forcedExtension;\n        this.delayLoadState = 4;\n        if (onLoad) {\n            this._delayedOnLoad = onLoad;\n        }\n        this.delayLoad();\n    }\n    /**\n     * Finish the loading sequence of a texture flagged as delayed load.\n     * @internal\n     */\n    delayLoad() {\n        if (this.delayLoadState !== 4) {\n            return;\n        }\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this.delayLoadState = 1;\n        this._texture = this._getFromCache(this.url, this._noMipmap, this.samplingMode, this._invertY, this._useSRGBBuffer);\n        if (!this._texture) {\n            this._texture = scene\n                .getEngine()\n                .createTexture(this.url, this._noMipmap, this._invertY, scene, this.samplingMode, this._delayedOnLoad, this._delayedOnError, this._buffer, null, this._format, this._forcedExtension, this._mimeType, this._loaderOptions, this._creationFlags, this._useSRGBBuffer);\n            if (this._deleteBuffer) {\n                this._buffer = null;\n            }\n        }\n        else {\n            if (this._delayedOnLoad) {\n                if (this._texture.isReady) {\n                    TimingTools.SetImmediate(this._delayedOnLoad);\n                }\n                else {\n                    this._texture.onLoadedObservable.add(this._delayedOnLoad);\n                }\n            }\n        }\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n    }\n    _prepareRowForTextureGeneration(x, y, z, t) {\n        x *= this._cachedUScale;\n        y *= this._cachedVScale;\n        x -= this.uRotationCenter * this._cachedUScale;\n        y -= this.vRotationCenter * this._cachedVScale;\n        z -= this.wRotationCenter;\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, this._rowGenerationMatrix, t);\n        t.x += this.uRotationCenter * this._cachedUScale + this._cachedUOffset;\n        t.y += this.vRotationCenter * this._cachedVScale + this._cachedVOffset;\n        t.z += this.wRotationCenter;\n    }\n    /**\n     * Checks if the texture has the same transform matrix than another texture\n     * @param texture texture to check against\n     * @returns true if the transforms are the same, else false\n     */\n    checkTransformsAreIdentical(texture) {\n        return (texture !== null &&\n            this.uOffset === texture.uOffset &&\n            this.vOffset === texture.vOffset &&\n            this.uScale === texture.uScale &&\n            this.vScale === texture.vScale &&\n            this.uAng === texture.uAng &&\n            this.vAng === texture.vAng &&\n            this.wAng === texture.wAng);\n    }\n    /**\n     * Get the current texture matrix which includes the requested offsetting, tiling and rotation components.\n     * @param uBase\n     * @returns the transform matrix of the texture.\n     */\n    getTextureMatrix(uBase = 1) {\n        if (this.uOffset === this._cachedUOffset &&\n            this.vOffset === this._cachedVOffset &&\n            this.uScale * uBase === this._cachedUScale &&\n            this.vScale === this._cachedVScale &&\n            this.uAng === this._cachedUAng &&\n            this.vAng === this._cachedVAng &&\n            this.wAng === this._cachedWAng &&\n            this.uRotationCenter === this._cachedURotationCenter &&\n            this.vRotationCenter === this._cachedVRotationCenter &&\n            this.wRotationCenter === this._cachedWRotationCenter &&\n            this.homogeneousRotationInUVTransform === this._cachedHomogeneousRotationInUVTransform) {\n            return this._cachedTextureMatrix;\n        }\n        this._cachedUOffset = this.uOffset;\n        this._cachedVOffset = this.vOffset;\n        this._cachedUScale = this.uScale * uBase;\n        this._cachedVScale = this.vScale;\n        this._cachedUAng = this.uAng;\n        this._cachedVAng = this.vAng;\n        this._cachedWAng = this.wAng;\n        this._cachedURotationCenter = this.uRotationCenter;\n        this._cachedVRotationCenter = this.vRotationCenter;\n        this._cachedWRotationCenter = this.wRotationCenter;\n        this._cachedHomogeneousRotationInUVTransform = this.homogeneousRotationInUVTransform;\n        if (!this._cachedTextureMatrix || !this._rowGenerationMatrix) {\n            this._cachedTextureMatrix = Matrix.Zero();\n            this._rowGenerationMatrix = new Matrix();\n            this._t0 = Vector3.Zero();\n            this._t1 = Vector3.Zero();\n            this._t2 = Vector3.Zero();\n        }\n        Matrix.RotationYawPitchRollToRef(this.vAng, this.uAng, this.wAng, this._rowGenerationMatrix);\n        if (this.homogeneousRotationInUVTransform) {\n            Matrix.TranslationToRef(-this._cachedURotationCenter, -this._cachedVRotationCenter, -this._cachedWRotationCenter, TmpVectors.Matrix[0]);\n            Matrix.TranslationToRef(this._cachedURotationCenter, this._cachedVRotationCenter, this._cachedWRotationCenter, TmpVectors.Matrix[1]);\n            Matrix.ScalingToRef(this._cachedUScale, this._cachedVScale, 0, TmpVectors.Matrix[2]);\n            Matrix.TranslationToRef(this._cachedUOffset, this._cachedVOffset, 0, TmpVectors.Matrix[3]);\n            TmpVectors.Matrix[0].multiplyToRef(this._rowGenerationMatrix, this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[1], this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[2], this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[3], this._cachedTextureMatrix);\n            // copy the translation row to the 3rd row of the matrix so that we don't need to update the shaders (which expects the translation to be on the 3rd row)\n            this._cachedTextureMatrix.setRowFromFloats(2, this._cachedTextureMatrix.m[12], this._cachedTextureMatrix.m[13], this._cachedTextureMatrix.m[14], 1);\n        }\n        else {\n            this._prepareRowForTextureGeneration(0, 0, 0, this._t0);\n            this._prepareRowForTextureGeneration(1.0, 0, 0, this._t1);\n            this._prepareRowForTextureGeneration(0, 1.0, 0, this._t2);\n            this._t1.subtractInPlace(this._t0);\n            this._t2.subtractInPlace(this._t0);\n            Matrix.FromValuesToRef(this._t1.x, this._t1.y, this._t1.z, 0.0, this._t2.x, this._t2.y, this._t2.z, 0.0, this._t0.x, this._t0.y, this._t0.z, 0.0, 0.0, 0.0, 0.0, 1.0, this._cachedTextureMatrix);\n        }\n        const scene = this.getScene();\n        if (!scene) {\n            return this._cachedTextureMatrix;\n        }\n        if (this.optimizeUVAllocation) {\n            // We flag the materials that are using this texture as \"texture dirty\" because depending on the fact that the matrix is the identity or not, some defines\n            // will get different values (see MaterialHelper.PrepareDefinesForMergedUV), meaning we should regenerate the effect accordingly\n            scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.hasTexture(this);\n            });\n        }\n        return this._cachedTextureMatrix;\n    }\n    /**\n     * Get the current matrix used to apply reflection. This is useful to rotate an environment texture for instance.\n     * @returns The reflection texture transform\n     */\n    getReflectionTextureMatrix() {\n        const scene = this.getScene();\n        if (!scene) {\n            return this._cachedReflectionTextureMatrix;\n        }\n        if (this.uOffset === this._cachedReflectionUOffset &&\n            this.vOffset === this._cachedReflectionVOffset &&\n            this.uScale === this._cachedReflectionUScale &&\n            this.vScale === this._cachedReflectionVScale &&\n            this.coordinatesMode === this._cachedReflectionCoordinatesMode) {\n            if (this.coordinatesMode === Texture.PROJECTION_MODE) {\n                if (this._cachedReflectionProjectionMatrixId === scene.getProjectionMatrix().updateFlag) {\n                    return this._cachedReflectionTextureMatrix;\n                }\n            }\n            else {\n                return this._cachedReflectionTextureMatrix;\n            }\n        }\n        if (!this._cachedReflectionTextureMatrix) {\n            this._cachedReflectionTextureMatrix = Matrix.Zero();\n        }\n        if (!this._projectionModeMatrix) {\n            this._projectionModeMatrix = Matrix.Zero();\n        }\n        const flagMaterialsAsTextureDirty = this._cachedReflectionCoordinatesMode !== this.coordinatesMode;\n        this._cachedReflectionUOffset = this.uOffset;\n        this._cachedReflectionVOffset = this.vOffset;\n        this._cachedReflectionUScale = this.uScale;\n        this._cachedReflectionVScale = this.vScale;\n        this._cachedReflectionCoordinatesMode = this.coordinatesMode;\n        switch (this.coordinatesMode) {\n            case Texture.PLANAR_MODE: {\n                Matrix.IdentityToRef(this._cachedReflectionTextureMatrix);\n                this._cachedReflectionTextureMatrix[0] = this.uScale;\n                this._cachedReflectionTextureMatrix[5] = this.vScale;\n                this._cachedReflectionTextureMatrix[12] = this.uOffset;\n                this._cachedReflectionTextureMatrix[13] = this.vOffset;\n                break;\n            }\n            case Texture.PROJECTION_MODE: {\n                Matrix.FromValuesToRef(0.5, 0.0, 0.0, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, this._projectionModeMatrix);\n                const projectionMatrix = scene.getProjectionMatrix();\n                this._cachedReflectionProjectionMatrixId = projectionMatrix.updateFlag;\n                projectionMatrix.multiplyToRef(this._projectionModeMatrix, this._cachedReflectionTextureMatrix);\n                break;\n            }\n            default:\n                Matrix.IdentityToRef(this._cachedReflectionTextureMatrix);\n                break;\n        }\n        if (flagMaterialsAsTextureDirty) {\n            // We flag the materials that are using this texture as \"texture dirty\" if the coordinatesMode has changed.\n            // Indeed, this property is used to set the value of some defines used to generate the effect (in material.isReadyForSubMesh), so we must make sure this code will be re-executed and the effect recreated if necessary\n            scene.markAllMaterialsAsDirty(1, (mat) => {\n                return mat.getActiveTextures().indexOf(this) !== -1;\n            });\n        }\n        return this._cachedReflectionTextureMatrix;\n    }\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    clone() {\n        const options = {\n            noMipmap: this._noMipmap,\n            invertY: this._invertY,\n            samplingMode: this.samplingMode,\n            onLoad: undefined,\n            onError: undefined,\n            buffer: this._texture ? this._texture._buffer : undefined,\n            deleteBuffer: this._deleteBuffer,\n            format: this.textureFormat,\n            mimeType: this.mimeType,\n            loaderOptions: this._loaderOptions,\n            creationFlags: this._creationFlags,\n            useSRGBBuffer: this._useSRGBBuffer,\n        };\n        return SerializationHelper.Clone(() => {\n            return new Texture(this._texture ? this._texture.url : null, this.getScene(), options);\n        }, this);\n    }\n    /**\n     * Serialize the texture to a JSON representation we can easily use in the respective Parse function.\n     * @returns The JSON representation of the texture\n     */\n    serialize() {\n        var _a, _b;\n        const savedName = this.name;\n        if (!Texture.SerializeBuffers) {\n            if (this.name.startsWith(\"data:\")) {\n                this.name = \"\";\n            }\n        }\n        if (this.name.startsWith(\"data:\") && this.url === this.name) {\n            this.url = \"\";\n        }\n        const serializationObject = super.serialize(Texture._SerializeInternalTextureUniqueId);\n        if (!serializationObject) {\n            return null;\n        }\n        if (Texture.SerializeBuffers || Texture.ForceSerializeBuffers) {\n            if (typeof this._buffer === \"string\" && this._buffer.substr(0, 5) === \"data:\") {\n                serializationObject.base64String = this._buffer;\n                serializationObject.name = serializationObject.name.replace(\"data:\", \"\");\n            }\n            else if (this.url && this.url.startsWith(\"data:\") && this._buffer instanceof Uint8Array) {\n                serializationObject.base64String = \"data:image/png;base64,\" + EncodeArrayBufferToBase64(this._buffer);\n            }\n            else if (Texture.ForceSerializeBuffers || (this.url && this.url.startsWith(\"blob:\")) || this._forceSerialize) {\n                serializationObject.base64String =\n                    !this._engine || this._engine._features.supportSyncTextureRead ? GenerateBase64StringFromTexture(this) : GenerateBase64StringFromTextureAsync(this);\n            }\n        }\n        serializationObject.invertY = this._invertY;\n        serializationObject.samplingMode = this.samplingMode;\n        serializationObject._creationFlags = this._creationFlags;\n        serializationObject._useSRGBBuffer = this._useSRGBBuffer;\n        if (Texture._SerializeInternalTextureUniqueId) {\n            serializationObject.internalTextureUniqueId = (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.uniqueId) !== null && _b !== void 0 ? _b : undefined;\n        }\n        this.name = savedName;\n        return serializationObject;\n    }\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"Texture\"\n     */\n    getClassName() {\n        return \"Texture\";\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        super.dispose();\n        this.onLoadObservable.clear();\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n        this._buffer = null;\n    }\n    /**\n     * Parse the JSON representation of a texture in order to recreate the texture in the given scene.\n     * @param parsedTexture Define the JSON representation of the texture\n     * @param scene Define the scene the parsed texture should be instantiated in\n     * @param rootUrl Define the root url of the parsing sequence in the case of relative dependencies\n     * @returns The parsed texture if successful\n     */\n    static Parse(parsedTexture, scene, rootUrl) {\n        if (parsedTexture.customType) {\n            const customTexture = InstantiationTools.Instantiate(parsedTexture.customType);\n            // Update Sampling Mode\n            const parsedCustomTexture = customTexture.Parse(parsedTexture, scene, rootUrl);\n            if (parsedTexture.samplingMode && parsedCustomTexture.updateSamplingMode && parsedCustomTexture._samplingMode) {\n                if (parsedCustomTexture._samplingMode !== parsedTexture.samplingMode) {\n                    parsedCustomTexture.updateSamplingMode(parsedTexture.samplingMode);\n                }\n            }\n            return parsedCustomTexture;\n        }\n        if (parsedTexture.isCube && !parsedTexture.isRenderTarget) {\n            return Texture._CubeTextureParser(parsedTexture, scene, rootUrl);\n        }\n        const hasInternalTextureUniqueId = parsedTexture.internalTextureUniqueId !== undefined;\n        if (!parsedTexture.name && !parsedTexture.isRenderTarget && !hasInternalTextureUniqueId) {\n            return null;\n        }\n        let internalTexture;\n        if (hasInternalTextureUniqueId) {\n            const cache = scene.getEngine().getLoadedTexturesCache();\n            for (const texture of cache) {\n                if (texture.uniqueId === parsedTexture.internalTextureUniqueId) {\n                    internalTexture = texture;\n                    break;\n                }\n            }\n        }\n        const onLoaded = (texture) => {\n            var _a;\n            // Clear cache\n            if (texture && texture._texture) {\n                texture._texture._cachedWrapU = null;\n                texture._texture._cachedWrapV = null;\n                texture._texture._cachedWrapR = null;\n            }\n            // Update Sampling Mode\n            if (parsedTexture.samplingMode) {\n                const sampling = parsedTexture.samplingMode;\n                if (texture && texture.samplingMode !== sampling) {\n                    texture.updateSamplingMode(sampling);\n                }\n            }\n            // Animations\n            if (texture && parsedTexture.animations) {\n                for (let animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\n                    const parsedAnimation = parsedTexture.animations[animationIndex];\n                    const internalClass = GetClass(\"BABYLON.Animation\");\n                    if (internalClass) {\n                        texture.animations.push(internalClass.Parse(parsedAnimation));\n                    }\n                }\n            }\n            if (hasInternalTextureUniqueId && !internalTexture) {\n                (_a = texture === null || texture === void 0 ? void 0 : texture._texture) === null || _a === void 0 ? void 0 : _a._setUniqueId(parsedTexture.internalTextureUniqueId);\n            }\n        };\n        const texture = SerializationHelper.Parse(() => {\n            var _a, _b, _c;\n            let generateMipMaps = true;\n            if (parsedTexture.noMipmap) {\n                generateMipMaps = false;\n            }\n            if (parsedTexture.mirrorPlane) {\n                const mirrorTexture = Texture._CreateMirror(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\n                mirrorTexture._waitingRenderList = parsedTexture.renderList;\n                mirrorTexture.mirrorPlane = Plane.FromArray(parsedTexture.mirrorPlane);\n                onLoaded(mirrorTexture);\n                return mirrorTexture;\n            }\n            else if (parsedTexture.isRenderTarget) {\n                let renderTargetTexture = null;\n                if (parsedTexture.isCube) {\n                    // Search for an existing reflection probe (which contains a cube render target texture)\n                    if (scene.reflectionProbes) {\n                        for (let index = 0; index < scene.reflectionProbes.length; index++) {\n                            const probe = scene.reflectionProbes[index];\n                            if (probe.name === parsedTexture.name) {\n                                return probe.cubeTexture;\n                            }\n                        }\n                    }\n                }\n                else {\n                    renderTargetTexture = Texture._CreateRenderTargetTexture(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps, (_a = parsedTexture._creationFlags) !== null && _a !== void 0 ? _a : 0);\n                    renderTargetTexture._waitingRenderList = parsedTexture.renderList;\n                }\n                onLoaded(renderTargetTexture);\n                return renderTargetTexture;\n            }\n            else {\n                let texture;\n                if (parsedTexture.base64String && !internalTexture) {\n                    // name and url are the same to ensure caching happens from the actual base64 string\n                    texture = Texture.CreateFromBase64String(parsedTexture.base64String, parsedTexture.base64String, scene, !generateMipMaps, parsedTexture.invertY, parsedTexture.samplingMode, () => {\n                        onLoaded(texture);\n                    }, (_b = parsedTexture._creationFlags) !== null && _b !== void 0 ? _b : 0, (_c = parsedTexture._useSRGBBuffer) !== null && _c !== void 0 ? _c : false);\n                    // prettier name to fit with the loaded data\n                    texture.name = parsedTexture.name;\n                }\n                else {\n                    let url;\n                    if (parsedTexture.name && parsedTexture.name.indexOf(\"://\") > 0) {\n                        url = parsedTexture.name;\n                    }\n                    else {\n                        url = rootUrl + parsedTexture.name;\n                    }\n                    if (parsedTexture.url && (parsedTexture.url.startsWith(\"data:\") || Texture.UseSerializedUrlIfAny)) {\n                        url = parsedTexture.url;\n                    }\n                    const options = {\n                        noMipmap: !generateMipMaps,\n                        invertY: parsedTexture.invertY,\n                        samplingMode: parsedTexture.samplingMode,\n                        onLoad: () => {\n                            onLoaded(texture);\n                        },\n                        internalTexture,\n                    };\n                    texture = new Texture(url, scene, options);\n                }\n                return texture;\n            }\n        }, parsedTexture, scene);\n        return texture;\n    }\n    /**\n     * Creates a texture from its base 64 representation.\n     * @param data Define the base64 payload without the data: prefix\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\n     * @param scene Define the scene the texture should belong to\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad define a callback triggered when the texture has been loaded\n     * @param onError define a callback triggered when an error occurred during the loading session\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @returns the created texture\n     */\n    static CreateFromBase64String(data, name, scene, noMipmapOrOptions, invertY, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, onLoad = null, onError = null, format = 5, creationFlags) {\n        return new Texture(\"data:\" + name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, data, false, format, undefined, undefined, creationFlags);\n    }\n    /**\n     * Creates a texture from its data: representation. (data: will be added in case only the payload has been passed in)\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\n     * @param buffer define the buffer to load the texture from in case the texture is loaded from a buffer representation\n     * @param scene Define the scene the texture should belong to\n     * @param deleteBuffer define if the buffer we are loading the texture from should be deleted after load\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad define a callback triggered when the texture has been loaded\n     * @param onError define a callback triggered when an error occurred during the loading session\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @returns the created texture\n     */\n    static LoadFromDataString(name, buffer, scene, deleteBuffer = false, noMipmapOrOptions, invertY = true, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, onLoad = null, onError = null, format = 5, creationFlags) {\n        if (name.substr(0, 5) !== \"data:\") {\n            name = \"data:\" + name;\n        }\n        return new Texture(name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format, undefined, undefined, creationFlags);\n    }\n}\n/**\n * Gets or sets a general boolean used to indicate that textures containing direct data (buffers) must be saved as part of the serialization process\n */\nTexture.SerializeBuffers = true;\n/**\n * Gets or sets a general boolean used to indicate that texture buffers must be saved as part of the serialization process.\n * If no buffer exists, one will be created as base64 string from the internal webgl data.\n */\nTexture.ForceSerializeBuffers = false;\n/**\n * This observable will notify when any texture had a loading error\n */\nTexture.OnTextureLoadErrorObservable = new Observable();\n/** @internal */\nTexture._SerializeInternalTextureUniqueId = false;\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CubeTextureParser = (jsonTexture, scene, rootUrl) => {\n    throw _WarnImport(\"CubeTexture\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CreateMirror = (name, renderTargetSize, scene, generateMipMaps) => {\n    throw _WarnImport(\"MirrorTexture\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CreateRenderTargetTexture = (name, renderTargetSize, scene, generateMipMaps, creationFlags) => {\n    throw _WarnImport(\"RenderTargetTexture\");\n};\n/** nearest is mag = nearest and min = nearest and no mip */\nTexture.NEAREST_SAMPLINGMODE = 1;\n/** nearest is mag = nearest and min = nearest and mip = linear */\nTexture.NEAREST_NEAREST_MIPLINEAR = 8; // nearest is mag = nearest and min = nearest and mip = linear\n/** Bilinear is mag = linear and min = linear and no mip */\nTexture.BILINEAR_SAMPLINGMODE = 2;\n/** Bilinear is mag = linear and min = linear and mip = nearest */\nTexture.LINEAR_LINEAR_MIPNEAREST = 11; // Bilinear is mag = linear and min = linear and mip = nearest\n/** Trilinear is mag = linear and min = linear and mip = linear */\nTexture.TRILINEAR_SAMPLINGMODE = 3;\n/** Trilinear is mag = linear and min = linear and mip = linear */\nTexture.LINEAR_LINEAR_MIPLINEAR = 3; // Trilinear is mag = linear and min = linear and mip = linear\n/** mag = nearest and min = nearest and mip = nearest */\nTexture.NEAREST_NEAREST_MIPNEAREST = 4;\n/** mag = nearest and min = linear and mip = nearest */\nTexture.NEAREST_LINEAR_MIPNEAREST = 5;\n/** mag = nearest and min = linear and mip = linear */\nTexture.NEAREST_LINEAR_MIPLINEAR = 6;\n/** mag = nearest and min = linear and mip = none */\nTexture.NEAREST_LINEAR = 7;\n/** mag = nearest and min = nearest and mip = none */\nTexture.NEAREST_NEAREST = 1;\n/** mag = linear and min = nearest and mip = nearest */\nTexture.LINEAR_NEAREST_MIPNEAREST = 9;\n/** mag = linear and min = nearest and mip = linear */\nTexture.LINEAR_NEAREST_MIPLINEAR = 10;\n/** mag = linear and min = linear and mip = none */\nTexture.LINEAR_LINEAR = 2;\n/** mag = linear and min = nearest and mip = none */\nTexture.LINEAR_NEAREST = 12;\n/** Explicit coordinates mode */\nTexture.EXPLICIT_MODE = 0;\n/** Spherical coordinates mode */\nTexture.SPHERICAL_MODE = 1;\n/** Planar coordinates mode */\nTexture.PLANAR_MODE = 2;\n/** Cubic coordinates mode */\nTexture.CUBIC_MODE = 3;\n/** Projection coordinates mode */\nTexture.PROJECTION_MODE = 4;\n/** Inverse Cubic coordinates mode */\nTexture.SKYBOX_MODE = 5;\n/** Inverse Cubic coordinates mode */\nTexture.INVCUBIC_MODE = 6;\n/** Equirectangular coordinates mode */\nTexture.EQUIRECTANGULAR_MODE = 7;\n/** Equirectangular Fixed coordinates mode */\nTexture.FIXED_EQUIRECTANGULAR_MODE = 8;\n/** Equirectangular Fixed Mirrored coordinates mode */\nTexture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n/** Texture is not repeating outside of 0..1 UVs */\nTexture.CLAMP_ADDRESSMODE = 0;\n/** Texture is repeating outside of 0..1 UVs */\nTexture.WRAP_ADDRESSMODE = 1;\n/** Texture is repeating and mirrored */\nTexture.MIRROR_ADDRESSMODE = 2;\n/**\n * Gets or sets a boolean which defines if the texture url must be build from the serialized URL instead of just using the name and loading them side by side with the scene file\n */\nTexture.UseSerializedUrlIfAny = false;\n__decorate([\n    serialize()\n], Texture.prototype, \"url\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uOffset\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vOffset\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uScale\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vScale\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uAng\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vAng\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"wAng\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"uRotationCenter\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"vRotationCenter\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"wRotationCenter\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"homogeneousRotationInUVTransform\", void 0);\n__decorate([\n    serialize()\n], Texture.prototype, \"isBlocking\", null);\n// References the dependencies.\nRegisterClass(\"BABYLON.Texture\", Texture);\nSerializationHelper._TextureParser = Texture.Parse;\n//# sourceMappingURL=texture.js.map","import { InternalTextureSource } from \"../Materials/Textures/internalTexture.js\";\n\n/**\n * Wrapper around a render target (either single or multi textures)\n */\nexport class RenderTargetWrapper {\n    /**\n     * Gets the depth/stencil texture (if created by a createDepthStencilTexture() call)\n     */\n    get depthStencilTexture() {\n        return this._depthStencilTexture;\n    }\n    /**\n     * Indicates if the depth/stencil texture has a stencil aspect\n     */\n    get depthStencilTextureWithStencil() {\n        return this._depthStencilTextureWithStencil;\n    }\n    /**\n     * Defines if the render target wrapper is for a cube texture or if false a 2d texture\n     */\n    get isCube() {\n        return this._isCube;\n    }\n    /**\n     * Defines if the render target wrapper is for a single or multi target render wrapper\n     */\n    get isMulti() {\n        return this._isMulti;\n    }\n    /**\n     * Defines if the render target wrapper is for a single or an array of textures\n     */\n    get is2DArray() {\n        return this.layers > 0;\n    }\n    /**\n     * Gets the size of the render target wrapper (used for cubes, as width=height in this case)\n     */\n    get size() {\n        return this.width;\n    }\n    /**\n     * Gets the width of the render target wrapper\n     */\n    get width() {\n        return this._size.width || this._size;\n    }\n    /**\n     * Gets the height of the render target wrapper\n     */\n    get height() {\n        return this._size.height || this._size;\n    }\n    /**\n     * Gets the number of layers of the render target wrapper (only used if is2DArray is true and wrapper is not a multi render target)\n     */\n    get layers() {\n        return this._size.layers || 0;\n    }\n    /**\n     * Gets the render texture. If this is a multi render target, gets the first texture\n     */\n    get texture() {\n        var _a, _b;\n        return (_b = (_a = this._textures) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Gets the list of render textures. If we are not in a multi render target, the list will be null (use the texture getter instead)\n     */\n    get textures() {\n        return this._textures;\n    }\n    /**\n     * Gets the face indices that correspond to the list of render textures. If we are not in a multi render target, the list will be null\n     */\n    get faceIndices() {\n        return this._faceIndices;\n    }\n    /**\n     * Gets the layer indices that correspond to the list of render textures. If we are not in a multi render target, the list will be null\n     */\n    get layerIndices() {\n        return this._layerIndices;\n    }\n    /**\n     * Gets the sample count of the render target\n     */\n    get samples() {\n        return this._samples;\n    }\n    /**\n     * Sets the sample count of the render target\n     * @param value sample count\n     * @param initializeBuffers If set to true, the engine will make an initializing call to drawBuffers (only used when isMulti=true).\n     * @param force true to force calling the update sample count engine function even if the current sample count is equal to value\n     * @returns the sample count that has been set\n     */\n    setSamples(value, initializeBuffers = true, force = false) {\n        if (this.samples === value && !force) {\n            return value;\n        }\n        const result = this._isMulti\n            ? this._engine.updateMultipleRenderTargetTextureSampleCount(this, value, initializeBuffers)\n            : this._engine.updateRenderTargetTextureSampleCount(this, value);\n        this._samples = value;\n        return result;\n    }\n    /**\n     * Initializes the render target wrapper\n     * @param isMulti true if the wrapper is a multi render target\n     * @param isCube true if the wrapper should render to a cube texture\n     * @param size size of the render target (width/height/layers)\n     * @param engine engine used to create the render target\n     */\n    constructor(isMulti, isCube, size, engine) {\n        this._textures = null;\n        this._faceIndices = null;\n        this._layerIndices = null;\n        /** @internal */\n        this._samples = 1;\n        /** @internal */\n        this._attachments = null;\n        /** @internal */\n        this._generateStencilBuffer = false;\n        /** @internal */\n        this._generateDepthBuffer = false;\n        /** @internal */\n        this._depthStencilTextureWithStencil = false;\n        this._isMulti = isMulti;\n        this._isCube = isCube;\n        this._size = size;\n        this._engine = engine;\n        this._depthStencilTexture = null;\n    }\n    /**\n     * Sets the render target texture(s)\n     * @param textures texture(s) to set\n     */\n    setTextures(textures) {\n        if (Array.isArray(textures)) {\n            this._textures = textures;\n        }\n        else if (textures) {\n            this._textures = [textures];\n        }\n        else {\n            this._textures = null;\n        }\n    }\n    /**\n     * Set a texture in the textures array\n     * @param texture The texture to set\n     * @param index The index in the textures array to set\n     * @param disposePrevious If this function should dispose the previous texture\n     */\n    setTexture(texture, index = 0, disposePrevious = true) {\n        if (!this._textures) {\n            this._textures = [];\n        }\n        if (this._textures[index] && disposePrevious) {\n            this._textures[index].dispose();\n        }\n        this._textures[index] = texture;\n    }\n    /**\n     * Sets the layer and face indices of every render target texture bound to each color attachment\n     * @param layers The layers of each texture to be set\n     * @param faces The faces of each texture to be set\n     */\n    setLayerAndFaceIndices(layers, faces) {\n        this._layerIndices = layers;\n        this._faceIndices = faces;\n    }\n    /**\n     * Sets the layer and face indices of a texture in the textures array that should be bound to each color attachment\n     * @param index The index of the texture in the textures array to modify\n     * @param layer The layer of the texture to be set\n     * @param face The face of the texture to be set\n     */\n    setLayerAndFaceIndex(index = 0, layer, face) {\n        if (!this._layerIndices) {\n            this._layerIndices = [];\n        }\n        if (!this._faceIndices) {\n            this._faceIndices = [];\n        }\n        if (layer !== undefined && layer >= 0) {\n            this._layerIndices[index] = layer;\n        }\n        if (face !== undefined && face >= 0) {\n            this._faceIndices[index] = face;\n        }\n    }\n    /**\n     * Creates the depth/stencil texture\n     * @param comparisonFunction Comparison function to use for the texture\n     * @param bilinearFiltering true if bilinear filtering should be used when sampling the texture\n     * @param generateStencil true if the stencil aspect should also be created\n     * @param samples sample count to use when creating the texture\n     * @param format format of the depth texture\n     * @param label defines the label to use for the texture (for debugging purpose only)\n     * @returns the depth/stencil created texture\n     */\n    createDepthStencilTexture(comparisonFunction = 0, bilinearFiltering = true, generateStencil = false, samples = 1, format = 14, label) {\n        var _a;\n        (_a = this._depthStencilTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._depthStencilTextureWithStencil = generateStencil;\n        this._depthStencilTexture = this._engine.createDepthStencilTexture(this._size, {\n            bilinearFiltering,\n            comparisonFunction,\n            generateStencil,\n            isCube: this._isCube,\n            samples,\n            depthTextureFormat: format,\n            label,\n        }, this);\n        return this._depthStencilTexture;\n    }\n    /**\n     * Shares the depth buffer of this render target with another render target.\n     * @internal\n     * @param renderTarget Destination renderTarget\n     */\n    _shareDepth(renderTarget) {\n        if (this._depthStencilTexture) {\n            if (renderTarget._depthStencilTexture) {\n                renderTarget._depthStencilTexture.dispose();\n            }\n            renderTarget._depthStencilTexture = this._depthStencilTexture;\n            this._depthStencilTexture.incrementReferences();\n        }\n    }\n    /**\n     * @internal\n     */\n    _swapAndDie(target) {\n        if (this.texture) {\n            this.texture._swapAndDie(target);\n        }\n        this._textures = null;\n        this.dispose(true);\n    }\n    _cloneRenderTargetWrapper() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        let rtw = null;\n        if (this._isMulti) {\n            const textureArray = this.textures;\n            if (textureArray && textureArray.length > 0) {\n                let generateDepthTexture = false;\n                let textureCount = textureArray.length;\n                const lastTextureSource = textureArray[textureArray.length - 1]._source;\n                if (lastTextureSource === InternalTextureSource.Depth || lastTextureSource === InternalTextureSource.DepthStencil) {\n                    generateDepthTexture = true;\n                    textureCount--;\n                }\n                const samplingModes = [];\n                const types = [];\n                const formats = [];\n                const targetTypes = [];\n                const faceIndex = [];\n                const layerIndex = [];\n                const layerCounts = [];\n                const internalTexture2Index = {};\n                for (let i = 0; i < textureCount; ++i) {\n                    const texture = textureArray[i];\n                    samplingModes.push(texture.samplingMode);\n                    types.push(texture.type);\n                    formats.push(texture.format);\n                    const index = internalTexture2Index[texture.uniqueId];\n                    if (index !== undefined) {\n                        targetTypes.push(-1);\n                        layerCounts.push(0);\n                    }\n                    else {\n                        internalTexture2Index[texture.uniqueId] = i;\n                        if (texture.is2DArray) {\n                            targetTypes.push(35866);\n                            layerCounts.push(texture.depth);\n                        }\n                        else if (texture.isCube) {\n                            targetTypes.push(34067);\n                            layerCounts.push(0);\n                        } /*else if (texture.isCubeArray) {\n                            targetTypes.push(3735928559);\n                            layerCounts.push(texture.depth);\n                        }*/\n                        else if (texture.is3D) {\n                            targetTypes.push(32879);\n                            layerCounts.push(texture.depth);\n                        }\n                        else {\n                            targetTypes.push(3553);\n                            layerCounts.push(0);\n                        }\n                    }\n                    if (this._faceIndices) {\n                        faceIndex.push((_a = this._faceIndices[i]) !== null && _a !== void 0 ? _a : 0);\n                    }\n                    if (this._layerIndices) {\n                        layerIndex.push((_b = this._layerIndices[i]) !== null && _b !== void 0 ? _b : 0);\n                    }\n                }\n                const optionsMRT = {\n                    samplingModes,\n                    generateMipMaps: textureArray[0].generateMipMaps,\n                    generateDepthBuffer: this._generateDepthBuffer,\n                    generateStencilBuffer: this._generateStencilBuffer,\n                    generateDepthTexture,\n                    types,\n                    formats,\n                    textureCount,\n                    targetTypes,\n                    faceIndex,\n                    layerIndex,\n                    layerCounts,\n                };\n                const size = {\n                    width: this.width,\n                    height: this.height,\n                };\n                rtw = this._engine.createMultipleRenderTarget(size, optionsMRT);\n                for (let i = 0; i < textureCount; ++i) {\n                    if (targetTypes[i] !== -1) {\n                        continue;\n                    }\n                    const index = internalTexture2Index[textureArray[i].uniqueId];\n                    rtw.setTexture(rtw.textures[index], i);\n                }\n            }\n        }\n        else {\n            const options = {};\n            options.generateDepthBuffer = this._generateDepthBuffer;\n            options.generateMipMaps = (_d = (_c = this.texture) === null || _c === void 0 ? void 0 : _c.generateMipMaps) !== null && _d !== void 0 ? _d : false;\n            options.generateStencilBuffer = this._generateStencilBuffer;\n            options.samplingMode = (_e = this.texture) === null || _e === void 0 ? void 0 : _e.samplingMode;\n            options.type = (_f = this.texture) === null || _f === void 0 ? void 0 : _f.type;\n            options.format = (_g = this.texture) === null || _g === void 0 ? void 0 : _g.format;\n            if (this.isCube) {\n                rtw = this._engine.createRenderTargetCubeTexture(this.width, options);\n            }\n            else {\n                const size = {\n                    width: this.width,\n                    height: this.height,\n                    layers: this.is2DArray ? (_h = this.texture) === null || _h === void 0 ? void 0 : _h.depth : undefined,\n                };\n                rtw = this._engine.createRenderTargetTexture(size, options);\n            }\n            rtw.texture.isReady = true;\n        }\n        return rtw;\n    }\n    _swapRenderTargetWrapper(target) {\n        if (this._textures && target._textures) {\n            for (let i = 0; i < this._textures.length; ++i) {\n                this._textures[i]._swapAndDie(target._textures[i], false);\n                target._textures[i].isReady = true;\n            }\n        }\n        if (this._depthStencilTexture && target._depthStencilTexture) {\n            this._depthStencilTexture._swapAndDie(target._depthStencilTexture);\n            target._depthStencilTexture.isReady = true;\n        }\n        this._textures = null;\n        this._depthStencilTexture = null;\n    }\n    /** @internal */\n    _rebuild() {\n        const rtw = this._cloneRenderTargetWrapper();\n        if (!rtw) {\n            return;\n        }\n        if (this._depthStencilTexture) {\n            const samplingMode = this._depthStencilTexture.samplingMode;\n            const bilinear = samplingMode === 2 ||\n                samplingMode === 3 ||\n                samplingMode === 11;\n            rtw.createDepthStencilTexture(this._depthStencilTexture._comparisonFunction, bilinear, this._depthStencilTextureWithStencil, this._depthStencilTexture.samples);\n        }\n        if (this.samples > 1) {\n            rtw.setSamples(this.samples);\n        }\n        rtw._swapRenderTargetWrapper(this);\n        rtw.dispose();\n    }\n    /**\n     * Releases the internal render textures\n     */\n    releaseTextures() {\n        var _a, _b;\n        if (this._textures) {\n            for (let i = 0; (_b = i < ((_a = this._textures) === null || _a === void 0 ? void 0 : _a.length)) !== null && _b !== void 0 ? _b : 0; ++i) {\n                this._textures[i].dispose();\n            }\n        }\n        this._textures = null;\n    }\n    /**\n     * Disposes the whole render target wrapper\n     * @param disposeOnlyFramebuffers true if only the frame buffers should be released (used for the WebGL engine). If false, all the textures will also be released\n     */\n    dispose(disposeOnlyFramebuffers = false) {\n        var _a;\n        if (!disposeOnlyFramebuffers) {\n            (_a = this._depthStencilTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n            this._depthStencilTexture = null;\n            this.releaseTextures();\n        }\n        this._engine._releaseRenderTargetWrapper(this);\n    }\n}\n//# sourceMappingURL=renderTargetWrapper.js.map","import { RenderTargetWrapper } from \"../renderTargetWrapper.js\";\n/** @internal */\nexport class WebGLRenderTargetWrapper extends RenderTargetWrapper {\n    constructor(isMulti, isCube, size, engine, context) {\n        super(isMulti, isCube, size, engine);\n        this._framebuffer = null;\n        this._depthStencilBuffer = null;\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        this._MSAAFramebuffer = null;\n        // Multiview\n        this._colorTextureArray = null;\n        this._depthStencilTextureArray = null;\n        this._context = context;\n    }\n    _cloneRenderTargetWrapper() {\n        let rtw = null;\n        if (this._colorTextureArray && this._depthStencilTextureArray) {\n            rtw = this._engine.createMultiviewRenderTargetTexture(this.width, this.height);\n            rtw.texture.isReady = true;\n        }\n        else {\n            rtw = super._cloneRenderTargetWrapper();\n        }\n        return rtw;\n    }\n    _swapRenderTargetWrapper(target) {\n        super._swapRenderTargetWrapper(target);\n        target._framebuffer = this._framebuffer;\n        target._depthStencilBuffer = this._depthStencilBuffer;\n        target._MSAAFramebuffer = this._MSAAFramebuffer;\n        target._colorTextureArray = this._colorTextureArray;\n        target._depthStencilTextureArray = this._depthStencilTextureArray;\n        this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\n    }\n    /**\n     * Shares the depth buffer of this render target with another render target.\n     * @internal\n     * @param renderTarget Destination renderTarget\n     */\n    _shareDepth(renderTarget) {\n        super._shareDepth(renderTarget);\n        const gl = this._context;\n        const depthbuffer = this._depthStencilBuffer;\n        const framebuffer = renderTarget._MSAAFramebuffer || renderTarget._framebuffer;\n        if (renderTarget._depthStencilBuffer) {\n            gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\n        }\n        renderTarget._depthStencilBuffer = this._depthStencilBuffer;\n        this._engine._bindUnboundFramebuffer(framebuffer);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);\n        this._engine._bindUnboundFramebuffer(null);\n    }\n    /**\n     * Binds a texture to this render target on a specific attachment\n     * @param texture The texture to bind to the framebuffer\n     * @param attachmentIndex Index of the attachment\n     * @param faceIndexOrLayer The face or layer of the texture to render to in case of cube texture or array texture\n     * @param lodLevel defines the lod level to bind to the frame buffer\n     */\n    _bindTextureRenderTarget(texture, attachmentIndex = 0, faceIndexOrLayer, lodLevel = 0) {\n        var _a, _b, _c, _d;\n        if (!texture._hardwareTexture) {\n            return;\n        }\n        const framebuffer = this._framebuffer;\n        const currentFB = this._engine._currentFramebuffer;\n        this._engine._bindUnboundFramebuffer(framebuffer);\n        if (this._engine.webGLVersion > 1) {\n            const gl = this._context;\n            const attachment = gl[\"COLOR_ATTACHMENT\" + attachmentIndex];\n            if (texture.is2DArray || texture.is3D) {\n                faceIndexOrLayer = (_b = faceIndexOrLayer !== null && faceIndexOrLayer !== void 0 ? faceIndexOrLayer : (_a = this.layerIndices) === null || _a === void 0 ? void 0 : _a[attachmentIndex]) !== null && _b !== void 0 ? _b : 0;\n                gl.framebufferTextureLayer(gl.FRAMEBUFFER, attachment, texture._hardwareTexture.underlyingResource, lodLevel, faceIndexOrLayer);\n            }\n            else if (texture.isCube) {\n                // if face index is not specified, try to query it from faceIndices\n                // default is face 0\n                faceIndexOrLayer = (_d = faceIndexOrLayer !== null && faceIndexOrLayer !== void 0 ? faceIndexOrLayer : (_c = this.faceIndices) === null || _c === void 0 ? void 0 : _c[attachmentIndex]) !== null && _d !== void 0 ? _d : 0;\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndexOrLayer, texture._hardwareTexture.underlyingResource, lodLevel);\n            }\n            else {\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, lodLevel);\n            }\n        }\n        else {\n            // Default behavior (WebGL)\n            const gl = this._context;\n            const attachment = gl[\"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\n            const target = faceIndexOrLayer !== undefined ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndexOrLayer : gl.TEXTURE_2D;\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, texture._hardwareTexture.underlyingResource, lodLevel);\n        }\n        this._engine._bindUnboundFramebuffer(currentFB);\n    }\n    /**\n     * Set a texture in the textures array\n     * @param texture the texture to set\n     * @param index the index in the textures array to set\n     * @param disposePrevious If this function should dispose the previous texture\n     */\n    setTexture(texture, index = 0, disposePrevious = true) {\n        super.setTexture(texture, index, disposePrevious);\n        this._bindTextureRenderTarget(texture, index);\n    }\n    /**\n     * Sets the layer and face indices of every render target texture\n     * @param layers The layer of the texture to be set (make negative to not modify)\n     * @param faces The face of the texture to be set (make negative to not modify)\n     */\n    setLayerAndFaceIndices(layers, faces) {\n        var _a, _b;\n        super.setLayerAndFaceIndices(layers, faces);\n        if (!this.textures || !this.layerIndices || !this.faceIndices) {\n            return;\n        }\n        // the length of this._attachments is the right one as it does not count the depth texture, in case we generated it\n        const textureCount = (_b = (_a = this._attachments) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : this.textures.length;\n        for (let index = 0; index < textureCount; index++) {\n            const texture = this.textures[index];\n            if (!texture) {\n                // The target type was probably -1 at creation time and setTexture has not been called yet for this index\n                continue;\n            }\n            if (texture.is2DArray || texture.is3D) {\n                this._bindTextureRenderTarget(texture, index, this.layerIndices[index]);\n            }\n            else if (texture.isCube) {\n                this._bindTextureRenderTarget(texture, index, this.faceIndices[index]);\n            }\n            else {\n                this._bindTextureRenderTarget(texture, index);\n            }\n        }\n    }\n    /**\n     * Set the face and layer indices of a texture in the textures array\n     * @param index The index of the texture in the textures array to modify\n     * @param layer The layer of the texture to be set\n     * @param face The face of the texture to be set\n     */\n    setLayerAndFaceIndex(index = 0, layer, face) {\n        super.setLayerAndFaceIndex(index, layer, face);\n        if (!this.textures || !this.layerIndices || !this.faceIndices) {\n            return;\n        }\n        const texture = this.textures[index];\n        if (texture.is2DArray || texture.is3D) {\n            this._bindTextureRenderTarget(this.textures[index], index, this.layerIndices[index]);\n        }\n        else if (texture.isCube) {\n            this._bindTextureRenderTarget(this.textures[index], index, this.faceIndices[index]);\n        }\n    }\n    dispose(disposeOnlyFramebuffers = false) {\n        const gl = this._context;\n        if (!disposeOnlyFramebuffers) {\n            if (this._colorTextureArray) {\n                this._context.deleteTexture(this._colorTextureArray);\n                this._colorTextureArray = null;\n            }\n            if (this._depthStencilTextureArray) {\n                this._context.deleteTexture(this._depthStencilTextureArray);\n                this._depthStencilTextureArray = null;\n            }\n        }\n        if (this._framebuffer) {\n            gl.deleteFramebuffer(this._framebuffer);\n            this._framebuffer = null;\n        }\n        if (this._depthStencilBuffer) {\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\n            this._depthStencilBuffer = null;\n        }\n        if (this._MSAAFramebuffer) {\n            gl.deleteFramebuffer(this._MSAAFramebuffer);\n            this._MSAAFramebuffer = null;\n        }\n        super.dispose(disposeOnlyFramebuffers);\n    }\n}\n//# sourceMappingURL=webGLRenderTargetWrapper.js.map","import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ThinEngine } from \"../thinEngine.js\";\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper.js\";\n\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti, isCube, size) {\n    const rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\n    this._renderTargetWrapperCache.push(rtWrapper);\n    return rtWrapper;\n};\nThinEngine.prototype.createRenderTargetTexture = function (size, options) {\n    var _a, _b;\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size);\n    let generateDepthBuffer = true;\n    let generateStencilBuffer = false;\n    let noColorAttachment = false;\n    let colorAttachment = undefined;\n    let samples = 1;\n    if (options !== undefined && typeof options === \"object\") {\n        generateDepthBuffer = (_a = options.generateDepthBuffer) !== null && _a !== void 0 ? _a : true;\n        generateStencilBuffer = !!options.generateStencilBuffer;\n        noColorAttachment = !!options.noColorAttachment;\n        colorAttachment = options.colorAttachment;\n        samples = (_b = options.samples) !== null && _b !== void 0 ? _b : 1;\n    }\n    const texture = colorAttachment || (noColorAttachment ? null : this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget));\n    const width = size.width || size;\n    const height = size.height || size;\n    const currentFrameBuffer = this._currentFramebuffer;\n    const gl = this._gl;\n    // Create the framebuffer\n    const framebuffer = gl.createFramebuffer();\n    this._bindUnboundFramebuffer(framebuffer);\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\n    // No need to rebind on every frame\n    if (texture && !texture.is2DArray) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, 0);\n    }\n    this._bindUnboundFramebuffer(currentFrameBuffer);\n    rtWrapper._framebuffer = framebuffer;\n    rtWrapper._generateDepthBuffer = generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = generateStencilBuffer;\n    rtWrapper.setTextures(texture);\n    this.updateRenderTargetTextureSampleCount(rtWrapper, samples);\n    return rtWrapper;\n};\nThinEngine.prototype.createDepthStencilTexture = function (size, options, rtWrapper) {\n    if (options.isCube) {\n        const width = size.width || size;\n        return this._createDepthStencilCubeTexture(width, options, rtWrapper);\n    }\n    else {\n        return this._createDepthStencilTexture(size, options, rtWrapper);\n    }\n};\nThinEngine.prototype._createDepthStencilTexture = function (size, options, rtWrapper) {\n    const gl = this._gl;\n    const layers = size.layers || 0;\n    const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n    if (!this._caps.depthTextureExtension) {\n        Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\n        return internalTexture;\n    }\n    const internalOptions = {\n        bilinearFiltering: false,\n        comparisonFunction: 0,\n        generateStencil: false,\n        ...options,\n    };\n    this._bindTextureDirectly(target, internalTexture, true);\n    this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering, internalOptions.comparisonFunction, internalOptions.samples);\n    if (internalOptions.depthTextureFormat !== undefined) {\n        if (internalOptions.depthTextureFormat !== 15 &&\n            internalOptions.depthTextureFormat !== 16 &&\n            internalOptions.depthTextureFormat !== 17 &&\n            internalOptions.depthTextureFormat !== 13 &&\n            internalOptions.depthTextureFormat !== 14 &&\n            internalOptions.depthTextureFormat !== 18) {\n            Logger.Error(\"Depth texture format is not supported.\");\n            return internalTexture;\n        }\n        internalTexture.format = internalOptions.depthTextureFormat;\n    }\n    else {\n        internalTexture.format = internalOptions.generateStencil ? 13 : 16;\n    }\n    const hasStencil = internalTexture.format === 17 ||\n        internalTexture.format === 13 ||\n        internalTexture.format === 18;\n    rtWrapper._depthStencilTexture = internalTexture;\n    rtWrapper._depthStencilTextureWithStencil = hasStencil;\n    let type = gl.UNSIGNED_INT;\n    if (internalTexture.format === 15) {\n        type = gl.UNSIGNED_SHORT;\n    }\n    else if (internalTexture.format === 17 || internalTexture.format === 13) {\n        type = gl.UNSIGNED_INT_24_8;\n    }\n    else if (internalTexture.format === 14) {\n        type = gl.FLOAT;\n    }\n    else if (internalTexture.format === 18) {\n        type = gl.FLOAT_32_UNSIGNED_INT_24_8_REV;\n    }\n    const format = hasStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\n    let internalFormat = format;\n    if (this.webGLVersion > 1) {\n        if (internalTexture.format === 15) {\n            internalFormat = gl.DEPTH_COMPONENT16;\n        }\n        else if (internalTexture.format === 16) {\n            internalFormat = gl.DEPTH_COMPONENT24;\n        }\n        else if (internalTexture.format === 17 || internalTexture.format === 13) {\n            internalFormat = gl.DEPTH24_STENCIL8;\n        }\n        else if (internalTexture.format === 14) {\n            internalFormat = gl.DEPTH_COMPONENT32F;\n        }\n        else if (internalTexture.format === 18) {\n            internalFormat = gl.DEPTH32F_STENCIL8;\n        }\n    }\n    if (internalTexture.is2DArray) {\n        gl.texImage3D(target, 0, internalFormat, internalTexture.width, internalTexture.height, layers, 0, format, type, null);\n    }\n    else {\n        gl.texImage2D(target, 0, internalFormat, internalTexture.width, internalTexture.height, 0, format, type, null);\n    }\n    this._bindTextureDirectly(target, null);\n    this._internalTexturesCache.push(internalTexture);\n    // Dispose previous depth/stencil render buffers and clear the corresponding attachment.\n    // Next time this framebuffer is bound, the new depth/stencil texture will be attached.\n    const glRtWrapper = rtWrapper;\n    if (glRtWrapper._depthStencilBuffer) {\n        const currentFrameBuffer = this._currentFramebuffer;\n        this._bindUnboundFramebuffer(glRtWrapper._framebuffer);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);\n        this._bindUnboundFramebuffer(currentFrameBuffer);\n        gl.deleteRenderbuffer(glRtWrapper._depthStencilBuffer);\n        glRtWrapper._depthStencilBuffer = null;\n    }\n    return internalTexture;\n};\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n    if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\n        return 1;\n    }\n    if (rtWrapper.samples === samples) {\n        return samples;\n    }\n    const gl = this._gl;\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\n    // Dispose previous render buffers\n    if (rtWrapper._depthStencilBuffer) {\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\n        rtWrapper._depthStencilBuffer = null;\n    }\n    if (rtWrapper._MSAAFramebuffer) {\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\n        rtWrapper._MSAAFramebuffer = null;\n    }\n    const hardwareTexture = rtWrapper.texture._hardwareTexture;\n    hardwareTexture.releaseMSAARenderBuffers();\n    if (samples > 1 && typeof gl.renderbufferStorageMultisample === \"function\") {\n        const framebuffer = gl.createFramebuffer();\n        if (!framebuffer) {\n            throw new Error(\"Unable to create multi sampled framebuffer\");\n        }\n        rtWrapper._MSAAFramebuffer = framebuffer;\n        this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\n        const colorRenderbuffer = this._createRenderBuffer(rtWrapper.texture.width, rtWrapper.texture.height, samples, -1 /* not used */, this._getRGBAMultiSampleBufferFormat(rtWrapper.texture.type), gl.COLOR_ATTACHMENT0, false);\n        if (!colorRenderbuffer) {\n            throw new Error(\"Unable to create multi sampled framebuffer\");\n        }\n        hardwareTexture.addMSAARenderBuffer(colorRenderbuffer);\n    }\n    else {\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n    }\n    rtWrapper.texture.samples = samples;\n    rtWrapper._samples = samples;\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, rtWrapper.texture.width, rtWrapper.texture.height, samples);\n    this._bindUnboundFramebuffer(null);\n    return samples;\n};\n//# sourceMappingURL=engine.renderTarget.js.map","import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n\nimport { ThinEngine } from \"../thinEngine.js\";\nThinEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\n    const fullOptions = {\n        generateMipMaps: true,\n        generateDepthBuffer: true,\n        generateStencilBuffer: false,\n        type: 0,\n        samplingMode: 3,\n        format: 5,\n        ...options,\n    };\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n    if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n        fullOptions.samplingMode = 1;\n    }\n    else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n        fullOptions.samplingMode = 1;\n    }\n    const gl = this._gl;\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n    const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\n    if (fullOptions.type === 1 && !this._caps.textureFloat) {\n        fullOptions.type = 0;\n        Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\n    }\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    for (let face = 0; face < 6; face++) {\n        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format), size, size, 0, this._getInternalFormat(fullOptions.format), this._getWebGLTextureType(fullOptions.type), null);\n    }\n    // Create the framebuffer\n    const framebuffer = gl.createFramebuffer();\n    this._bindUnboundFramebuffer(framebuffer);\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\n    // MipMaps\n    if (fullOptions.generateMipMaps) {\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n    }\n    // Unbind\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n    this._bindUnboundFramebuffer(null);\n    rtWrapper._framebuffer = framebuffer;\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\n    texture.width = size;\n    texture.height = size;\n    texture.isReady = true;\n    texture.isCube = true;\n    texture.samples = 1;\n    texture.generateMipMaps = fullOptions.generateMipMaps;\n    texture.samplingMode = fullOptions.samplingMode;\n    texture.type = fullOptions.type;\n    texture.format = fullOptions.format;\n    this._internalTexturesCache.push(texture);\n    rtWrapper.setTextures(texture);\n    return rtWrapper;\n};\n//# sourceMappingURL=engine.renderTargetCube.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"postprocessVertexShader\";\nconst shader = `attribute vec2 position;\runiform vec2 scale;\rvarying vec2 vUV;\rconst vec2 madd=vec2(0.5,0.5);\r#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\nvUV=(position*madd+madd)*scale;\rgl_Position=vec4(position,0.0,1.0);\r#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const postprocessVertexShader = { name, shader };\n//# sourceMappingURL=postprocess.vertex.js.map","import { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\n\nimport { Observable } from \"../Misc/observable.js\";\nimport { Effect } from \"./effect.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\n// Prevents ES6 Crash if not imported.\nimport \"../Shaders/postprocess.vertex.js\";\n// Fullscreen quad buffers by default.\nconst defaultOptions = {\n    positions: [1, 1, -1, 1, -1, -1, 1, -1],\n    indices: [0, 1, 2, 0, 2, 3],\n};\n/**\n * Helper class to render one or more effects.\n * You can access the previous rendering in your shader by declaring a sampler named textureSampler\n */\nexport class EffectRenderer {\n    /**\n     * Creates an effect renderer\n     * @param engine the engine to use for rendering\n     * @param options defines the options of the effect renderer\n     */\n    constructor(engine, options = defaultOptions) {\n        var _a, _b;\n        this._fullscreenViewport = new Viewport(0, 0, 1, 1);\n        const positions = (_a = options.positions) !== null && _a !== void 0 ? _a : defaultOptions.positions;\n        const indices = (_b = options.indices) !== null && _b !== void 0 ? _b : defaultOptions.indices;\n        this.engine = engine;\n        this._vertexBuffers = {\n            [VertexBuffer.PositionKind]: new VertexBuffer(engine, positions, VertexBuffer.PositionKind, false, false, 2),\n        };\n        this._indexBuffer = engine.createIndexBuffer(indices);\n        this._onContextRestoredObserver = engine.onContextRestoredObservable.add(() => {\n            this._indexBuffer = engine.createIndexBuffer(indices);\n            for (const key in this._vertexBuffers) {\n                const vertexBuffer = this._vertexBuffers[key];\n                vertexBuffer._rebuild();\n            }\n        });\n    }\n    /**\n     * Sets the current viewport in normalized coordinates 0-1\n     * @param viewport Defines the viewport to set (defaults to 0 0 1 1)\n     */\n    setViewport(viewport = this._fullscreenViewport) {\n        this.engine.setViewport(viewport);\n    }\n    /**\n     * Binds the embedded attributes buffer to the effect.\n     * @param effect Defines the effect to bind the attributes for\n     */\n    bindBuffers(effect) {\n        this.engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n    }\n    /**\n     * Sets the current effect wrapper to use during draw.\n     * The effect needs to be ready before calling this api.\n     * This also sets the default full screen position attribute.\n     * @param effectWrapper Defines the effect to draw with\n     */\n    applyEffectWrapper(effectWrapper) {\n        this.engine.setState(true);\n        this.engine.depthCullingState.depthTest = false;\n        this.engine.stencilState.stencilTest = false;\n        this.engine.enableEffect(effectWrapper._drawWrapper);\n        this.bindBuffers(effectWrapper.effect);\n        effectWrapper.onApplyObservable.notifyObservers({});\n    }\n    /**\n     * Restores engine states\n     */\n    restoreStates() {\n        this.engine.depthCullingState.depthTest = true;\n        this.engine.stencilState.stencilTest = true;\n    }\n    /**\n     * Draws a full screen quad.\n     */\n    draw() {\n        this.engine.drawElementsType(0, 0, 6);\n    }\n    _isRenderTargetTexture(texture) {\n        return texture.renderTarget !== undefined;\n    }\n    /**\n     * renders one or more effects to a specified texture\n     * @param effectWrapper the effect to renderer\n     * @param outputTexture texture to draw to, if null it will render to the screen.\n     */\n    render(effectWrapper, outputTexture = null) {\n        // Ensure effect is ready\n        if (!effectWrapper.effect.isReady()) {\n            return;\n        }\n        // Reset state\n        this.setViewport();\n        const out = outputTexture === null ? null : this._isRenderTargetTexture(outputTexture) ? outputTexture.renderTarget : outputTexture;\n        if (out) {\n            this.engine.bindFramebuffer(out);\n        }\n        this.applyEffectWrapper(effectWrapper);\n        this.draw();\n        if (out) {\n            this.engine.unBindFramebuffer(out);\n        }\n        this.restoreStates();\n    }\n    /**\n     * Disposes of the effect renderer\n     */\n    dispose() {\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            delete this._vertexBuffers[VertexBuffer.PositionKind];\n        }\n        if (this._indexBuffer) {\n            this.engine._releaseBuffer(this._indexBuffer);\n        }\n        if (this._onContextRestoredObserver) {\n            this.engine.onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n    }\n}\n/**\n * Wraps an effect to be used for rendering\n */\nexport class EffectWrapper {\n    /**\n     * The underlying effect\n     */\n    get effect() {\n        return this._drawWrapper.effect;\n    }\n    set effect(effect) {\n        this._drawWrapper.effect = effect;\n    }\n    /**\n     * Creates an effect to be renderer\n     * @param creationOptions options to create the effect\n     */\n    constructor(creationOptions) {\n        /**\n         * Event that is fired right before the effect is drawn (should be used to update uniforms)\n         */\n        this.onApplyObservable = new Observable();\n        let effectCreationOptions;\n        const uniformNames = creationOptions.uniformNames || [];\n        if (creationOptions.vertexShader) {\n            effectCreationOptions = {\n                fragmentSource: creationOptions.fragmentShader,\n                vertexSource: creationOptions.vertexShader,\n                spectorName: creationOptions.name || \"effectWrapper\",\n            };\n        }\n        else {\n            // Default scale to use in post process vertex shader.\n            uniformNames.push(\"scale\");\n            effectCreationOptions = {\n                fragmentSource: creationOptions.fragmentShader,\n                vertex: \"postprocess\",\n                spectorName: creationOptions.name || \"effectWrapper\",\n            };\n            // Sets the default scale to identity for the post process vertex shader.\n            this.onApplyObservable.add(() => {\n                this.effect.setFloat2(\"scale\", 1, 1);\n            });\n        }\n        const defines = creationOptions.defines ? creationOptions.defines.join(\"\\n\") : \"\";\n        this._drawWrapper = new DrawWrapper(creationOptions.engine);\n        if (creationOptions.useShaderStore) {\n            effectCreationOptions.fragment = effectCreationOptions.fragmentSource;\n            if (!effectCreationOptions.vertex) {\n                effectCreationOptions.vertex = effectCreationOptions.vertexSource;\n            }\n            delete effectCreationOptions.fragmentSource;\n            delete effectCreationOptions.vertexSource;\n            this.effect = creationOptions.engine.createEffect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, defines, undefined, creationOptions.onCompiled, undefined, undefined, creationOptions.shaderLanguage);\n        }\n        else {\n            this.effect = new Effect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, creationOptions.engine, defines, undefined, creationOptions.onCompiled, undefined, undefined, undefined, creationOptions.shaderLanguage);\n            this._onContextRestoredObserver = creationOptions.engine.onContextRestoredObservable.add(() => {\n                this.effect._pipelineContext = null; // because _prepareEffect will try to dispose this pipeline before recreating it and that would lead to webgl errors\n                this.effect._wasPreviouslyReady = false;\n                this.effect._prepareEffect();\n            });\n        }\n    }\n    /**\n     * Disposes of the effect wrapper\n     */\n    dispose() {\n        if (this._onContextRestoredObserver) {\n            this.effect.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n        this.effect.dispose();\n    }\n}\n//# sourceMappingURL=effectRenderer.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"passPixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) \r{\rgl_FragColor=texture2D(textureSampler,vUV);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const passPixelShader = { name, shader };\n//# sourceMappingURL=pass.fragment.js.map","import { ThinEngine } from \"../Engines/thinEngine.js\";\n\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer.js\";\nimport { Tools } from \"./tools.js\";\nimport { passPixelShader } from \"../Shaders/pass.fragment.js\";\n/**\n * Class containing a set of static utilities functions to dump data from a canvas\n */\nexport class DumpTools {\n    static _CreateDumpRenderer() {\n        if (!DumpTools._DumpToolsEngine) {\n            const canvas = document.createElement(\"canvas\");\n            const engine = new ThinEngine(canvas, false, {\n                preserveDrawingBuffer: true,\n                depth: false,\n                stencil: false,\n                alpha: true,\n                premultipliedAlpha: false,\n                antialias: false,\n                failIfMajorPerformanceCaveat: false,\n            });\n            engine.getCaps().parallelShaderCompile = undefined;\n            const renderer = new EffectRenderer(engine);\n            const wrapper = new EffectWrapper({\n                engine,\n                name: passPixelShader.name,\n                fragmentShader: passPixelShader.shader,\n                samplerNames: [\"textureSampler\"],\n            });\n            DumpTools._DumpToolsEngine = {\n                canvas,\n                engine,\n                renderer,\n                wrapper,\n            };\n        }\n        return DumpTools._DumpToolsEngine;\n    }\n    /**\n     * Dumps the current bound framebuffer\n     * @param width defines the rendering width\n     * @param height defines the rendering height\n     * @param engine defines the hosting engine\n     * @param successCallback defines the callback triggered once the data are available\n     * @param mimeType defines the mime type of the result\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n     * @returns a void promise\n     */\n    static async DumpFramebuffer(width, height, engine, successCallback, mimeType = \"image/png\", fileName) {\n        // Read the contents of the framebuffer\n        const bufferView = await engine.readPixels(0, 0, width, height);\n        const data = new Uint8Array(bufferView.buffer);\n        DumpTools.DumpData(width, height, data, successCallback, mimeType, fileName, true);\n    }\n    /**\n     * Dumps an array buffer\n     * @param width defines the rendering width\n     * @param height defines the rendering height\n     * @param data the data array\n     * @param mimeType defines the mime type of the result\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n     * @param invertY true to invert the picture in the Y dimension\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n     * @param quality defines the quality of the result\n     * @returns a promise that resolve to the final data\n     */\n    static DumpDataAsync(width, height, data, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n        return new Promise((resolve) => {\n            DumpTools.DumpData(width, height, data, (result) => resolve(result), mimeType, fileName, invertY, toArrayBuffer, quality);\n        });\n    }\n    /**\n     * Dumps an array buffer\n     * @param width defines the rendering width\n     * @param height defines the rendering height\n     * @param data the data array\n     * @param successCallback defines the callback triggered once the data are available\n     * @param mimeType defines the mime type of the result\n     * @param fileName defines the filename to download. If present, the result will automatically be downloaded\n     * @param invertY true to invert the picture in the Y dimension\n     * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\n     * @param quality defines the quality of the result\n     */\n    static DumpData(width, height, data, successCallback, mimeType = \"image/png\", fileName, invertY = false, toArrayBuffer = false, quality) {\n        const renderer = DumpTools._CreateDumpRenderer();\n        renderer.engine.setSize(width, height, true);\n        // Convert if data are float32\n        if (data instanceof Float32Array) {\n            const data2 = new Uint8Array(data.length);\n            let n = data.length;\n            while (n--) {\n                const v = data[n];\n                data2[n] = v < 0 ? 0 : v > 1 ? 1 : Math.round(v * 255);\n            }\n            data = data2;\n        }\n        // Create the image\n        const texture = renderer.engine.createRawTexture(data, width, height, 5, false, !invertY, 1);\n        renderer.renderer.setViewport();\n        renderer.renderer.applyEffectWrapper(renderer.wrapper);\n        renderer.wrapper.effect._bindTexture(\"textureSampler\", texture);\n        renderer.renderer.draw();\n        if (toArrayBuffer) {\n            Tools.ToBlob(renderer.canvas, (blob) => {\n                const fileReader = new FileReader();\n                fileReader.onload = (event) => {\n                    const arrayBuffer = event.target.result;\n                    if (successCallback) {\n                        successCallback(arrayBuffer);\n                    }\n                };\n                fileReader.readAsArrayBuffer(blob);\n            }, mimeType, quality);\n        }\n        else {\n            Tools.EncodeScreenshotCanvasData(renderer.canvas, successCallback, mimeType, fileName, quality);\n        }\n        texture.dispose();\n    }\n    /**\n     * Dispose the dump tools associated resources\n     */\n    static Dispose() {\n        if (DumpTools._DumpToolsEngine) {\n            DumpTools._DumpToolsEngine.wrapper.dispose();\n            DumpTools._DumpToolsEngine.renderer.dispose();\n            DumpTools._DumpToolsEngine.engine.dispose();\n        }\n        DumpTools._DumpToolsEngine = null;\n    }\n}\n/**\n * This will be executed automatically for UMD and es5.\n * If esm dev wants the side effects to execute they will have to run it manually\n * Once we build native modules those need to be exported.\n * @internal\n */\nconst initSideEffects = () => {\n    // References the dependencies.\n    Tools.DumpData = DumpTools.DumpData;\n    Tools.DumpDataAsync = DumpTools.DumpDataAsync;\n    Tools.DumpFramebuffer = DumpTools.DumpFramebuffer;\n};\ninitSideEffects();\n//# sourceMappingURL=dumpTools.js.map","import { Observable } from \"../../Misc/observable.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { PostProcessManager } from \"../../PostProcesses/postProcessManager.js\";\nimport { RenderingManager } from \"../../Rendering/renderingManager.js\";\n\nimport \"../../Engines/Extensions/engine.renderTarget.js\";\nimport \"../../Engines/Extensions/engine.renderTargetCube.js\";\nimport { Engine } from \"../../Engines/engine.js\";\nimport { _ObserveArray } from \"../../Misc/arrayTools.js\";\nimport { DumpTools } from \"../../Misc/dumpTools.js\";\n/**\n * This Helps creating a texture that will be created from a camera in your scene.\n * It is basically a dynamic texture that could be used to create special effects for instance.\n * Actually, It is the base of lot of effects in the framework like post process, shadows, effect layers and rendering pipelines...\n */\nexport class RenderTargetTexture extends Texture {\n    /**\n     * Use this list to define the list of mesh you want to render.\n     */\n    get renderList() {\n        return this._renderList;\n    }\n    set renderList(value) {\n        if (this._unObserveRenderList) {\n            this._unObserveRenderList();\n            this._unObserveRenderList = null;\n        }\n        if (value) {\n            this._unObserveRenderList = _ObserveArray(value, this._renderListHasChanged);\n        }\n        this._renderList = value;\n    }\n    /**\n     * Post-processes for this render target\n     */\n    get postProcesses() {\n        return this._postProcesses;\n    }\n    get _prePassEnabled() {\n        return !!this._prePassRenderTarget && this._prePassRenderTarget.enabled;\n    }\n    /**\n     * Set a after unbind callback in the texture.\n     * This has been kept for backward compatibility and use of onAfterUnbindObservable is recommended.\n     */\n    set onAfterUnbind(callback) {\n        if (this._onAfterUnbindObserver) {\n            this.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);\n        }\n        this._onAfterUnbindObserver = this.onAfterUnbindObservable.add(callback);\n    }\n    /**\n     * Set a before render callback in the texture.\n     * This has been kept for backward compatibility and use of onBeforeRenderObservable is recommended.\n     */\n    set onBeforeRender(callback) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    }\n    /**\n     * Set a after render callback in the texture.\n     * This has been kept for backward compatibility and use of onAfterRenderObservable is recommended.\n     */\n    set onAfterRender(callback) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    }\n    /**\n     * Set a clear callback in the texture.\n     * This has been kept for backward compatibility and use of onClearObservable is recommended.\n     */\n    set onClear(callback) {\n        if (this._onClearObserver) {\n            this.onClearObservable.remove(this._onClearObserver);\n        }\n        this._onClearObserver = this.onClearObservable.add(callback);\n    }\n    /**\n     * Gets the render pass ids used by the render target texture. For a single render target the array length will be 1, for a cube texture it will be 6 and for\n     * a 2D texture array it will return an array of ids the size of the 2D texture array\n     */\n    get renderPassIds() {\n        return this._renderPassIds;\n    }\n    /**\n     * Gets the current value of the refreshId counter\n     */\n    get currentRefreshId() {\n        return this._currentRefreshId;\n    }\n    /**\n     * Sets a specific material to be used to render a mesh/a list of meshes in this render target texture\n     * @param mesh mesh or array of meshes\n     * @param material material or array of materials to use for this render pass. If undefined is passed, no specific material will be used but the regular material instead (mesh.material). It's possible to provide an array of materials to use a different material for each rendering in the case of a cube texture (6 rendering) and a 2D texture array (as many rendering as the length of the array)\n     */\n    setMaterialForRendering(mesh, material) {\n        let meshes;\n        if (!Array.isArray(mesh)) {\n            meshes = [mesh];\n        }\n        else {\n            meshes = mesh;\n        }\n        for (let j = 0; j < meshes.length; ++j) {\n            for (let i = 0; i < this._renderPassIds.length; ++i) {\n                meshes[j].setMaterialForRenderPass(this._renderPassIds[i], material !== undefined ? (Array.isArray(material) ? material[i] : material) : undefined);\n            }\n        }\n    }\n    /**\n     * Define if the texture has multiple draw buffers or if false a single draw buffer.\n     */\n    get isMulti() {\n        var _a, _b;\n        return (_b = (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.isMulti) !== null && _b !== void 0 ? _b : false;\n    }\n    /**\n     * Gets render target creation options that were used.\n     */\n    get renderTargetOptions() {\n        return this._renderTargetOptions;\n    }\n    /**\n     * Gets the render target wrapper associated with this render target\n     */\n    get renderTarget() {\n        return this._renderTarget;\n    }\n    _onRatioRescale() {\n        if (this._sizeRatio) {\n            this.resize(this._initialSizeParameter);\n        }\n    }\n    /**\n     * Gets or sets the size of the bounding box associated with the texture (when in cube mode)\n     * When defined, the cubemap will switch to local mode\n     * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\n     * @example https://www.babylonjs-playground.com/#RNASML\n     */\n    set boundingBoxSize(value) {\n        if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\n            return;\n        }\n        this._boundingBoxSize = value;\n        const scene = this.getScene();\n        if (scene) {\n            scene.markAllMaterialsAsDirty(1);\n        }\n    }\n    get boundingBoxSize() {\n        return this._boundingBoxSize;\n    }\n    /**\n     * In case the RTT has been created with a depth texture, get the associated\n     * depth texture.\n     * Otherwise, return null.\n     */\n    get depthStencilTexture() {\n        var _a, _b;\n        return (_b = (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a._depthStencilTexture) !== null && _b !== void 0 ? _b : null;\n    }\n    /** @internal */\n    constructor(name, size, scene, generateMipMaps = false, doNotChangeAspectRatio = true, type = 0, isCube = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, generateDepthBuffer = true, generateStencilBuffer = false, isMulti = false, format = 5, delayAllocation = false, samples, creationFlags, noColorAttachment = false, useSRGBBuffer = false) {\n        var _a, _b, _c, _d, _e, _f;\n        let colorAttachment = undefined;\n        if (typeof generateMipMaps === \"object\") {\n            const options = generateMipMaps;\n            generateMipMaps = !!options.generateMipMaps;\n            doNotChangeAspectRatio = (_a = options.doNotChangeAspectRatio) !== null && _a !== void 0 ? _a : true;\n            type = (_b = options.type) !== null && _b !== void 0 ? _b : 0;\n            isCube = !!options.isCube;\n            samplingMode = (_c = options.samplingMode) !== null && _c !== void 0 ? _c : Texture.TRILINEAR_SAMPLINGMODE;\n            generateDepthBuffer = (_d = options.generateDepthBuffer) !== null && _d !== void 0 ? _d : true;\n            generateStencilBuffer = !!options.generateStencilBuffer;\n            isMulti = !!options.isMulti;\n            format = (_e = options.format) !== null && _e !== void 0 ? _e : 5;\n            delayAllocation = !!options.delayAllocation;\n            samples = options.samples;\n            creationFlags = options.creationFlags;\n            noColorAttachment = !!options.noColorAttachment;\n            useSRGBBuffer = !!options.useSRGBBuffer;\n            colorAttachment = options.colorAttachment;\n        }\n        super(null, scene, !generateMipMaps, undefined, samplingMode, undefined, undefined, undefined, undefined, format);\n        this._unObserveRenderList = null;\n        this._renderListHasChanged = (_functionName, previousLength) => {\n            var _a;\n            const newLength = this._renderList ? this._renderList.length : 0;\n            if ((previousLength === 0 && newLength > 0) || newLength === 0) {\n                (_a = this.getScene()) === null || _a === void 0 ? void 0 : _a.meshes.forEach((mesh) => {\n                    mesh._markSubMeshesAsLightDirty();\n                });\n            }\n        };\n        /**\n         * Define if particles should be rendered in your texture.\n         */\n        this.renderParticles = true;\n        /**\n         * Define if sprites should be rendered in your texture.\n         */\n        this.renderSprites = false;\n        /**\n         * Force checking the layerMask property even if a custom list of meshes is provided (ie. if renderList is not undefined)\n         */\n        this.forceLayerMaskCheck = false;\n        /**\n         * Define if the camera viewport should be respected while rendering the texture or if the render should be done to the entire texture.\n         */\n        this.ignoreCameraViewport = false;\n        /**\n         * An event triggered when the texture is unbind.\n         */\n        this.onBeforeBindObservable = new Observable();\n        /**\n         * An event triggered when the texture is unbind.\n         */\n        this.onAfterUnbindObservable = new Observable();\n        /**\n         * An event triggered before rendering the texture\n         */\n        this.onBeforeRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the texture\n         */\n        this.onAfterRenderObservable = new Observable();\n        /**\n         * An event triggered after the texture clear\n         */\n        this.onClearObservable = new Observable();\n        /**\n         * An event triggered when the texture is resized.\n         */\n        this.onResizeObservable = new Observable();\n        /** @internal */\n        this._cleared = false;\n        /**\n         * Skip the initial clear of the rtt at the beginning of the frame render loop\n         */\n        this.skipInitialClear = false;\n        this._currentRefreshId = -1;\n        this._refreshRate = 1;\n        this._samples = 1;\n        this._canRescale = true;\n        this._renderTarget = null;\n        /**\n         * Gets or sets the center of the bounding box associated with the texture (when in cube mode)\n         * It must define where the camera used to render the texture is set\n         */\n        this.boundingBoxPosition = Vector3.Zero();\n        scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const engine = this.getScene().getEngine();\n        this._coordinatesMode = Texture.PROJECTION_MODE;\n        this.renderList = new Array();\n        this.name = name;\n        this.isRenderTarget = true;\n        this._initialSizeParameter = size;\n        this._renderPassIds = [];\n        this._isCubeData = isCube;\n        this._processSizeParameter(size);\n        this.renderPassId = this._renderPassIds[0];\n        this._resizeObserver = engine.onResizeObservable.add(() => { });\n        this._generateMipMaps = generateMipMaps ? true : false;\n        this._doNotChangeAspectRatio = doNotChangeAspectRatio;\n        // Rendering groups\n        this._renderingManager = new RenderingManager(scene);\n        this._renderingManager._useSceneAutoClearSetup = true;\n        if (isMulti) {\n            return;\n        }\n        this._renderTargetOptions = {\n            generateMipMaps: generateMipMaps,\n            type: type,\n            format: (_f = this._format) !== null && _f !== void 0 ? _f : undefined,\n            samplingMode: this.samplingMode,\n            generateDepthBuffer: generateDepthBuffer,\n            generateStencilBuffer: generateStencilBuffer,\n            samples,\n            creationFlags,\n            noColorAttachment: noColorAttachment,\n            useSRGBBuffer,\n            colorAttachment: colorAttachment,\n            label: this.name,\n        };\n        if (this.samplingMode === Texture.NEAREST_SAMPLINGMODE) {\n            this.wrapU = Texture.CLAMP_ADDRESSMODE;\n            this.wrapV = Texture.CLAMP_ADDRESSMODE;\n        }\n        if (!delayAllocation) {\n            if (isCube) {\n                this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(this.getRenderSize(), this._renderTargetOptions);\n                this.coordinatesMode = Texture.INVCUBIC_MODE;\n                this._textureMatrix = Matrix.Identity();\n            }\n            else {\n                this._renderTarget = scene.getEngine().createRenderTargetTexture(this._size, this._renderTargetOptions);\n            }\n            this._texture = this._renderTarget.texture;\n            if (samples !== undefined) {\n                this.samples = samples;\n            }\n        }\n    }\n    /**\n     * Creates a depth stencil texture.\n     * This is only available in WebGL 2 or with the depth texture extension available.\n     * @param comparisonFunction Specifies the comparison function to set on the texture. If 0 or undefined, the texture is not in comparison mode (default: 0)\n     * @param bilinearFiltering Specifies whether or not bilinear filtering is enable on the texture (default: true)\n     * @param generateStencil Specifies whether or not a stencil should be allocated in the texture (default: false)\n     * @param samples sample count of the depth/stencil texture (default: 1)\n     * @param format format of the depth texture (default: 14)\n     */\n    createDepthStencilTexture(comparisonFunction = 0, bilinearFiltering = true, generateStencil = false, samples = 1, format = 14) {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.createDepthStencilTexture(comparisonFunction, bilinearFiltering, generateStencil, samples, format);\n    }\n    _releaseRenderPassId() {\n        if (this._scene) {\n            const engine = this._scene.getEngine();\n            for (let i = 0; i < this._renderPassIds.length; ++i) {\n                engine.releaseRenderPassId(this._renderPassIds[i]);\n            }\n        }\n        this._renderPassIds = [];\n    }\n    _createRenderPassId() {\n        this._releaseRenderPassId();\n        const engine = this._scene.getEngine(); // scene can't be null in a RenderTargetTexture, see constructor\n        const numPasses = this._isCubeData ? 6 : this.getRenderLayers() || 1;\n        for (let i = 0; i < numPasses; ++i) {\n            this._renderPassIds[i] = engine.createRenderPassId(`RenderTargetTexture - ${this.name}#${i}`);\n        }\n    }\n    _processSizeParameter(size) {\n        if (size.ratio) {\n            this._sizeRatio = size.ratio;\n            const engine = this._getEngine();\n            this._size = {\n                width: this._bestReflectionRenderTargetDimension(engine.getRenderWidth(), this._sizeRatio),\n                height: this._bestReflectionRenderTargetDimension(engine.getRenderHeight(), this._sizeRatio),\n            };\n        }\n        else {\n            this._size = size;\n        }\n        this._createRenderPassId();\n    }\n    /**\n     * Define the number of samples to use in case of MSAA.\n     * It defaults to one meaning no MSAA has been enabled.\n     */\n    get samples() {\n        var _a, _b;\n        return (_b = (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.samples) !== null && _b !== void 0 ? _b : this._samples;\n    }\n    set samples(value) {\n        if (this._renderTarget) {\n            this._samples = this._renderTarget.setSamples(value);\n        }\n    }\n    /**\n     * Resets the refresh counter of the texture and start bak from scratch.\n     * Could be useful to regenerate the texture if it is setup to render only once.\n     */\n    resetRefreshCounter() {\n        this._currentRefreshId = -1;\n    }\n    /**\n     * Define the refresh rate of the texture or the rendering frequency.\n     * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...\n     */\n    get refreshRate() {\n        return this._refreshRate;\n    }\n    set refreshRate(value) {\n        this._refreshRate = value;\n        this.resetRefreshCounter();\n    }\n    /**\n     * Adds a post process to the render target rendering passes.\n     * @param postProcess define the post process to add\n     */\n    addPostProcess(postProcess) {\n        if (!this._postProcessManager) {\n            const scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            this._postProcessManager = new PostProcessManager(scene);\n            this._postProcesses = new Array();\n        }\n        this._postProcesses.push(postProcess);\n        this._postProcesses[0].autoClear = false;\n    }\n    /**\n     * Clear all the post processes attached to the render target\n     * @param dispose define if the cleared post processes should also be disposed (false by default)\n     */\n    clearPostProcesses(dispose = false) {\n        if (!this._postProcesses) {\n            return;\n        }\n        if (dispose) {\n            for (const postProcess of this._postProcesses) {\n                postProcess.dispose();\n            }\n        }\n        this._postProcesses = [];\n    }\n    /**\n     * Remove one of the post process from the list of attached post processes to the texture\n     * @param postProcess define the post process to remove from the list\n     */\n    removePostProcess(postProcess) {\n        if (!this._postProcesses) {\n            return;\n        }\n        const index = this._postProcesses.indexOf(postProcess);\n        if (index === -1) {\n            return;\n        }\n        this._postProcesses.splice(index, 1);\n        if (this._postProcesses.length > 0) {\n            this._postProcesses[0].autoClear = false;\n        }\n    }\n    /** @internal */\n    _shouldRender() {\n        if (this._currentRefreshId === -1) {\n            // At least render once\n            this._currentRefreshId = 1;\n            return true;\n        }\n        if (this.refreshRate === this._currentRefreshId) {\n            this._currentRefreshId = 1;\n            return true;\n        }\n        this._currentRefreshId++;\n        return false;\n    }\n    /**\n     * Gets the actual render size of the texture.\n     * @returns the width of the render size\n     */\n    getRenderSize() {\n        return this.getRenderWidth();\n    }\n    /**\n     * Gets the actual render width of the texture.\n     * @returns the width of the render size\n     */\n    getRenderWidth() {\n        if (this._size.width) {\n            return this._size.width;\n        }\n        return this._size;\n    }\n    /**\n     * Gets the actual render height of the texture.\n     * @returns the height of the render size\n     */\n    getRenderHeight() {\n        if (this._size.width) {\n            return this._size.height;\n        }\n        return this._size;\n    }\n    /**\n     * Gets the actual number of layers of the texture.\n     * @returns the number of layers\n     */\n    getRenderLayers() {\n        const layers = this._size.layers;\n        if (layers) {\n            return layers;\n        }\n        return 0;\n    }\n    /**\n     * Don't allow this render target texture to rescale. Mainly used to prevent rescaling by the scene optimizer.\n     */\n    disableRescaling() {\n        this._canRescale = false;\n    }\n    /**\n     * Get if the texture can be rescaled or not.\n     */\n    get canRescale() {\n        return this._canRescale;\n    }\n    /**\n     * Resize the texture using a ratio.\n     * @param ratio the ratio to apply to the texture size in order to compute the new target size\n     */\n    scale(ratio) {\n        const newSize = Math.max(1, this.getRenderSize() * ratio);\n        this.resize(newSize);\n    }\n    /**\n     * Get the texture reflection matrix used to rotate/transform the reflection.\n     * @returns the reflection matrix\n     */\n    getReflectionTextureMatrix() {\n        if (this.isCube) {\n            return this._textureMatrix;\n        }\n        return super.getReflectionTextureMatrix();\n    }\n    /**\n     * Resize the texture to a new desired size.\n     * Be careful as it will recreate all the data in the new texture.\n     * @param size Define the new size. It can be:\n     *   - a number for squared texture,\n     *   - an object containing { width: number, height: number }\n     *   - or an object containing a ratio { ratio: number }\n     */\n    resize(size) {\n        var _a;\n        const wasCube = this.isCube;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._renderTarget = null;\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._processSizeParameter(size);\n        if (wasCube) {\n            this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(this.getRenderSize(), this._renderTargetOptions);\n        }\n        else {\n            this._renderTarget = scene.getEngine().createRenderTargetTexture(this._size, this._renderTargetOptions);\n        }\n        this._texture = this._renderTarget.texture;\n        if (this._renderTargetOptions.samples !== undefined) {\n            this.samples = this._renderTargetOptions.samples;\n        }\n        if (this.onResizeObservable.hasObservers()) {\n            this.onResizeObservable.notifyObservers(this);\n        }\n    }\n    /**\n     * Renders all the objects from the render list into the texture.\n     * @param useCameraPostProcess Define if camera post processes should be used during the rendering\n     * @param dumpForDebug Define if the rendering result should be dumped (copied) for debugging purpose\n     */\n    render(useCameraPostProcess = false, dumpForDebug = false) {\n        this._render(useCameraPostProcess, dumpForDebug);\n    }\n    /**\n     * This function will check if the render target texture can be rendered (textures are loaded, shaders are compiled)\n     * @returns true if all required resources are ready\n     */\n    isReadyForRendering() {\n        return this._render(false, false, true);\n    }\n    _render(useCameraPostProcess = false, dumpForDebug = false, checkReadiness = false) {\n        var _a;\n        const scene = this.getScene();\n        if (!scene) {\n            return checkReadiness;\n        }\n        const engine = scene.getEngine();\n        if (this.useCameraPostProcesses !== undefined) {\n            useCameraPostProcess = this.useCameraPostProcesses;\n        }\n        if (this._waitingRenderList) {\n            this.renderList = [];\n            for (let index = 0; index < this._waitingRenderList.length; index++) {\n                const id = this._waitingRenderList[index];\n                const mesh = scene.getMeshById(id);\n                if (mesh) {\n                    this.renderList.push(mesh);\n                }\n            }\n            this._waitingRenderList = undefined;\n        }\n        // Is predicate defined?\n        if (this.renderListPredicate) {\n            if (this.renderList) {\n                this.renderList.length = 0; // Clear previous renderList\n            }\n            else {\n                this.renderList = [];\n            }\n            const scene = this.getScene();\n            if (!scene) {\n                return checkReadiness;\n            }\n            const sceneMeshes = scene.meshes;\n            for (let index = 0; index < sceneMeshes.length; index++) {\n                const mesh = sceneMeshes[index];\n                if (this.renderListPredicate(mesh)) {\n                    this.renderList.push(mesh);\n                }\n            }\n        }\n        const currentRenderPassId = engine.currentRenderPassId;\n        this.onBeforeBindObservable.notifyObservers(this);\n        // Set custom projection.\n        // Needs to be before binding to prevent changing the aspect ratio.\n        const camera = (_a = this.activeCamera) !== null && _a !== void 0 ? _a : scene.activeCamera;\n        const sceneCamera = scene.activeCamera;\n        if (camera) {\n            if (camera !== scene.activeCamera) {\n                scene.setTransformMatrix(camera.getViewMatrix(), camera.getProjectionMatrix(true));\n                scene.activeCamera = camera;\n            }\n            engine.setViewport(camera.viewport, this.getRenderWidth(), this.getRenderHeight());\n        }\n        this._defaultRenderListPrepared = false;\n        let returnValue = checkReadiness;\n        if (!checkReadiness) {\n            if (this.is2DArray && !this.isMulti) {\n                for (let layer = 0; layer < this.getRenderLayers(); layer++) {\n                    this._renderToTarget(0, useCameraPostProcess, dumpForDebug, layer, camera);\n                    scene.incrementRenderId();\n                    scene.resetCachedMaterial();\n                }\n            }\n            else if (this.isCube && !this.isMulti) {\n                for (let face = 0; face < 6; face++) {\n                    this._renderToTarget(face, useCameraPostProcess, dumpForDebug, undefined, camera);\n                    scene.incrementRenderId();\n                    scene.resetCachedMaterial();\n                }\n            }\n            else {\n                this._renderToTarget(0, useCameraPostProcess, dumpForDebug, undefined, camera);\n            }\n        }\n        else {\n            if (!scene.getViewMatrix()) {\n                // We probably didn't execute scene.render() yet, so make sure we have a view/projection matrix setup for the scene\n                scene.updateTransformMatrix();\n            }\n            const numLayers = this.is2DArray ? this.getRenderLayers() : this.isCube ? 6 : 1;\n            for (let layer = 0; layer < numLayers && returnValue; layer++) {\n                let currentRenderList = null;\n                const defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;\n                const defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;\n                engine.currentRenderPassId = this._renderPassIds[layer];\n                this.onBeforeRenderObservable.notifyObservers(layer);\n                if (this.getCustomRenderList) {\n                    currentRenderList = this.getCustomRenderList(layer, defaultRenderList, defaultRenderListLength);\n                }\n                if (!currentRenderList) {\n                    currentRenderList = defaultRenderList;\n                }\n                if (!this._doNotChangeAspectRatio) {\n                    scene.updateTransformMatrix(true);\n                }\n                for (let i = 0; i < currentRenderList.length && returnValue; ++i) {\n                    const mesh = currentRenderList[i];\n                    if (!mesh.isEnabled() || mesh.isBlocked || !mesh.isVisible || !mesh.subMeshes) {\n                        continue;\n                    }\n                    if (this.customIsReadyFunction) {\n                        if (!this.customIsReadyFunction(mesh, this.refreshRate, checkReadiness)) {\n                            returnValue = false;\n                            continue;\n                        }\n                    }\n                    else if (!mesh.isReady(true)) {\n                        returnValue = false;\n                        continue;\n                    }\n                }\n                this.onAfterRenderObservable.notifyObservers(layer);\n                if (this.is2DArray || this.isCube) {\n                    scene.incrementRenderId();\n                    scene.resetCachedMaterial();\n                }\n            }\n        }\n        this.onAfterUnbindObservable.notifyObservers(this);\n        engine.currentRenderPassId = currentRenderPassId;\n        if (sceneCamera) {\n            scene.activeCamera = sceneCamera;\n            // Do not avoid setting uniforms when multiple scenes are active as another camera may have overwrite these\n            if (scene.getEngine().scenes.length > 1 || (this.activeCamera && this.activeCamera !== scene.activeCamera)) {\n                scene.setTransformMatrix(scene.activeCamera.getViewMatrix(), scene.activeCamera.getProjectionMatrix(true));\n            }\n            engine.setViewport(scene.activeCamera.viewport);\n        }\n        scene.resetCachedMaterial();\n        return returnValue;\n    }\n    _bestReflectionRenderTargetDimension(renderDimension, scale) {\n        const minimum = 128;\n        const x = renderDimension * scale;\n        const curved = Engine.NearestPOT(x + (minimum * minimum) / (minimum + x));\n        // Ensure we don't exceed the render dimension (while staying POT)\n        return Math.min(Engine.FloorPOT(renderDimension), curved);\n    }\n    _prepareRenderingManager(currentRenderList, currentRenderListLength, camera, checkLayerMask) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._renderingManager.reset();\n        const sceneRenderId = scene.getRenderId();\n        for (let meshIndex = 0; meshIndex < currentRenderListLength; meshIndex++) {\n            const mesh = currentRenderList[meshIndex];\n            if (mesh && !mesh.isBlocked) {\n                if (this.customIsReadyFunction) {\n                    if (!this.customIsReadyFunction(mesh, this.refreshRate, false)) {\n                        this.resetRefreshCounter();\n                        continue;\n                    }\n                }\n                else if (!mesh.isReady(this.refreshRate === 0)) {\n                    this.resetRefreshCounter();\n                    continue;\n                }\n                if (!mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate && scene.activeCamera) {\n                    mesh._internalAbstractMeshDataInfo._currentLOD = scene.customLODSelector\n                        ? scene.customLODSelector(mesh, this.activeCamera || scene.activeCamera)\n                        : mesh.getLOD(this.activeCamera || scene.activeCamera);\n                    mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n                }\n                if (!mesh._internalAbstractMeshDataInfo._currentLOD) {\n                    continue;\n                }\n                let meshToRender = mesh._internalAbstractMeshDataInfo._currentLOD;\n                meshToRender._preActivateForIntermediateRendering(sceneRenderId);\n                let isMasked;\n                if (checkLayerMask && camera) {\n                    isMasked = (mesh.layerMask & camera.layerMask) === 0;\n                }\n                else {\n                    isMasked = false;\n                }\n                if (mesh.isEnabled() && mesh.isVisible && mesh.subMeshes && !isMasked) {\n                    if (meshToRender !== mesh) {\n                        meshToRender._activate(sceneRenderId, true);\n                    }\n                    if (mesh._activate(sceneRenderId, true) && mesh.subMeshes.length) {\n                        if (!mesh.isAnInstance) {\n                            meshToRender._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = false;\n                        }\n                        else {\n                            if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n                                meshToRender = mesh;\n                            }\n                        }\n                        meshToRender._internalAbstractMeshDataInfo._isActiveIntermediate = true;\n                        for (let subIndex = 0; subIndex < meshToRender.subMeshes.length; subIndex++) {\n                            const subMesh = meshToRender.subMeshes[subIndex];\n                            this._renderingManager.dispatch(subMesh, meshToRender);\n                        }\n                    }\n                }\n            }\n        }\n        for (let particleIndex = 0; particleIndex < scene.particleSystems.length; particleIndex++) {\n            const particleSystem = scene.particleSystems[particleIndex];\n            const emitter = particleSystem.emitter;\n            if (!particleSystem.isStarted() || !emitter || (emitter.position && !emitter.isEnabled())) {\n                continue;\n            }\n            this._renderingManager.dispatchParticles(particleSystem);\n        }\n    }\n    /**\n     * @internal\n     * @param faceIndex face index to bind to if this is a cubetexture\n     * @param layer defines the index of the texture to bind in the array\n     */\n    _bindFrameBuffer(faceIndex = 0, layer = 0) {\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const engine = scene.getEngine();\n        if (this._renderTarget) {\n            engine.bindFramebuffer(this._renderTarget, this.isCube ? faceIndex : undefined, undefined, undefined, this.ignoreCameraViewport, 0, layer);\n        }\n    }\n    _unbindFrameBuffer(engine, faceIndex) {\n        if (!this._renderTarget) {\n            return;\n        }\n        engine.unBindFramebuffer(this._renderTarget, this.isCube, () => {\n            this.onAfterRenderObservable.notifyObservers(faceIndex);\n        });\n    }\n    /**\n     * @internal\n     */\n    _prepareFrame(scene, faceIndex, layer, useCameraPostProcess) {\n        if (this._postProcessManager) {\n            if (!this._prePassEnabled) {\n                this._postProcessManager._prepareFrame(this._texture, this._postProcesses);\n            }\n        }\n        else if (!useCameraPostProcess || !scene.postProcessManager._prepareFrame(this._texture)) {\n            this._bindFrameBuffer(faceIndex, layer);\n        }\n    }\n    _renderToTarget(faceIndex, useCameraPostProcess, dumpForDebug, layer = 0, camera = null) {\n        var _a, _b, _c, _d, _e, _f;\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        const engine = scene.getEngine();\n        (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, `render to face #${faceIndex} layer #${layer}`, 1);\n        // Bind\n        this._prepareFrame(scene, faceIndex, layer, useCameraPostProcess);\n        if (this.is2DArray) {\n            engine.currentRenderPassId = this._renderPassIds[layer];\n            this.onBeforeRenderObservable.notifyObservers(layer);\n        }\n        else {\n            engine.currentRenderPassId = this._renderPassIds[faceIndex];\n            this.onBeforeRenderObservable.notifyObservers(faceIndex);\n        }\n        const fastPath = engine.snapshotRendering && engine.snapshotRenderingMode === 1;\n        if (!fastPath) {\n            // Get the list of meshes to render\n            let currentRenderList = null;\n            const defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;\n            const defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;\n            if (this.getCustomRenderList) {\n                currentRenderList = this.getCustomRenderList(this.is2DArray ? layer : faceIndex, defaultRenderList, defaultRenderListLength);\n            }\n            if (!currentRenderList) {\n                // No custom render list provided, we prepare the rendering for the default list, but check\n                // first if we did not already performed the preparation before so as to avoid re-doing it several times\n                if (!this._defaultRenderListPrepared) {\n                    this._prepareRenderingManager(defaultRenderList, defaultRenderListLength, camera, !this.renderList || this.forceLayerMaskCheck);\n                    this._defaultRenderListPrepared = true;\n                }\n                currentRenderList = defaultRenderList;\n            }\n            else {\n                // Prepare the rendering for the custom render list provided\n                this._prepareRenderingManager(currentRenderList, currentRenderList.length, camera, this.forceLayerMaskCheck);\n            }\n            // Before clear\n            for (const step of scene._beforeRenderTargetClearStage) {\n                step.action(this, faceIndex, layer);\n            }\n            // Clear\n            if (this.onClearObservable.hasObservers()) {\n                this.onClearObservable.notifyObservers(engine);\n            }\n            else {\n                if (!this.skipInitialClear) {\n                    engine.clear(this.clearColor || scene.clearColor, true, true, true);\n                }\n            }\n            if (!this._doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n            // Before Camera Draw\n            for (const step of scene._beforeRenderTargetDrawStage) {\n                step.action(this, faceIndex, layer);\n            }\n            // Render\n            this._renderingManager.render(this.customRenderFunction, currentRenderList, this.renderParticles, this.renderSprites);\n            // After Camera Draw\n            for (const step of scene._afterRenderTargetDrawStage) {\n                step.action(this, faceIndex, layer);\n            }\n            const saveGenerateMipMaps = (_c = (_b = this._texture) === null || _b === void 0 ? void 0 : _b.generateMipMaps) !== null && _c !== void 0 ? _c : false;\n            if (this._texture) {\n                this._texture.generateMipMaps = false; // if left true, the mipmaps will be generated (if this._texture.generateMipMaps = true) when the first post process binds its own RTT: by doing so it will unbind the current RTT,\n                // which will trigger a mipmap generation. We don't want this because it's a wasted work, we will do an unbind of the current RTT at the end of the process (see unbindFrameBuffer) which will\n                // trigger the generation of the final mipmaps\n            }\n            if (this._postProcessManager) {\n                this._postProcessManager._finalizeFrame(false, (_d = this._renderTarget) !== null && _d !== void 0 ? _d : undefined, faceIndex, this._postProcesses, this.ignoreCameraViewport);\n            }\n            else if (useCameraPostProcess) {\n                scene.postProcessManager._finalizeFrame(false, (_e = this._renderTarget) !== null && _e !== void 0 ? _e : undefined, faceIndex);\n            }\n            for (const step of scene._afterRenderTargetPostProcessStage) {\n                step.action(this, faceIndex, layer);\n            }\n            if (this._texture) {\n                this._texture.generateMipMaps = saveGenerateMipMaps;\n            }\n            if (!this._doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n            // Dump ?\n            if (dumpForDebug) {\n                DumpTools.DumpFramebuffer(this.getRenderWidth(), this.getRenderHeight(), engine);\n            }\n        }\n        else {\n            // Clear\n            if (this.onClearObservable.hasObservers()) {\n                this.onClearObservable.notifyObservers(engine);\n            }\n            else {\n                if (!this.skipInitialClear) {\n                    engine.clear(this.clearColor || scene.clearColor, true, true, true);\n                }\n            }\n        }\n        // Unbind\n        this._unbindFrameBuffer(engine, faceIndex);\n        if (this._texture && this.isCube && faceIndex === 5) {\n            engine.generateMipMapsForCubemap(this._texture);\n        }\n        (_f = engine._debugPopGroup) === null || _f === void 0 ? void 0 : _f.call(engine, 1);\n    }\n    /**\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\n     * This allowed control for front to back rendering or reversely depending of the special needs.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n     */\n    setRenderingOrder(renderingGroupId, opaqueSortCompareFn = null, alphaTestSortCompareFn = null, transparentSortCompareFn = null) {\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n    }\n    /**\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n     */\n    setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil) {\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil);\n        this._renderingManager._useSceneAutoClearSetup = false;\n    }\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    clone() {\n        const textureSize = this.getSize();\n        const newTexture = new RenderTargetTexture(this.name, textureSize, this.getScene(), this._renderTargetOptions.generateMipMaps, this._doNotChangeAspectRatio, this._renderTargetOptions.type, this.isCube, this._renderTargetOptions.samplingMode, this._renderTargetOptions.generateDepthBuffer, this._renderTargetOptions.generateStencilBuffer, undefined, this._renderTargetOptions.format, undefined, this._renderTargetOptions.samples);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // RenderTarget Texture\n        newTexture.coordinatesMode = this.coordinatesMode;\n        if (this.renderList) {\n            newTexture.renderList = this.renderList.slice(0);\n        }\n        return newTexture;\n    }\n    /**\n     * Serialize the texture to a JSON representation we can easily use in the respective Parse function.\n     * @returns The JSON representation of the texture\n     */\n    serialize() {\n        if (!this.name) {\n            return null;\n        }\n        const serializationObject = super.serialize();\n        serializationObject.renderTargetSize = this.getRenderSize();\n        serializationObject.renderList = [];\n        if (this.renderList) {\n            for (let index = 0; index < this.renderList.length; index++) {\n                serializationObject.renderList.push(this.renderList[index].id);\n            }\n        }\n        return serializationObject;\n    }\n    /**\n     *  This will remove the attached framebuffer objects. The texture will not be able to be used as render target anymore\n     */\n    disposeFramebufferObjects() {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose(true);\n    }\n    /**\n     * Release and destroy the underlying lower level texture aka internalTexture.\n     */\n    releaseInternalTexture() {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.releaseTextures();\n        this._texture = null;\n    }\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    dispose() {\n        var _a;\n        this.onResizeObservable.clear();\n        this.onClearObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onAfterUnbindObservable.clear();\n        this.onBeforeBindObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        if (this._postProcessManager) {\n            this._postProcessManager.dispose();\n            this._postProcessManager = null;\n        }\n        if (this._prePassRenderTarget) {\n            this._prePassRenderTarget.dispose();\n        }\n        this._releaseRenderPassId();\n        this.clearPostProcesses(true);\n        if (this._resizeObserver) {\n            this.getScene().getEngine().onResizeObservable.remove(this._resizeObserver);\n            this._resizeObserver = null;\n        }\n        this.renderList = null;\n        // Remove from custom render targets\n        const scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        let index = scene.customRenderTargets.indexOf(this);\n        if (index >= 0) {\n            scene.customRenderTargets.splice(index, 1);\n        }\n        for (const camera of scene.cameras) {\n            index = camera.customRenderTargets.indexOf(this);\n            if (index >= 0) {\n                camera.customRenderTargets.splice(index, 1);\n            }\n        }\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._renderTarget = null;\n        this._texture = null;\n        super.dispose();\n    }\n    /** @internal */\n    _rebuild() {\n        if (this.refreshRate === RenderTargetTexture.REFRESHRATE_RENDER_ONCE) {\n            this.refreshRate = RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        }\n        if (this._postProcessManager) {\n            this._postProcessManager._rebuild();\n        }\n    }\n    /**\n     * Clear the info related to rendering groups preventing retention point in material dispose.\n     */\n    freeRenderingGroups() {\n        if (this._renderingManager) {\n            this._renderingManager.freeRenderingGroups();\n        }\n    }\n    /**\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\n     * @returns the view count\n     */\n    getViewCount() {\n        return 1;\n    }\n}\n/**\n * The texture will only be rendered once which can be useful to improve performance if everything in your render is static for instance.\n */\nRenderTargetTexture.REFRESHRATE_RENDER_ONCE = 0;\n/**\n * The texture will only be rendered rendered every frame and is recommended for dynamic contents.\n */\nRenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME = 1;\n/**\n * The texture will be rendered every 2 frames which could be enough if your dynamic objects are not\n * the central point of your effect and can save a lot of performances.\n */\nRenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES = 2;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CreateRenderTargetTexture = (name, renderTargetSize, scene, generateMipMaps, creationFlags) => {\n    return new RenderTargetTexture(name, renderTargetSize, scene, generateMipMaps);\n};\n//# sourceMappingURL=renderTargetTexture.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\n\nimport \"../Shaders/postprocess.vertex.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport \"../Engines/Extensions/engine.renderTarget.js\";\nimport { serialize, serializeAsColor4, SerializationHelper } from \"../Misc/decorators.js\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport { ShaderLanguage } from \"../Materials/shaderLanguage.js\";\n/**\n * PostProcess can be used to apply a shader to a texture after it has been rendered\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n */\nexport class PostProcess {\n    /**\n     * Registers a shader code processing with a post process name.\n     * @param postProcessName name of the post process. Use null for the fallback shader code processing. This is the shader code processing that will be used in case no specific shader code processing has been associated to a post process name\n     * @param customShaderCodeProcessing shader code processing to associate to the post process name\n     * @returns\n     */\n    static RegisterShaderCodeProcessing(postProcessName, customShaderCodeProcessing) {\n        if (!customShaderCodeProcessing) {\n            delete PostProcess._CustomShaderCodeProcessing[postProcessName !== null && postProcessName !== void 0 ? postProcessName : \"\"];\n            return;\n        }\n        PostProcess._CustomShaderCodeProcessing[postProcessName !== null && postProcessName !== void 0 ? postProcessName : \"\"] = customShaderCodeProcessing;\n    }\n    static _GetShaderCodeProcessing(postProcessName) {\n        var _a;\n        return (_a = PostProcess._CustomShaderCodeProcessing[postProcessName]) !== null && _a !== void 0 ? _a : PostProcess._CustomShaderCodeProcessing[\"\"];\n    }\n    /**\n     * Number of sample textures (default: 1)\n     */\n    get samples() {\n        return this._samples;\n    }\n    set samples(n) {\n        this._samples = Math.min(n, this._engine.getCaps().maxMSAASamples);\n        this._textures.forEach((texture) => {\n            texture.setSamples(this._samples);\n        });\n    }\n    /**\n     * Returns the fragment url or shader name used in the post process.\n     * @returns the fragment url or name in the shader store.\n     */\n    getEffectName() {\n        return this._fragmentUrl;\n    }\n    /**\n     * A function that is added to the onActivateObservable\n     */\n    set onActivate(callback) {\n        if (this._onActivateObserver) {\n            this.onActivateObservable.remove(this._onActivateObserver);\n        }\n        if (callback) {\n            this._onActivateObserver = this.onActivateObservable.add(callback);\n        }\n    }\n    /**\n     * A function that is added to the onSizeChangedObservable\n     */\n    set onSizeChanged(callback) {\n        if (this._onSizeChangedObserver) {\n            this.onSizeChangedObservable.remove(this._onSizeChangedObserver);\n        }\n        this._onSizeChangedObserver = this.onSizeChangedObservable.add(callback);\n    }\n    /**\n     * A function that is added to the onApplyObservable\n     */\n    set onApply(callback) {\n        if (this._onApplyObserver) {\n            this.onApplyObservable.remove(this._onApplyObserver);\n        }\n        this._onApplyObserver = this.onApplyObservable.add(callback);\n    }\n    /**\n     * A function that is added to the onBeforeRenderObservable\n     */\n    set onBeforeRender(callback) {\n        if (this._onBeforeRenderObserver) {\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n        }\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    }\n    /**\n     * A function that is added to the onAfterRenderObservable\n     */\n    set onAfterRender(callback) {\n        if (this._onAfterRenderObserver) {\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        }\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    }\n    /**\n     * The input texture for this post process and the output texture of the previous post process. When added to a pipeline the previous post process will\n     * render it's output into this texture and this texture will be used as textureSampler in the fragment shader of this post process.\n     */\n    get inputTexture() {\n        return this._textures.data[this._currentRenderTextureInd];\n    }\n    set inputTexture(value) {\n        this._forcedOutputTexture = value;\n    }\n    /**\n     * Since inputTexture should always be defined, if we previously manually set `inputTexture`,\n     * the only way to unset it is to use this function to restore its internal state\n     */\n    restoreDefaultInputTexture() {\n        if (this._forcedOutputTexture) {\n            this._forcedOutputTexture = null;\n            this.markTextureDirty();\n        }\n    }\n    /**\n     * Gets the camera which post process is applied to.\n     * @returns The camera the post process is applied to.\n     */\n    getCamera() {\n        return this._camera;\n    }\n    /**\n     * Gets the texel size of the postprocess.\n     * See https://en.wikipedia.org/wiki/Texel_(graphics)\n     */\n    get texelSize() {\n        if (this._shareOutputWithPostProcess) {\n            return this._shareOutputWithPostProcess.texelSize;\n        }\n        if (this._forcedOutputTexture) {\n            this._texelSize.copyFromFloats(1.0 / this._forcedOutputTexture.width, 1.0 / this._forcedOutputTexture.height);\n        }\n        return this._texelSize;\n    }\n    /**\n     * Creates a new instance PostProcess\n     * @param name The name of the PostProcess.\n     * @param fragmentUrl The url of the fragment shader to be used.\n     * @param parameters Array of the names of uniform non-sampler2D variables that will be passed to the shader.\n     * @param samplers Array of the names of uniform sampler2D variables that will be passed to the shader.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param defines String of defines that will be set when running the fragment shader. (default: null)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param vertexUrl The url of the vertex shader to be used. (default: \"postprocess\")\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param blockCompilation If the shader should not be compiled immediatly. (default: false)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     */\n    constructor(name, fragmentUrl, parameters, samplers, options, camera, samplingMode = 1, engine, reusable, defines = null, textureType = 0, vertexUrl = \"postprocess\", indexParameters, blockCompilation = false, textureFormat = 5, shaderLanguage = ShaderLanguage.GLSL) {\n        /** @internal */\n        this._parentContainer = null;\n        /**\n         * Width of the texture to apply the post process on\n         */\n        this.width = -1;\n        /**\n         * Height of the texture to apply the post process on\n         */\n        this.height = -1;\n        /**\n         * Gets the node material used to create this postprocess (null if the postprocess was manually created)\n         */\n        this.nodeMaterialSource = null;\n        /**\n         * Internal, reference to the location where this postprocess was output to. (Typically the texture on the next postprocess in the chain)\n         * @internal\n         */\n        this._outputTexture = null;\n        /**\n         * If the buffer needs to be cleared before applying the post process. (default: true)\n         * Should be set to false if shader will overwrite all previous pixels.\n         */\n        this.autoClear = true;\n        /**\n         * If clearing the buffer should be forced in autoClear mode, even when alpha mode is enabled (default: false).\n         * By default, the buffer will only be cleared if alpha mode is disabled (and autoClear is true).\n         */\n        this.forceAutoClearInAlphaMode = false;\n        /**\n         * Type of alpha mode to use when performing the post process (default: Engine.ALPHA_DISABLE)\n         */\n        this.alphaMode = 0;\n        /**\n         * Animations to be used for the post processing\n         */\n        this.animations = new Array();\n        /**\n         * Enable Pixel Perfect mode where texture is not scaled to be power of 2.\n         * Can only be used on a single postprocess or on the last one of a chain. (default: false)\n         */\n        this.enablePixelPerfectMode = false;\n        /**\n         * Force the postprocess to be applied without taking in account viewport\n         */\n        this.forceFullscreenViewport = true;\n        /**\n         * Scale mode for the post process (default: Engine.SCALEMODE_FLOOR)\n         *\n         * | Value | Type                                | Description |\n         * | ----- | ----------------------------------- | ----------- |\n         * | 1     | SCALEMODE_FLOOR                     | [engine.scalemode_floor](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_floor) |\n         * | 2     | SCALEMODE_NEAREST                   | [engine.scalemode_nearest](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_nearest) |\n         * | 3     | SCALEMODE_CEILING                   | [engine.scalemode_ceiling](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_ceiling) |\n         *\n         */\n        this.scaleMode = 1;\n        /**\n         * Force textures to be a power of two (default: false)\n         */\n        this.alwaysForcePOT = false;\n        this._samples = 1;\n        /**\n         * Modify the scale of the post process to be the same as the viewport (default: false)\n         */\n        this.adaptScaleToCurrentViewport = false;\n        this._reusable = false;\n        this._renderId = 0;\n        /**\n         * if externalTextureSamplerBinding is true, the \"apply\" method won't bind the textureSampler texture, it is expected to be done by the \"outside\" (by the onApplyObservable observer most probably).\n         * counter-productive in some cases because if the texture bound by \"apply\" is different from the currently texture bound, (the one set by the onApplyObservable observer, for eg) some\n         * internal structures (materialContext) will be dirtified, which may impact performances\n         */\n        this.externalTextureSamplerBinding = false;\n        /**\n         * Smart array of input and output textures for the post process.\n         * @internal\n         */\n        this._textures = new SmartArray(2);\n        /**\n         * Smart array of input and output textures for the post process.\n         * @internal\n         */\n        this._textureCache = [];\n        /**\n         * The index in _textures that corresponds to the output texture.\n         * @internal\n         */\n        this._currentRenderTextureInd = 0;\n        this._scaleRatio = new Vector2(1, 1);\n        this._texelSize = Vector2.Zero();\n        // Events\n        /**\n         * An event triggered when the postprocess is activated.\n         */\n        this.onActivateObservable = new Observable();\n        /**\n         * An event triggered when the postprocess changes its size.\n         */\n        this.onSizeChangedObservable = new Observable();\n        /**\n         * An event triggered when the postprocess applies its effect.\n         */\n        this.onApplyObservable = new Observable();\n        /**\n         * An event triggered before rendering the postprocess\n         */\n        this.onBeforeRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the postprocess\n         */\n        this.onAfterRenderObservable = new Observable();\n        this.name = name;\n        if (camera != null) {\n            this._camera = camera;\n            this._scene = camera.getScene();\n            camera.attachPostProcess(this);\n            this._engine = this._scene.getEngine();\n            this._scene.postProcesses.push(this);\n            this.uniqueId = this._scene.getUniqueId();\n        }\n        else if (engine) {\n            this._engine = engine;\n            this._engine.postProcesses.push(this);\n        }\n        this._options = options;\n        this.renderTargetSamplingMode = samplingMode ? samplingMode : 1;\n        this._reusable = reusable || false;\n        this._textureType = textureType;\n        this._textureFormat = textureFormat;\n        this._shaderLanguage = shaderLanguage;\n        this._samplers = samplers || [];\n        this._samplers.push(\"textureSampler\");\n        this._fragmentUrl = fragmentUrl;\n        this._vertexUrl = vertexUrl;\n        this._parameters = parameters || [];\n        this._parameters.push(\"scale\");\n        this._indexParameters = indexParameters;\n        this._drawWrapper = new DrawWrapper(this._engine);\n        if (!blockCompilation) {\n            this.updateEffect(defines);\n        }\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"PostProcess\" string\n     */\n    getClassName() {\n        return \"PostProcess\";\n    }\n    /**\n     * Gets the engine which this post process belongs to.\n     * @returns The engine the post process was enabled with.\n     */\n    getEngine() {\n        return this._engine;\n    }\n    /**\n     * The effect that is created when initializing the post process.\n     * @returns The created effect corresponding the the postprocess.\n     */\n    getEffect() {\n        return this._drawWrapper.effect;\n    }\n    /**\n     * To avoid multiple redundant textures for multiple post process, the output the output texture for this post process can be shared with another.\n     * @param postProcess The post process to share the output with.\n     * @returns This post process.\n     */\n    shareOutputWith(postProcess) {\n        this._disposeTextures();\n        this._shareOutputWithPostProcess = postProcess;\n        return this;\n    }\n    /**\n     * Reverses the effect of calling shareOutputWith and returns the post process back to its original state.\n     * This should be called if the post process that shares output with this post process is disabled/disposed.\n     */\n    useOwnOutput() {\n        if (this._textures.length == 0) {\n            this._textures = new SmartArray(2);\n        }\n        this._shareOutputWithPostProcess = null;\n    }\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     * @param vertexUrl The url of the vertex shader to be used (default: the one given at construction time)\n     * @param fragmentUrl The url of the fragment shader to be used (default: the one given at construction time)\n     */\n    updateEffect(defines = null, uniforms = null, samplers = null, indexParameters, onCompiled, onError, vertexUrl, fragmentUrl) {\n        var _a, _b;\n        const customShaderCodeProcessing = PostProcess._GetShaderCodeProcessing(this.name);\n        if (customShaderCodeProcessing === null || customShaderCodeProcessing === void 0 ? void 0 : customShaderCodeProcessing.defineCustomBindings) {\n            const newUniforms = (_a = uniforms === null || uniforms === void 0 ? void 0 : uniforms.slice()) !== null && _a !== void 0 ? _a : [];\n            newUniforms.push(...this._parameters);\n            const newSamplers = (_b = samplers === null || samplers === void 0 ? void 0 : samplers.slice()) !== null && _b !== void 0 ? _b : [];\n            newSamplers.push(...this._samplers);\n            defines = customShaderCodeProcessing.defineCustomBindings(this.name, defines, newUniforms, newSamplers);\n            uniforms = newUniforms;\n            samplers = newSamplers;\n        }\n        this._postProcessDefines = defines;\n        this._drawWrapper.effect = this._engine.createEffect({ vertex: vertexUrl !== null && vertexUrl !== void 0 ? vertexUrl : this._vertexUrl, fragment: fragmentUrl !== null && fragmentUrl !== void 0 ? fragmentUrl : this._fragmentUrl }, {\n            attributes: [\"position\"],\n            uniformsNames: uniforms || this._parameters,\n            uniformBuffersNames: [],\n            samplers: samplers || this._samplers,\n            defines: defines !== null ? defines : \"\",\n            fallbacks: null,\n            onCompiled: onCompiled !== null && onCompiled !== void 0 ? onCompiled : null,\n            onError: onError !== null && onError !== void 0 ? onError : null,\n            indexParameters: indexParameters || this._indexParameters,\n            processCodeAfterIncludes: (customShaderCodeProcessing === null || customShaderCodeProcessing === void 0 ? void 0 : customShaderCodeProcessing.processCodeAfterIncludes)\n                ? (shaderType, code) => customShaderCodeProcessing.processCodeAfterIncludes(this.name, shaderType, code)\n                : null,\n            processFinalCode: (customShaderCodeProcessing === null || customShaderCodeProcessing === void 0 ? void 0 : customShaderCodeProcessing.processFinalCode)\n                ? (shaderType, code) => customShaderCodeProcessing.processFinalCode(this.name, shaderType, code)\n                : null,\n            shaderLanguage: this._shaderLanguage,\n        }, this._engine);\n    }\n    /**\n     * The post process is reusable if it can be used multiple times within one frame.\n     * @returns If the post process is reusable\n     */\n    isReusable() {\n        return this._reusable;\n    }\n    /** invalidate frameBuffer to hint the postprocess to create a depth buffer */\n    markTextureDirty() {\n        this.width = -1;\n    }\n    _createRenderTargetTexture(textureSize, textureOptions, channel = 0) {\n        for (let i = 0; i < this._textureCache.length; i++) {\n            if (this._textureCache[i].texture.width === textureSize.width &&\n                this._textureCache[i].texture.height === textureSize.height &&\n                this._textureCache[i].postProcessChannel === channel &&\n                this._textureCache[i].texture._generateDepthBuffer === textureOptions.generateDepthBuffer &&\n                this._textureCache[i].texture.samples === textureOptions.samples) {\n                return this._textureCache[i].texture;\n            }\n        }\n        const tex = this._engine.createRenderTargetTexture(textureSize, textureOptions);\n        this._textureCache.push({ texture: tex, postProcessChannel: channel, lastUsedRenderId: -1 });\n        return tex;\n    }\n    _flushTextureCache() {\n        const currentRenderId = this._renderId;\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\n            if (currentRenderId - this._textureCache[i].lastUsedRenderId > 100) {\n                let currentlyUsed = false;\n                for (let j = 0; j < this._textures.length; j++) {\n                    if (this._textures.data[j] === this._textureCache[i].texture) {\n                        currentlyUsed = true;\n                        break;\n                    }\n                }\n                if (!currentlyUsed) {\n                    this._textureCache[i].texture.dispose();\n                    this._textureCache.splice(i, 1);\n                }\n            }\n        }\n    }\n    _resize(width, height, camera, needMipMaps, forceDepthStencil) {\n        if (this._textures.length > 0) {\n            this._textures.reset();\n        }\n        this.width = width;\n        this.height = height;\n        let firstPP = null;\n        for (let i = 0; i < camera._postProcesses.length; i++) {\n            if (camera._postProcesses[i] !== null) {\n                firstPP = camera._postProcesses[i];\n                break;\n            }\n        }\n        const textureSize = { width: this.width, height: this.height };\n        const textureOptions = {\n            generateMipMaps: needMipMaps,\n            generateDepthBuffer: forceDepthStencil || firstPP === this,\n            generateStencilBuffer: (forceDepthStencil || firstPP === this) && this._engine.isStencilEnable,\n            samplingMode: this.renderTargetSamplingMode,\n            type: this._textureType,\n            format: this._textureFormat,\n            samples: this._samples,\n            label: \"PostProcessRTT-\" + this.name,\n        };\n        this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 0));\n        if (this._reusable) {\n            this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 1));\n        }\n        this._texelSize.copyFromFloats(1.0 / this.width, 1.0 / this.height);\n        this.onSizeChangedObservable.notifyObservers(this);\n    }\n    /**\n     * Activates the post process by intializing the textures to be used when executed. Notifies onActivateObservable.\n     * When this post process is used in a pipeline, this is call will bind the input texture of this post process to the output of the previous.\n     * @param camera The camera that will be used in the post process. This camera will be used when calling onActivateObservable.\n     * @param sourceTexture The source texture to be inspected to get the width and height if not specified in the post process constructor. (default: null)\n     * @param forceDepthStencil If true, a depth and stencil buffer will be generated. (default: false)\n     * @returns The render target wrapper that was bound to be written to.\n     */\n    activate(camera, sourceTexture = null, forceDepthStencil) {\n        var _a, _b;\n        camera = camera || this._camera;\n        const scene = camera.getScene();\n        const engine = scene.getEngine();\n        const maxSize = engine.getCaps().maxTextureSize;\n        let requiredWidth = ((sourceTexture ? sourceTexture.width : this._engine.getRenderWidth(true)) * this._options) | 0;\n        const requiredHeight = ((sourceTexture ? sourceTexture.height : this._engine.getRenderHeight(true)) * this._options) | 0;\n        // If rendering to a webvr camera's left or right eye only half the width should be used to avoid resize when rendered to screen\n        const webVRCamera = camera.parent;\n        if (webVRCamera && (webVRCamera.leftCamera == camera || webVRCamera.rightCamera == camera)) {\n            requiredWidth /= 2;\n        }\n        let desiredWidth = this._options.width || requiredWidth;\n        let desiredHeight = this._options.height || requiredHeight;\n        const needMipMaps = this.renderTargetSamplingMode !== 7 &&\n            this.renderTargetSamplingMode !== 1 &&\n            this.renderTargetSamplingMode !== 2;\n        if (!this._shareOutputWithPostProcess && !this._forcedOutputTexture) {\n            if (this.adaptScaleToCurrentViewport) {\n                const currentViewport = engine.currentViewport;\n                if (currentViewport) {\n                    desiredWidth *= currentViewport.width;\n                    desiredHeight *= currentViewport.height;\n                }\n            }\n            if (needMipMaps || this.alwaysForcePOT) {\n                if (!this._options.width) {\n                    desiredWidth = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredWidth, maxSize, this.scaleMode) : desiredWidth;\n                }\n                if (!this._options.height) {\n                    desiredHeight = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredHeight, maxSize, this.scaleMode) : desiredHeight;\n                }\n            }\n            if (this.width !== desiredWidth || this.height !== desiredHeight) {\n                this._resize(desiredWidth, desiredHeight, camera, needMipMaps, forceDepthStencil);\n            }\n            this._textures.forEach((texture) => {\n                if (texture.samples !== this.samples) {\n                    this._engine.updateRenderTargetTextureSampleCount(texture, this.samples);\n                }\n            });\n            this._flushTextureCache();\n            this._renderId++;\n        }\n        let target;\n        if (this._shareOutputWithPostProcess) {\n            target = this._shareOutputWithPostProcess.inputTexture;\n        }\n        else if (this._forcedOutputTexture) {\n            target = this._forcedOutputTexture;\n            this.width = this._forcedOutputTexture.width;\n            this.height = this._forcedOutputTexture.height;\n        }\n        else {\n            target = this.inputTexture;\n            let cache;\n            for (let i = 0; i < this._textureCache.length; i++) {\n                if (this._textureCache[i].texture === target) {\n                    cache = this._textureCache[i];\n                    break;\n                }\n            }\n            if (cache) {\n                cache.lastUsedRenderId = this._renderId;\n            }\n        }\n        // Bind the input of this post process to be used as the output of the previous post process.\n        if (this.enablePixelPerfectMode) {\n            this._scaleRatio.copyFromFloats(requiredWidth / desiredWidth, requiredHeight / desiredHeight);\n            this._engine.bindFramebuffer(target, 0, requiredWidth, requiredHeight, this.forceFullscreenViewport);\n        }\n        else {\n            this._scaleRatio.copyFromFloats(1, 1);\n            this._engine.bindFramebuffer(target, 0, undefined, undefined, this.forceFullscreenViewport);\n        }\n        (_b = (_a = this._engine)._debugInsertMarker) === null || _b === void 0 ? void 0 : _b.call(_a, `post process ${this.name} input`);\n        this.onActivateObservable.notifyObservers(camera);\n        // Clear\n        if (this.autoClear && (this.alphaMode === 0 || this.forceAutoClearInAlphaMode)) {\n            this._engine.clear(this.clearColor ? this.clearColor : scene.clearColor, scene._allowPostProcessClearColor, true, true);\n        }\n        if (this._reusable) {\n            this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;\n        }\n        return target;\n    }\n    /**\n     * If the post process is supported.\n     */\n    get isSupported() {\n        return this._drawWrapper.effect.isSupported;\n    }\n    /**\n     * The aspect ratio of the output texture.\n     */\n    get aspectRatio() {\n        if (this._shareOutputWithPostProcess) {\n            return this._shareOutputWithPostProcess.aspectRatio;\n        }\n        if (this._forcedOutputTexture) {\n            return this._forcedOutputTexture.width / this._forcedOutputTexture.height;\n        }\n        return this.width / this.height;\n    }\n    /**\n     * Get a value indicating if the post-process is ready to be used\n     * @returns true if the post-process is ready (shader is compiled)\n     */\n    isReady() {\n        var _a, _b;\n        return (_b = (_a = this._drawWrapper.effect) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n    }\n    /**\n     * Binds all textures and uniforms to the shader, this will be run on every pass.\n     * @returns the effect corresponding to this post process. Null if not compiled or not ready.\n     */\n    apply() {\n        var _a, _b, _c;\n        // Check\n        if (!((_a = this._drawWrapper.effect) === null || _a === void 0 ? void 0 : _a.isReady())) {\n            return null;\n        }\n        // States\n        this._engine.enableEffect(this._drawWrapper);\n        this._engine.setState(false);\n        this._engine.setDepthBuffer(false);\n        this._engine.setDepthWrite(false);\n        // Alpha\n        this._engine.setAlphaMode(this.alphaMode);\n        if (this.alphaConstants) {\n            this.getEngine().setAlphaConstants(this.alphaConstants.r, this.alphaConstants.g, this.alphaConstants.b, this.alphaConstants.a);\n        }\n        // Bind the output texture of the preivous post process as the input to this post process.\n        let source;\n        if (this._shareOutputWithPostProcess) {\n            source = this._shareOutputWithPostProcess.inputTexture;\n        }\n        else if (this._forcedOutputTexture) {\n            source = this._forcedOutputTexture;\n        }\n        else {\n            source = this.inputTexture;\n        }\n        if (!this.externalTextureSamplerBinding) {\n            this._drawWrapper.effect._bindTexture(\"textureSampler\", source === null || source === void 0 ? void 0 : source.texture);\n        }\n        // Parameters\n        this._drawWrapper.effect.setVector2(\"scale\", this._scaleRatio);\n        this.onApplyObservable.notifyObservers(this._drawWrapper.effect);\n        (_c = (_b = PostProcess._GetShaderCodeProcessing(this.name)) === null || _b === void 0 ? void 0 : _b.bindCustomBindings) === null || _c === void 0 ? void 0 : _c.call(_b, this.name, this._drawWrapper.effect);\n        return this._drawWrapper.effect;\n    }\n    _disposeTextures() {\n        if (this._shareOutputWithPostProcess || this._forcedOutputTexture) {\n            this._disposeTextureCache();\n            return;\n        }\n        this._disposeTextureCache();\n        this._textures.dispose();\n    }\n    _disposeTextureCache() {\n        for (let i = this._textureCache.length - 1; i >= 0; i--) {\n            this._textureCache[i].texture.dispose();\n        }\n        this._textureCache.length = 0;\n    }\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    setPrePassRenderer(prePassRenderer) {\n        if (this._prePassEffectConfiguration) {\n            this._prePassEffectConfiguration = prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\n            this._prePassEffectConfiguration.enabled = true;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Disposes the post process.\n     * @param camera The camera to dispose the post process on.\n     */\n    dispose(camera) {\n        camera = camera || this._camera;\n        this._disposeTextures();\n        let index;\n        if (this._scene) {\n            index = this._scene.postProcesses.indexOf(this);\n            if (index !== -1) {\n                this._scene.postProcesses.splice(index, 1);\n            }\n        }\n        if (this._parentContainer) {\n            const index = this._parentContainer.postProcesses.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.postProcesses.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        index = this._engine.postProcesses.indexOf(this);\n        if (index !== -1) {\n            this._engine.postProcesses.splice(index, 1);\n        }\n        if (!camera) {\n            return;\n        }\n        camera.detachPostProcess(this);\n        index = camera._postProcesses.indexOf(this);\n        if (index === 0 && camera._postProcesses.length > 0) {\n            const firstPostProcess = this._camera._getFirstPostProcess();\n            if (firstPostProcess) {\n                firstPostProcess.markTextureDirty();\n            }\n        }\n        this.onActivateObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onApplyObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        this.onSizeChangedObservable.clear();\n    }\n    /**\n     * Serializes the post process to a JSON object\n     * @returns the JSON object\n     */\n    serialize() {\n        const serializationObject = SerializationHelper.Serialize(this);\n        const camera = this.getCamera() || (this._scene && this._scene.activeCamera);\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\n        serializationObject.cameraId = camera ? camera.id : null;\n        serializationObject.reusable = this._reusable;\n        serializationObject.textureType = this._textureType;\n        serializationObject.fragmentUrl = this._fragmentUrl;\n        serializationObject.parameters = this._parameters;\n        serializationObject.samplers = this._samplers;\n        serializationObject.options = this._options;\n        serializationObject.defines = this._postProcessDefines;\n        serializationObject.textureFormat = this._textureFormat;\n        serializationObject.vertexUrl = this._vertexUrl;\n        serializationObject.indexParameters = this._indexParameters;\n        return serializationObject;\n    }\n    /**\n     * Clones this post process\n     * @returns a new post process similar to this one\n     */\n    clone() {\n        const serializationObject = this.serialize();\n        serializationObject._engine = this._engine;\n        serializationObject.cameraId = null;\n        const result = PostProcess.Parse(serializationObject, this._scene, \"\");\n        if (!result) {\n            return null;\n        }\n        result.onActivateObservable = this.onActivateObservable.clone();\n        result.onSizeChangedObservable = this.onSizeChangedObservable.clone();\n        result.onApplyObservable = this.onApplyObservable.clone();\n        result.onBeforeRenderObservable = this.onBeforeRenderObservable.clone();\n        result.onAfterRenderObservable = this.onAfterRenderObservable.clone();\n        result._prePassEffectConfiguration = this._prePassEffectConfiguration;\n        return result;\n    }\n    /**\n     * Creates a material from parsed material data\n     * @param parsedPostProcess defines parsed post process data\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns a new post process\n     */\n    static Parse(parsedPostProcess, scene, rootUrl) {\n        const postProcessType = GetClass(parsedPostProcess.customType);\n        if (!postProcessType || !postProcessType._Parse) {\n            return null;\n        }\n        const camera = scene ? scene.getCameraById(parsedPostProcess.cameraId) : null;\n        return postProcessType._Parse(parsedPostProcess, camera, scene, rootUrl);\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new PostProcess(parsedPostProcess.name, parsedPostProcess.fragmentUrl, parsedPostProcess.parameters, parsedPostProcess.samplers, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable, parsedPostProcess.defines, parsedPostProcess.textureType, parsedPostProcess.vertexUrl, parsedPostProcess.indexParameters, false, parsedPostProcess.textureFormat);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\nPostProcess._CustomShaderCodeProcessing = {};\n__decorate([\n    serialize()\n], PostProcess.prototype, \"uniqueId\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"name\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"width\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"height\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"renderTargetSamplingMode\", void 0);\n__decorate([\n    serializeAsColor4()\n], PostProcess.prototype, \"clearColor\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"autoClear\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"forceAutoClearInAlphaMode\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"alphaMode\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"alphaConstants\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"enablePixelPerfectMode\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"forceFullscreenViewport\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"scaleMode\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"alwaysForcePOT\", void 0);\n__decorate([\n    serialize(\"samples\")\n], PostProcess.prototype, \"_samples\", void 0);\n__decorate([\n    serialize()\n], PostProcess.prototype, \"adaptScaleToCurrentViewport\", void 0);\nRegisterClass(\"BABYLON.PostProcess\", PostProcess);\n//# sourceMappingURL=postProcess.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"kernelBlurVaryingDeclaration\";\nconst shader = `varying vec2 sampleCoord{X};`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurVaryingDeclaration = { name, shader };\n//# sourceMappingURL=kernelBlurVaryingDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"packingFunctions\";\nconst shader = `vec4 pack(float depth)\r{\rconst vec4 bit_shift=vec4(255.0*255.0*255.0,255.0*255.0,255.0,1.0);\rconst vec4 bit_mask=vec4(0.0,1.0/255.0,1.0/255.0,1.0/255.0);\rvec4 res=fract(depth*bit_shift);\rres-=res.xxyz*bit_mask;\rreturn res;\r}\rfloat unpack(vec4 color)\r{\rconst vec4 bit_shift=vec4(1.0/(255.0*255.0*255.0),1.0/(255.0*255.0),1.0/255.0,1.0);\rreturn dot(color,bit_shift);\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const packingFunctions = { name, shader };\n//# sourceMappingURL=packingFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"kernelBlurFragment\";\nconst shader = `#ifdef DOF\nfactor=sampleCoC(sampleCoord{X}); \rcomputedWeight=KERNEL_WEIGHT{X}*factor;\rsumOfWeights+=computedWeight;\r#else\ncomputedWeight=KERNEL_WEIGHT{X};\r#endif\n#ifdef PACKEDFLOAT\nblend+=unpack(texture2D(textureSampler,sampleCoord{X}))*computedWeight;\r#else\nblend+=texture2D(textureSampler,sampleCoord{X})*computedWeight;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurFragment = { name, shader };\n//# sourceMappingURL=kernelBlurFragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"kernelBlurFragment2\";\nconst shader = `#ifdef DOF\nfactor=sampleCoC(sampleCenter+delta*KERNEL_DEP_OFFSET{X});\rcomputedWeight=KERNEL_DEP_WEIGHT{X}*factor;\rsumOfWeights+=computedWeight;\r#else\ncomputedWeight=KERNEL_DEP_WEIGHT{X};\r#endif\n#ifdef PACKEDFLOAT\nblend+=unpack(texture2D(textureSampler,sampleCenter+delta*KERNEL_DEP_OFFSET{X}))*computedWeight;\r#else\nblend+=texture2D(textureSampler,sampleCenter+delta*KERNEL_DEP_OFFSET{X})*computedWeight;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurFragment2 = { name, shader };\n//# sourceMappingURL=kernelBlurFragment2.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/kernelBlurVaryingDeclaration.js\";\nimport \"./ShadersInclude/packingFunctions.js\";\nimport \"./ShadersInclude/kernelBlurFragment.js\";\nimport \"./ShadersInclude/kernelBlurFragment2.js\";\nconst name = \"kernelBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;\runiform vec2 delta;\rvarying vec2 sampleCenter;\r#ifdef DOF\nuniform sampler2D circleOfConfusionSampler;\rfloat sampleCoC(in vec2 offset) {\rfloat coc=texture2D(circleOfConfusionSampler,offset).r;\rreturn coc; \r}\r#endif\n#include<kernelBlurVaryingDeclaration>[0..varyingCount]\n#ifdef PACKEDFLOAT\n#include<packingFunctions>\n#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\rfloat computedWeight=0.0;\r#ifdef PACKEDFLOAT\nfloat blend=0.;\r#else\nvec4 blend=vec4(0.);\r#endif\n#ifdef DOF\nfloat sumOfWeights=CENTER_WEIGHT; \rfloat factor=0.0;\r#ifdef PACKEDFLOAT\nblend+=unpack(texture2D(textureSampler,sampleCenter))*CENTER_WEIGHT;\r#else\nblend+=texture2D(textureSampler,sampleCenter)*CENTER_WEIGHT;\r#endif\n#endif\n#include<kernelBlurFragment>[0..varyingCount]\n#include<kernelBlurFragment2>[0..depCount]\n#ifdef PACKEDFLOAT\ngl_FragColor=pack(blend);\r#else\ngl_FragColor=blend;\r#endif\n#ifdef DOF\ngl_FragColor/=sumOfWeights;\r#endif\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurPixelShader = { name, shader };\n//# sourceMappingURL=kernelBlur.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/kernelBlurVaryingDeclaration.js\";\nimport \"./ShadersInclude/kernelBlurVertex.js\";\nconst name = \"kernelBlurVertexShader\";\nconst shader = `attribute vec2 position;\runiform vec2 delta;\rvarying vec2 sampleCenter;\r#include<kernelBlurVaryingDeclaration>[0..varyingCount]\nconst vec2 madd=vec2(0.5,0.5);\r#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\nsampleCenter=(position*madd+madd);\r#include<kernelBlurVertex>[0..varyingCount]\ngl_Position=vec4(position,0.0,1.0);\r#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurVertexShader = { name, shader };\n//# sourceMappingURL=kernelBlur.vertex.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\n\nimport \"../Shaders/kernelBlur.fragment.js\";\nimport \"../Shaders/kernelBlur.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, serializeAsVector2, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Blur Post Process which blurs an image based on a kernel and direction.\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\n */\nexport class BlurPostProcess extends PostProcess {\n    /**\n     * Sets the length in pixels of the blur sample region\n     */\n    set kernel(v) {\n        if (this._idealKernel === v) {\n            return;\n        }\n        v = Math.max(v, 1);\n        this._idealKernel = v;\n        this._kernel = this._nearestBestKernel(v);\n        if (!this._blockCompilation) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * Gets the length in pixels of the blur sample region\n     */\n    get kernel() {\n        return this._idealKernel;\n    }\n    /**\n     * Sets whether or not the blur needs to unpack/repack floats\n     */\n    set packedFloat(v) {\n        if (this._packedFloat === v) {\n            return;\n        }\n        this._packedFloat = v;\n        if (!this._blockCompilation) {\n            this._updateParameters();\n        }\n    }\n    /**\n     * Gets whether or not the blur is unpacking/repacking floats\n     */\n    get packedFloat() {\n        return this._packedFloat;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BlurPostProcess\" string\n     */\n    getClassName() {\n        return \"BlurPostProcess\";\n    }\n    /**\n     * Creates a new instance BlurPostProcess\n     * @param name The name of the effect.\n     * @param direction The direction in which to blur the image.\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param defines\n     * @param _blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     */\n    constructor(name, direction, kernel, options, camera, samplingMode = Texture.BILINEAR_SAMPLINGMODE, engine, reusable, textureType = 0, defines = \"\", _blockCompilation = false, textureFormat = 5) {\n        super(name, \"kernelBlur\", [\"delta\", \"direction\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", { varyingCount: 0, depCount: 0 }, true, textureFormat);\n        this._blockCompilation = _blockCompilation;\n        this._packedFloat = false;\n        this._staticDefines = \"\";\n        this._staticDefines = defines;\n        this.direction = direction;\n        this.onApplyObservable.add((effect) => {\n            if (this._outputTexture) {\n                effect.setFloat2(\"delta\", (1 / this._outputTexture.width) * this.direction.x, (1 / this._outputTexture.height) * this.direction.y);\n            }\n            else {\n                effect.setFloat2(\"delta\", (1 / this.width) * this.direction.x, (1 / this.height) * this.direction.y);\n            }\n        });\n        this.kernel = kernel;\n    }\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     */\n    updateEffect(defines = null, uniforms = null, samplers = null, indexParameters, onCompiled, onError) {\n        this._updateParameters(onCompiled, onError);\n    }\n    _updateParameters(onCompiled, onError) {\n        // Generate sampling offsets and weights\n        const N = this._kernel;\n        const centerIndex = (N - 1) / 2;\n        // Generate Gaussian sampling weights over kernel\n        let offsets = [];\n        let weights = [];\n        let totalWeight = 0;\n        for (let i = 0; i < N; i++) {\n            const u = i / (N - 1);\n            const w = this._gaussianWeight(u * 2.0 - 1);\n            offsets[i] = i - centerIndex;\n            weights[i] = w;\n            totalWeight += w;\n        }\n        // Normalize weights\n        for (let i = 0; i < weights.length; i++) {\n            weights[i] /= totalWeight;\n        }\n        // Optimize: combine samples to take advantage of hardware linear sampling\n        // Walk from left to center, combining pairs (symmetrically)\n        const linearSamplingWeights = [];\n        const linearSamplingOffsets = [];\n        const linearSamplingMap = [];\n        for (let i = 0; i <= centerIndex; i += 2) {\n            const j = Math.min(i + 1, Math.floor(centerIndex));\n            const singleCenterSample = i === j;\n            if (singleCenterSample) {\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n            }\n            else {\n                const sharedCell = j === centerIndex;\n                const weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\n                const offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\n                if (offsetLinear === 0) {\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\n                }\n                else {\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\n                }\n            }\n        }\n        for (let i = 0; i < linearSamplingMap.length; i++) {\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\n        }\n        // Replace with optimized\n        offsets = linearSamplingOffsets;\n        weights = linearSamplingWeights;\n        // Generate shaders\n        const maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\n        const freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\n        let defines = \"\";\n        defines += this._staticDefines;\n        // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\r\\n`;\n            varyingCount--;\n        }\n        for (let i = 0; i < varyingCount; i++) {\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\r\\n`;\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\r\\n`;\n        }\n        let depCount = 0;\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\r\\n`;\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\r\\n`;\n            depCount++;\n        }\n        if (this.packedFloat) {\n            defines += `#define PACKEDFLOAT 1`;\n        }\n        this._blockCompilation = false;\n        super.updateEffect(defines, null, null, {\n            varyingCount: varyingCount,\n            depCount: depCount,\n        }, onCompiled, onError);\n    }\n    /**\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\n     * The gaps between physical kernels are compensated for in the weighting of the samples\n     * @param idealKernel Ideal blur kernel.\n     * @returns Nearest best kernel.\n     */\n    _nearestBestKernel(idealKernel) {\n        const v = Math.round(idealKernel);\n        for (const k of [v, v - 1, v + 1, v - 2, v + 2]) {\n            if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\n                return Math.max(k, 3);\n            }\n        }\n        return Math.max(v, 3);\n    }\n    /**\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\n     * @param x The point on the Gaussian distribution to sample.\n     * @returns the value of the Gaussian function at x.\n     */\n    _gaussianWeight(x) {\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\n        // truncated at around 1.3% of peak strength.\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\n        const sigma = 1 / 3;\n        const denominator = Math.sqrt(2.0 * Math.PI) * sigma;\n        const exponent = -((x * x) / (2.0 * sigma * sigma));\n        const weight = (1.0 / denominator) * Math.exp(exponent);\n        return weight;\n    }\n    /**\n     * Generates a string that can be used as a floating point number in GLSL.\n     * @param x Value to print.\n     * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\n     * @returns GLSL float string.\n     */\n    _glslFloat(x, decimalFigures = 8) {\n        return x.toFixed(decimalFigures).replace(/0+$/, \"\");\n    }\n    /**\n     * @internal\n     */\n    static _Parse(parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(() => {\n            return new BlurPostProcess(parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\n        }, parsedPostProcess, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize(\"kernel\")\n], BlurPostProcess.prototype, \"_kernel\", void 0);\n__decorate([\n    serialize(\"packedFloat\")\n], BlurPostProcess.prototype, \"_packedFloat\", void 0);\n__decorate([\n    serializeAsVector2()\n], BlurPostProcess.prototype, \"direction\", void 0);\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);\n//# sourceMappingURL=blurPostProcess.js.map","/**\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\n */\nexport class EffectFallbacks {\n    constructor() {\n        this._defines = {};\n        this._currentRank = 32;\n        this._maxRank = -1;\n        this._mesh = null;\n    }\n    /**\n     * Removes the fallback from the bound mesh.\n     */\n    unBindMesh() {\n        this._mesh = null;\n    }\n    /**\n     * Adds a fallback on the specified property.\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n     * @param define The name of the define in the shader\n     */\n    addFallback(rank, define) {\n        if (!this._defines[rank]) {\n            if (rank < this._currentRank) {\n                this._currentRank = rank;\n            }\n            if (rank > this._maxRank) {\n                this._maxRank = rank;\n            }\n            this._defines[rank] = new Array();\n        }\n        this._defines[rank].push(define);\n    }\n    /**\n     * Sets the mesh to use CPU skinning when needing to fallback.\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n     * @param mesh The mesh to use the fallbacks.\n     */\n    addCPUSkinningFallback(rank, mesh) {\n        this._mesh = mesh;\n        if (rank < this._currentRank) {\n            this._currentRank = rank;\n        }\n        if (rank > this._maxRank) {\n            this._maxRank = rank;\n        }\n    }\n    /**\n     * Checks to see if more fallbacks are still available.\n     */\n    get hasMoreFallbacks() {\n        return this._currentRank <= this._maxRank;\n    }\n    /**\n     * Removes the defines that should be removed when falling back.\n     * @param currentDefines defines the current define statements for the shader.\n     * @param effect defines the current effect we try to compile\n     * @returns The resulting defines with defines of the current rank removed.\n     */\n    reduce(currentDefines, effect) {\n        // First we try to switch to CPU skinning\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\n            this._mesh.computeBonesUsingShaders = false;\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\n            effect._bonesComputationForcedToCPU = true;\n            const scene = this._mesh.getScene();\n            for (let index = 0; index < scene.meshes.length; index++) {\n                const otherMesh = scene.meshes[index];\n                if (!otherMesh.material) {\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\n                        otherMesh.computeBonesUsingShaders = false;\n                    }\n                    continue;\n                }\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\n                    continue;\n                }\n                if (otherMesh.material.getEffect() === effect) {\n                    otherMesh.computeBonesUsingShaders = false;\n                }\n                else if (otherMesh.subMeshes) {\n                    for (const subMesh of otherMesh.subMeshes) {\n                        const subMeshEffect = subMesh.effect;\n                        if (subMeshEffect === effect) {\n                            otherMesh.computeBonesUsingShaders = false;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            const currentFallbacks = this._defines[this._currentRank];\n            if (currentFallbacks) {\n                for (let index = 0; index < currentFallbacks.length; index++) {\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\n                }\n            }\n            this._currentRank++;\n        }\n        return currentDefines;\n    }\n}\n//# sourceMappingURL=effectFallbacks.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"bayerDitherFunctions\";\nconst shader = `float bayerDither2(vec2 _P) {\rreturn mod(2.0*_P.y+_P.x+1.0,4.0);\r}\rfloat bayerDither4(vec2 _P) {\rvec2 P1=mod(_P,2.0); \rvec2 P2=floor(0.5*mod(_P,4.0)); \rreturn 4.0*bayerDither2(P1)+bayerDither2(P2);\r}\rfloat bayerDither8(vec2 _P) {\rvec2 P1=mod(_P,2.0); \rvec2 P2=floor(0.5 *mod(_P,4.0)); \rvec2 P4=floor(0.25*mod(_P,8.0)); \rreturn 4.0*(4.0*bayerDither2(P1)+bayerDither2(P2))+bayerDither2(P4);\r}\r`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bayerDitherFunctions = { name, shader };\n//# sourceMappingURL=bayerDitherFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nimport \"./packingFunctions.js\";\nimport \"./bayerDitherFunctions.js\";\nconst name = \"shadowMapFragmentExtraDeclaration\";\nconst shader = `#if SM_FLOAT==0\n#include<packingFunctions>\n#endif\n#if SM_SOFTTRANSPARENTSHADOW==1\n#include<bayerDitherFunctions>\nuniform float softTransparentShadowSM;\r#endif\nvarying float vDepthMetricSM;\r#if SM_USEDISTANCE==1\nuniform vec3 lightDataSM;\rvarying vec3 vPositionWSM;\r#endif\nuniform vec3 biasAndScaleSM;\runiform vec2 depthValuesSM;\r#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP==1\nvarying float zSM;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapFragmentExtraDeclaration = { name, shader };\n//# sourceMappingURL=shadowMapFragmentExtraDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"clipPlaneFragmentDeclaration\";\nconst shader = `#ifdef CLIPPLANE\nvarying float fClipDistance;\r#endif\n#ifdef CLIPPLANE2\nvarying float fClipDistance2;\r#endif\n#ifdef CLIPPLANE3\nvarying float fClipDistance3;\r#endif\n#ifdef CLIPPLANE4\nvarying float fClipDistance4;\r#endif\n#ifdef CLIPPLANE5\nvarying float fClipDistance5;\r#endif\n#ifdef CLIPPLANE6\nvarying float fClipDistance6;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const clipPlaneFragmentDeclaration = { name, shader };\n//# sourceMappingURL=clipPlaneFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"clipPlaneFragment\";\nconst shader = `#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\nif (false) {}\r#endif\n#ifdef CLIPPLANE\nelse if (fClipDistance>0.0)\r{\rdiscard;\r}\r#endif\n#ifdef CLIPPLANE2\nelse if (fClipDistance2>0.0)\r{\rdiscard;\r}\r#endif\n#ifdef CLIPPLANE3\nelse if (fClipDistance3>0.0)\r{\rdiscard;\r}\r#endif\n#ifdef CLIPPLANE4\nelse if (fClipDistance4>0.0)\r{\rdiscard;\r}\r#endif\n#ifdef CLIPPLANE5\nelse if (fClipDistance5>0.0)\r{\rdiscard;\r}\r#endif\n#ifdef CLIPPLANE6\nelse if (fClipDistance6>0.0)\r{\rdiscard;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const clipPlaneFragment = { name, shader };\n//# sourceMappingURL=clipPlaneFragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"shadowMapFragment\";\nconst shader = `float depthSM=vDepthMetricSM;\r#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP==1\n#if SM_USEDISTANCE==1\ndepthSM=(length(vPositionWSM-lightDataSM)+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\r#else\n#ifdef USE_REVERSE_DEPTHBUFFER\ndepthSM=(-zSM+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\r#else\ndepthSM=(zSM+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\r#endif\n#endif\n#ifdef USE_REVERSE_DEPTHBUFFER\ngl_FragDepth=clamp(1.0-depthSM,0.0,1.0);\r#else\ngl_FragDepth=clamp(depthSM,0.0,1.0); \r#endif\n#elif SM_USEDISTANCE==1\ndepthSM=(length(vPositionWSM-lightDataSM)+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\r#endif\n#if SM_ESM==1\ndepthSM=clamp(exp(-min(87.,biasAndScaleSM.z*depthSM)),0.,1.);\r#endif\n#if SM_FLOAT==1\ngl_FragColor=vec4(depthSM,1.0,1.0,1.0);\r#else\ngl_FragColor=pack(depthSM);\r#endif\nreturn;`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapFragment = { name, shader };\n//# sourceMappingURL=shadowMapFragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/shadowMapFragmentExtraDeclaration.js\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration.js\";\nimport \"./ShadersInclude/clipPlaneFragment.js\";\nimport \"./ShadersInclude/shadowMapFragment.js\";\nconst name = \"shadowMapPixelShader\";\nconst shader = `#include<shadowMapFragmentExtraDeclaration>\n#ifdef ALPHATEXTURE\nvarying vec2 vUV;\runiform sampler2D diffuseSampler;\r#endif\n#include<clipPlaneFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\r#include<clipPlaneFragment>\n#ifdef ALPHATEXTURE\nfloat alphaFromAlphaTexture=texture2D(diffuseSampler,vUV).a;\r#ifdef ALPHATESTVALUE\nif (alphaFromAlphaTexture<ALPHATESTVALUE)\rdiscard;\r#endif\n#endif\n#if SM_SOFTTRANSPARENTSHADOW==1\n#ifdef ALPHATEXTURE\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM*alphaFromAlphaTexture) discard;\r#else\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM) discard;\r#endif\n#endif\n#include<shadowMapFragment>\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapPixelShader = { name, shader };\n//# sourceMappingURL=shadowMap.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"bonesDeclaration\";\nconst shader = `#if NUM_BONE_INFLUENCERS>0\nattribute vec4 matricesIndices;\rattribute vec4 matricesWeights;\r#if NUM_BONE_INFLUENCERS>4\nattribute vec4 matricesIndicesExtra;\rattribute vec4 matricesWeightsExtra;\r#endif\n#ifndef BAKED_VERTEX_ANIMATION_TEXTURE\n#ifdef BONETEXTURE\nuniform sampler2D boneSampler;\runiform float boneTextureWidth;\r#else\nuniform mat4 mBones[BonesPerMesh];\r#ifdef BONES_VELOCITY_ENABLED\nuniform mat4 mPreviousBones[BonesPerMesh];\r#endif\n#endif\n#ifdef BONETEXTURE\n#define inline\nmat4 readMatrixFromRawSampler(sampler2D smp,float index)\r{\rfloat offset=index *4.0;\rfloat dx=1.0/boneTextureWidth;\rvec4 m0=texture2D(smp,vec2(dx*(offset+0.5),0.));\rvec4 m1=texture2D(smp,vec2(dx*(offset+1.5),0.));\rvec4 m2=texture2D(smp,vec2(dx*(offset+2.5),0.));\rvec4 m3=texture2D(smp,vec2(dx*(offset+3.5),0.));\rreturn mat4(m0,m1,m2,m3);\r}\r#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bonesDeclaration = { name, shader };\n//# sourceMappingURL=bonesDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"bakedVertexAnimationDeclaration\";\nconst shader = `#ifdef BAKED_VERTEX_ANIMATION_TEXTURE\nuniform float bakedVertexAnimationTime;\runiform vec2 bakedVertexAnimationTextureSizeInverted;\runiform vec4 bakedVertexAnimationSettings;\runiform sampler2D bakedVertexAnimationTexture;\r#ifdef INSTANCES\nattribute vec4 bakedVertexAnimationSettingsInstanced;\r#endif\n#define inline\nmat4 readMatrixFromRawSamplerVAT(sampler2D smp,float index,float frame)\r{\rfloat offset=index*4.0;\rfloat frameUV=(frame+0.5)*bakedVertexAnimationTextureSizeInverted.y;\rfloat dx=bakedVertexAnimationTextureSizeInverted.x;\rvec4 m0=texture2D(smp,vec2(dx*(offset+0.5),frameUV));\rvec4 m1=texture2D(smp,vec2(dx*(offset+1.5),frameUV));\rvec4 m2=texture2D(smp,vec2(dx*(offset+2.5),frameUV));\rvec4 m3=texture2D(smp,vec2(dx*(offset+3.5),frameUV));\rreturn mat4(m0,m1,m2,m3);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bakedVertexAnimationDeclaration = { name, shader };\n//# sourceMappingURL=bakedVertexAnimationDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"helperFunctions\";\nconst shader = `const float PI=3.1415926535897932384626433832795;\rconst float HALF_MIN=5.96046448e-08; \rconst float LinearEncodePowerApprox=2.2;\rconst float GammaEncodePowerApprox=1.0/LinearEncodePowerApprox;\rconst vec3 LuminanceEncodeApprox=vec3(0.2126,0.7152,0.0722);\rconst float Epsilon=0.0000001;\r#define saturate(x) clamp(x,0.0,1.0)\n#define absEps(x) abs(x)+Epsilon\n#define maxEps(x) max(x,Epsilon)\n#define saturateEps(x) clamp(x,Epsilon,1.0)\nmat3 transposeMat3(mat3 inMatrix) {\rvec3 i0=inMatrix[0];\rvec3 i1=inMatrix[1];\rvec3 i2=inMatrix[2];\rmat3 outMatrix=mat3(\rvec3(i0.x,i1.x,i2.x),\rvec3(i0.y,i1.y,i2.y),\rvec3(i0.z,i1.z,i2.z)\r);\rreturn outMatrix;\r}\rmat3 inverseMat3(mat3 inMatrix) {\rfloat a00=inMatrix[0][0],a01=inMatrix[0][1],a02=inMatrix[0][2];\rfloat a10=inMatrix[1][0],a11=inMatrix[1][1],a12=inMatrix[1][2];\rfloat a20=inMatrix[2][0],a21=inMatrix[2][1],a22=inMatrix[2][2];\rfloat b01=a22*a11-a12*a21;\rfloat b11=-a22*a10+a12*a20;\rfloat b21=a21*a10-a11*a20;\rfloat det=a00*b01+a01*b11+a02*b21;\rreturn mat3(b01,(-a22*a01+a02*a21),(a12*a01-a02*a11),\rb11,(a22*a00-a02*a20),(-a12*a00+a02*a10),\rb21,(-a21*a00+a01*a20),(a11*a00-a01*a10))/det;\r}\r#if USE_EXACT_SRGB_CONVERSIONS\nvec3 toLinearSpaceExact(vec3 color)\r{\rvec3 nearZeroSection=0.0773993808*color;\rvec3 remainingSection=pow(0.947867299*(color+vec3(0.055)),vec3(2.4));\r#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nreturn mix(remainingSection,nearZeroSection,lessThanEqual(color,vec3(0.04045)));\r#else\nreturn\rvec3(\rcolor.r<=0.04045 ? nearZeroSection.r : remainingSection.r,\rcolor.g<=0.04045 ? nearZeroSection.g : remainingSection.g,\rcolor.b<=0.04045 ? nearZeroSection.b : remainingSection.b);\r#endif\n}\rvec3 toGammaSpaceExact(vec3 color)\r{\rvec3 nearZeroSection=12.92*color;\rvec3 remainingSection=1.055*pow(color,vec3(0.41666))-vec3(0.055);\r#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\nreturn mix(remainingSection,nearZeroSection,lessThanEqual(color,vec3(0.0031308)));\r#else\nreturn\rvec3(\rcolor.r<=0.0031308 ? nearZeroSection.r : remainingSection.r,\rcolor.g<=0.0031308 ? nearZeroSection.g : remainingSection.g,\rcolor.b<=0.0031308 ? nearZeroSection.b : remainingSection.b);\r#endif\n}\r#endif\nfloat toLinearSpace(float color)\r{\r#if USE_EXACT_SRGB_CONVERSIONS\nfloat nearZeroSection=0.0773993808*color;\rfloat remainingSection=pow(0.947867299*(color+0.055),2.4);\rreturn color<=0.04045 ? nearZeroSection : remainingSection;\r#else\nreturn pow(color,LinearEncodePowerApprox);\r#endif\n}\rvec3 toLinearSpace(vec3 color)\r{\r#if USE_EXACT_SRGB_CONVERSIONS\nreturn toLinearSpaceExact(color);\r#else\nreturn pow(color,vec3(LinearEncodePowerApprox));\r#endif\n}\rvec4 toLinearSpace(vec4 color)\r{\r#if USE_EXACT_SRGB_CONVERSIONS\nreturn vec4(toLinearSpaceExact(color.rgb),color.a);\r#else\nreturn vec4(pow(color.rgb,vec3(LinearEncodePowerApprox)),color.a);\r#endif\n}\rfloat toGammaSpace(float color)\r{\r#if USE_EXACT_SRGB_CONVERSIONS\nfloat nearZeroSection=12.92*color;\rfloat remainingSection=1.055*pow(color,0.41666)-0.055;\rreturn color<=0.0031308 ? nearZeroSection : remainingSection;\r#else\nreturn pow(color,GammaEncodePowerApprox);\r#endif\n}\rvec3 toGammaSpace(vec3 color)\r{\r#if USE_EXACT_SRGB_CONVERSIONS\nreturn toGammaSpaceExact(color);\r#else\nreturn pow(color,vec3(GammaEncodePowerApprox));\r#endif\n}\rvec4 toGammaSpace(vec4 color)\r{\r#if USE_EXACT_SRGB_CONVERSIONS\nreturn vec4(toGammaSpaceExact(color.rgb),color.a);\r#else\nreturn vec4(pow(color.rgb,vec3(GammaEncodePowerApprox)),color.a);\r#endif\n}\rfloat square(float value)\r{\rreturn value*value;\r}\rvec3 square(vec3 value)\r{\rreturn value*value;\r}\rfloat pow5(float value) {\rfloat sq=value*value;\rreturn sq*sq*value;\r}\rfloat getLuminance(vec3 color)\r{\rreturn clamp(dot(color,LuminanceEncodeApprox),0.,1.);\r}\rfloat getRand(vec2 seed) {\rreturn fract(sin(dot(seed.xy ,vec2(12.9898,78.233)))*43758.5453);\r}\rfloat dither(vec2 seed,float varianceAmount) {\rfloat rand=getRand(seed);\rfloat normVariance=varianceAmount/255.0;\rfloat dither=mix(-normVariance,normVariance,rand);\rreturn dither;\r}\rconst float rgbdMaxRange=255.0;\rvec4 toRGBD(vec3 color) {\rfloat maxRGB=maxEps(max(color.r,max(color.g,color.b)));\rfloat D =max(rgbdMaxRange/maxRGB,1.);\rD =clamp(floor(D)/255.0,0.,1.);\rvec3 rgb=color.rgb*D;\rrgb=toGammaSpace(rgb);\rreturn vec4(clamp(rgb,0.,1.),D); \r}\rvec3 fromRGBD(vec4 rgbd) {\rrgbd.rgb=toLinearSpace(rgbd.rgb);\rreturn rgbd.rgb/rgbd.a;\r}\rvec3 parallaxCorrectNormal( vec3 vertexPos,vec3 origVec,vec3 cubeSize,vec3 cubePos ) {\rvec3 invOrigVec=vec3(1.0,1.0,1.0)/origVec;\rvec3 halfSize=cubeSize*0.5;\rvec3 intersecAtMaxPlane=(cubePos+halfSize-vertexPos)*invOrigVec;\rvec3 intersecAtMinPlane=(cubePos-halfSize-vertexPos)*invOrigVec;\rvec3 largestIntersec=max(intersecAtMaxPlane,intersecAtMinPlane);\rfloat distance=min(min(largestIntersec.x,largestIntersec.y),largestIntersec.z);\rvec3 intersectPositionWS=vertexPos+origVec*distance;\rreturn intersectPositionWS-cubePos;\r}\r`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const helperFunctions = { name, shader };\n//# sourceMappingURL=helperFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"meshVertexDeclaration\";\nconst shader = `uniform mat4 world;\runiform float visibility;\r`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const meshVertexDeclaration = { name, shader };\n//# sourceMappingURL=meshVertexDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nimport \"./sceneUboDeclaration.js\";\nimport \"./meshUboDeclaration.js\";\nconst name = \"shadowMapUboDeclaration\";\nconst shader = `layout(std140,column_major) uniform;\r#include<sceneUboDeclaration>\n#include<meshUboDeclaration>\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapUboDeclaration = { name, shader };\n//# sourceMappingURL=shadowMapUboDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"morphTargetsVertexGlobal\";\nconst shader = `#ifdef MORPHTARGETS\n#ifdef MORPHTARGETS_TEXTURE\nfloat vertexID;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const morphTargetsVertexGlobal = { name, shader };\n//# sourceMappingURL=morphTargetsVertexGlobal.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"morphTargetsVertex\";\nconst shader = `#ifdef MORPHTARGETS\n#ifdef MORPHTARGETS_TEXTURE \nvertexID=float(gl_VertexID)*morphTargetTextureInfo.x;\rpositionUpdated+=(readVector3FromRawSampler({X},vertexID)-position)*morphTargetInfluences[{X}];\rvertexID+=1.0;\r#ifdef MORPHTARGETS_NORMAL\nnormalUpdated+=(readVector3FromRawSampler({X},vertexID) -normal)*morphTargetInfluences[{X}];\rvertexID+=1.0;\r#endif\n#ifdef MORPHTARGETS_UV\nuvUpdated+=(readVector3FromRawSampler({X},vertexID).xy-uv)*morphTargetInfluences[{X}];\rvertexID+=1.0;\r#endif\n#ifdef MORPHTARGETS_TANGENT\ntangentUpdated.xyz+=(readVector3FromRawSampler({X},vertexID) -tangent.xyz)*morphTargetInfluences[{X}];\r#endif\n#else\npositionUpdated+=(position{X}-position)*morphTargetInfluences[{X}];\r#ifdef MORPHTARGETS_NORMAL\nnormalUpdated+=(normal{X}-normal)*morphTargetInfluences[{X}];\r#endif\n#ifdef MORPHTARGETS_TANGENT\ntangentUpdated.xyz+=(tangent{X}-tangent.xyz)*morphTargetInfluences[{X}];\r#endif\n#ifdef MORPHTARGETS_UV\nuvUpdated+=(uv_{X}-uv)*morphTargetInfluences[{X}];\r#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const morphTargetsVertex = { name, shader };\n//# sourceMappingURL=morphTargetsVertex.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"instancesVertex\";\nconst shader = `#ifdef INSTANCES\nmat4 finalWorld=mat4(world0,world1,world2,world3);\r#if defined(PREPASS_VELOCITY) || defined(VELOCITY)\nmat4 finalPreviousWorld=mat4(previousWorld0,previousWorld1,previousWorld2,previousWorld3);\r#endif\n#ifdef THIN_INSTANCES\nfinalWorld=world*finalWorld;\r#if defined(PREPASS_VELOCITY) || defined(VELOCITY)\nfinalPreviousWorld=previousWorld*finalPreviousWorld;\r#endif\n#endif\n#else\nmat4 finalWorld=world;\r#if defined(PREPASS_VELOCITY) || defined(VELOCITY)\nmat4 finalPreviousWorld=previousWorld;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const instancesVertex = { name, shader };\n//# sourceMappingURL=instancesVertex.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"bonesVertex\";\nconst shader = `#ifndef BAKED_VERTEX_ANIMATION_TEXTURE\n#if NUM_BONE_INFLUENCERS>0\nmat4 influence;\r#ifdef BONETEXTURE\ninfluence=readMatrixFromRawSampler(boneSampler,matricesIndices[0])*matricesWeights[0];\r#if NUM_BONE_INFLUENCERS>1\ninfluence+=readMatrixFromRawSampler(boneSampler,matricesIndices[1])*matricesWeights[1];\r#endif\n#if NUM_BONE_INFLUENCERS>2\ninfluence+=readMatrixFromRawSampler(boneSampler,matricesIndices[2])*matricesWeights[2];\r#endif\n#if NUM_BONE_INFLUENCERS>3\ninfluence+=readMatrixFromRawSampler(boneSampler,matricesIndices[3])*matricesWeights[3];\r#endif\n#if NUM_BONE_INFLUENCERS>4\ninfluence+=readMatrixFromRawSampler(boneSampler,matricesIndicesExtra[0])*matricesWeightsExtra[0];\r#endif\n#if NUM_BONE_INFLUENCERS>5\ninfluence+=readMatrixFromRawSampler(boneSampler,matricesIndicesExtra[1])*matricesWeightsExtra[1];\r#endif\n#if NUM_BONE_INFLUENCERS>6\ninfluence+=readMatrixFromRawSampler(boneSampler,matricesIndicesExtra[2])*matricesWeightsExtra[2];\r#endif\n#if NUM_BONE_INFLUENCERS>7\ninfluence+=readMatrixFromRawSampler(boneSampler,matricesIndicesExtra[3])*matricesWeightsExtra[3];\r#endif\n#else\ninfluence=mBones[int(matricesIndices[0])]*matricesWeights[0];\r#if NUM_BONE_INFLUENCERS>1\ninfluence+=mBones[int(matricesIndices[1])]*matricesWeights[1];\r#endif\n#if NUM_BONE_INFLUENCERS>2\ninfluence+=mBones[int(matricesIndices[2])]*matricesWeights[2];\r#endif\n#if NUM_BONE_INFLUENCERS>3\ninfluence+=mBones[int(matricesIndices[3])]*matricesWeights[3];\r#endif\n#if NUM_BONE_INFLUENCERS>4\ninfluence+=mBones[int(matricesIndicesExtra[0])]*matricesWeightsExtra[0];\r#endif\n#if NUM_BONE_INFLUENCERS>5\ninfluence+=mBones[int(matricesIndicesExtra[1])]*matricesWeightsExtra[1];\r#endif\n#if NUM_BONE_INFLUENCERS>6\ninfluence+=mBones[int(matricesIndicesExtra[2])]*matricesWeightsExtra[2];\r#endif\n#if NUM_BONE_INFLUENCERS>7\ninfluence+=mBones[int(matricesIndicesExtra[3])]*matricesWeightsExtra[3];\r#endif\n#endif\nfinalWorld=finalWorld*influence;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bonesVertex = { name, shader };\n//# sourceMappingURL=bonesVertex.js.map","import { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Color4 } from \"../../Maths/math.color.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { Light } from \"../../Lights/light.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture.js\";\nimport { PostProcess } from \"../../PostProcesses/postProcess.js\";\nimport { BlurPostProcess } from \"../../PostProcesses/blurPostProcess.js\";\n\nimport { Observable } from \"../../Misc/observable.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\nimport { EffectFallbacks } from \"../../Materials/effectFallbacks.js\";\nimport { RenderingManager } from \"../../Rendering/renderingManager.js\";\nimport { DrawWrapper } from \"../../Materials/drawWrapper.js\";\nimport \"../../Shaders/shadowMap.fragment.js\";\nimport \"../../Shaders/shadowMap.vertex.js\";\nimport \"../../Shaders/depthBoxBlur.fragment.js\";\nimport \"../../Shaders/ShadersInclude/shadowMapFragmentSoftTransparentShadow.js\";\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"../../Materials/clipPlaneMaterialHelper.js\";\n/**\n * Default implementation IShadowGenerator.\n * This is the main object responsible of generating shadows in the framework.\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\n */\nexport class ShadowGenerator {\n    /**\n     * Gets the bias: offset applied on the depth preventing acnea (in light direction).\n     */\n    get bias() {\n        return this._bias;\n    }\n    /**\n     * Sets the bias: offset applied on the depth preventing acnea (in light direction).\n     */\n    set bias(bias) {\n        this._bias = bias;\n    }\n    /**\n     * Gets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\n     */\n    get normalBias() {\n        return this._normalBias;\n    }\n    /**\n     * Sets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\n     */\n    set normalBias(normalBias) {\n        this._normalBias = normalBias;\n    }\n    /**\n     * Gets the blur box offset: offset applied during the blur pass.\n     * Only useful if useKernelBlur = false\n     */\n    get blurBoxOffset() {\n        return this._blurBoxOffset;\n    }\n    /**\n     * Sets the blur box offset: offset applied during the blur pass.\n     * Only useful if useKernelBlur = false\n     */\n    set blurBoxOffset(value) {\n        if (this._blurBoxOffset === value) {\n            return;\n        }\n        this._blurBoxOffset = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets the blur scale: scale of the blurred texture compared to the main shadow map.\n     * 2 means half of the size.\n     */\n    get blurScale() {\n        return this._blurScale;\n    }\n    /**\n     * Sets the blur scale: scale of the blurred texture compared to the main shadow map.\n     * 2 means half of the size.\n     */\n    set blurScale(value) {\n        if (this._blurScale === value) {\n            return;\n        }\n        this._blurScale = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets the blur kernel: kernel size of the blur pass.\n     * Only useful if useKernelBlur = true\n     */\n    get blurKernel() {\n        return this._blurKernel;\n    }\n    /**\n     * Sets the blur kernel: kernel size of the blur pass.\n     * Only useful if useKernelBlur = true\n     */\n    set blurKernel(value) {\n        if (this._blurKernel === value) {\n            return;\n        }\n        this._blurKernel = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets whether the blur pass is a kernel blur (if true) or box blur.\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\n     */\n    get useKernelBlur() {\n        return this._useKernelBlur;\n    }\n    /**\n     * Sets whether the blur pass is a kernel blur (if true) or box blur.\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\n     */\n    set useKernelBlur(value) {\n        if (this._useKernelBlur === value) {\n            return;\n        }\n        this._useKernelBlur = value;\n        this._disposeBlurPostProcesses();\n    }\n    /**\n     * Gets the depth scale used in ESM mode.\n     */\n    get depthScale() {\n        return this._depthScale !== undefined ? this._depthScale : this._light.getDepthScale();\n    }\n    /**\n     * Sets the depth scale used in ESM mode.\n     * This can override the scale stored on the light.\n     */\n    set depthScale(value) {\n        this._depthScale = value;\n    }\n    _validateFilter(filter) {\n        return filter;\n    }\n    /**\n     * Gets the current mode of the shadow generator (normal, PCF, ESM...).\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\n     */\n    get filter() {\n        return this._filter;\n    }\n    /**\n     * Sets the current mode of the shadow generator (normal, PCF, ESM...).\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\n     */\n    set filter(value) {\n        value = this._validateFilter(value);\n        // Blurring the cubemap is going to be too expensive. Reverting to unblurred version\n        if (this._light.needCube()) {\n            if (value === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\n                this.useExponentialShadowMap = true;\n                return;\n            }\n            else if (value === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\n                this.useCloseExponentialShadowMap = true;\n                return;\n            }\n            // PCF on cubemap would also be expensive\n            else if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\n                this.usePoissonSampling = true;\n                return;\n            }\n        }\n        // Weblg1 fallback for PCF.\n        if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\n            if (!this._scene.getEngine()._features.supportShadowSamplers) {\n                this.usePoissonSampling = true;\n                return;\n            }\n        }\n        if (this._filter === value) {\n            return;\n        }\n        this._filter = value;\n        this._disposeBlurPostProcesses();\n        this._applyFilterValues();\n        this._light._markMeshesAsLightDirty();\n    }\n    /**\n     * Gets if the current filter is set to Poisson Sampling.\n     */\n    get usePoissonSampling() {\n        return this.filter === ShadowGenerator.FILTER_POISSONSAMPLING;\n    }\n    /**\n     * Sets the current filter to Poisson Sampling.\n     */\n    set usePoissonSampling(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_POISSONSAMPLING);\n        if (!value && this.filter !== ShadowGenerator.FILTER_POISSONSAMPLING) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to ESM.\n     */\n    get useExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Sets the current filter is to ESM.\n     */\n    set useExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to filtered ESM.\n     */\n    get useBlurExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Gets if the current filter is set to filtered  ESM.\n     */\n    set useBlurExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    get useCloseExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Sets the current filter to \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    set useCloseExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to filtered \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    get useBlurCloseExponentialShadowMap() {\n        return this.filter === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP;\n    }\n    /**\n     * Sets the current filter to filtered \"close ESM\" (using the inverse of the\n     * exponential to prevent steep falloff artifacts).\n     */\n    set useBlurCloseExponentialShadowMap(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP);\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets if the current filter is set to \"PCF\" (percentage closer filtering).\n     */\n    get usePercentageCloserFiltering() {\n        return this.filter === ShadowGenerator.FILTER_PCF;\n    }\n    /**\n     * Sets the current filter to \"PCF\" (percentage closer filtering).\n     */\n    set usePercentageCloserFiltering(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCF);\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCF) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets the PCF or PCSS Quality.\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\n     */\n    get filteringQuality() {\n        return this._filteringQuality;\n    }\n    /**\n     * Sets the PCF or PCSS Quality.\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\n     */\n    set filteringQuality(filteringQuality) {\n        if (this._filteringQuality === filteringQuality) {\n            return;\n        }\n        this._filteringQuality = filteringQuality;\n        this._disposeBlurPostProcesses();\n        this._applyFilterValues();\n        this._light._markMeshesAsLightDirty();\n    }\n    /**\n     * Gets if the current filter is set to \"PCSS\" (contact hardening).\n     */\n    get useContactHardeningShadow() {\n        return this.filter === ShadowGenerator.FILTER_PCSS;\n    }\n    /**\n     * Sets the current filter to \"PCSS\" (contact hardening).\n     */\n    set useContactHardeningShadow(value) {\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCSS);\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCSS) {\n            return;\n        }\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\n     * Using a ratio helps keeping shape stability independently of the map size.\n     *\n     * It does not account for the light projection as it was having too much\n     * instability during the light setup or during light position changes.\n     *\n     * Only valid if useContactHardeningShadow is true.\n     */\n    get contactHardeningLightSizeUVRatio() {\n        return this._contactHardeningLightSizeUVRatio;\n    }\n    /**\n     * Sets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\n     * Using a ratio helps keeping shape stability independently of the map size.\n     *\n     * It does not account for the light projection as it was having too much\n     * instability during the light setup or during light position changes.\n     *\n     * Only valid if useContactHardeningShadow is true.\n     */\n    set contactHardeningLightSizeUVRatio(contactHardeningLightSizeUVRatio) {\n        this._contactHardeningLightSizeUVRatio = contactHardeningLightSizeUVRatio;\n    }\n    /** Gets or sets the actual darkness of a shadow */\n    get darkness() {\n        return this._darkness;\n    }\n    set darkness(value) {\n        this.setDarkness(value);\n    }\n    /**\n     * Returns the darkness value (float). This can only decrease the actual darkness of a shadow.\n     * 0 means strongest and 1 would means no shadow.\n     * @returns the darkness.\n     */\n    getDarkness() {\n        return this._darkness;\n    }\n    /**\n     * Sets the darkness value (float). This can only decrease the actual darkness of a shadow.\n     * @param darkness The darkness value 0 means strongest and 1 would means no shadow.\n     * @returns the shadow generator allowing fluent coding.\n     */\n    setDarkness(darkness) {\n        if (darkness >= 1.0) {\n            this._darkness = 1.0;\n        }\n        else if (darkness <= 0.0) {\n            this._darkness = 0.0;\n        }\n        else {\n            this._darkness = darkness;\n        }\n        return this;\n    }\n    /** Gets or sets the ability to have transparent shadow  */\n    get transparencyShadow() {\n        return this._transparencyShadow;\n    }\n    set transparencyShadow(value) {\n        this.setTransparencyShadow(value);\n    }\n    /**\n     * Sets the ability to have transparent shadow (boolean).\n     * @param transparent True if transparent else False\n     * @returns the shadow generator allowing fluent coding\n     */\n    setTransparencyShadow(transparent) {\n        this._transparencyShadow = transparent;\n        return this;\n    }\n    /**\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\n     * @returns The render target texture if present otherwise, null\n     */\n    getShadowMap() {\n        return this._shadowMap;\n    }\n    /**\n     * Gets the RTT used during rendering (can be a blurred version of the shadow map or the shadow map itself).\n     * @returns The render target texture if the shadow map is present otherwise, null\n     */\n    getShadowMapForRendering() {\n        if (this._shadowMap2) {\n            return this._shadowMap2;\n        }\n        return this._shadowMap;\n    }\n    /**\n     * Gets the class name of that object\n     * @returns \"ShadowGenerator\"\n     */\n    getClassName() {\n        return ShadowGenerator.CLASSNAME;\n    }\n    /**\n     * Helper function to add a mesh and its descendants to the list of shadow casters.\n     * @param mesh Mesh to add\n     * @param includeDescendants boolean indicating if the descendants should be added. Default to true\n     * @returns the Shadow Generator itself\n     */\n    addShadowCaster(mesh, includeDescendants = true) {\n        if (!this._shadowMap) {\n            return this;\n        }\n        if (!this._shadowMap.renderList) {\n            this._shadowMap.renderList = [];\n        }\n        if (this._shadowMap.renderList.indexOf(mesh) === -1) {\n            this._shadowMap.renderList.push(mesh);\n        }\n        if (includeDescendants) {\n            for (const childMesh of mesh.getChildMeshes()) {\n                if (this._shadowMap.renderList.indexOf(childMesh) === -1) {\n                    this._shadowMap.renderList.push(childMesh);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Helper function to remove a mesh and its descendants from the list of shadow casters\n     * @param mesh Mesh to remove\n     * @param includeDescendants boolean indicating if the descendants should be removed. Default to true\n     * @returns the Shadow Generator itself\n     */\n    removeShadowCaster(mesh, includeDescendants = true) {\n        if (!this._shadowMap || !this._shadowMap.renderList) {\n            return this;\n        }\n        const index = this._shadowMap.renderList.indexOf(mesh);\n        if (index !== -1) {\n            this._shadowMap.renderList.splice(index, 1);\n        }\n        if (includeDescendants) {\n            for (const child of mesh.getChildren()) {\n                this.removeShadowCaster(child);\n            }\n        }\n        return this;\n    }\n    /**\n     * Returns the associated light object.\n     * @returns the light generating the shadow\n     */\n    getLight() {\n        return this._light;\n    }\n    _getCamera() {\n        var _a;\n        return (_a = this._camera) !== null && _a !== void 0 ? _a : this._scene.activeCamera;\n    }\n    /**\n     * Gets or sets the size of the texture what stores the shadows\n     */\n    get mapSize() {\n        return this._mapSize;\n    }\n    set mapSize(size) {\n        this._mapSize = size;\n        this._light._markMeshesAsLightDirty();\n        this.recreateShadowMap();\n    }\n    /**\n     * Creates a ShadowGenerator object.\n     * A ShadowGenerator is the required tool to use the shadows.\n     * Each light casting shadows needs to use its own ShadowGenerator.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\n     * @param light The light object generating the shadows.\n     * @param usefullFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\n     * @param camera Camera associated with this shadow generator (default: null). If null, takes the scene active camera at the time we need to access it\n     */\n    constructor(mapSize, light, usefullFloatFirst, camera) {\n        /**\n         * Observable triggered before the shadow is rendered. Can be used to update internal effect state\n         */\n        this.onBeforeShadowMapRenderObservable = new Observable();\n        /**\n         * Observable triggered after the shadow is rendered. Can be used to restore internal effect state\n         */\n        this.onAfterShadowMapRenderObservable = new Observable();\n        /**\n         * Observable triggered before a mesh is rendered in the shadow map.\n         * Can be used to update internal effect state (that you can get from the onBeforeShadowMapRenderObservable)\n         */\n        this.onBeforeShadowMapRenderMeshObservable = new Observable();\n        /**\n         * Observable triggered after a mesh is rendered in the shadow map.\n         * Can be used to update internal effect state (that you can get from the onAfterShadowMapRenderObservable)\n         */\n        this.onAfterShadowMapRenderMeshObservable = new Observable();\n        this._bias = 0.00005;\n        this._normalBias = 0;\n        this._blurBoxOffset = 1;\n        this._blurScale = 2;\n        this._blurKernel = 1;\n        this._useKernelBlur = false;\n        this._filter = ShadowGenerator.FILTER_NONE;\n        this._filteringQuality = ShadowGenerator.QUALITY_HIGH;\n        this._contactHardeningLightSizeUVRatio = 0.1;\n        this._darkness = 0;\n        this._transparencyShadow = false;\n        /**\n         * Enables or disables shadows with varying strength based on the transparency\n         * When it is enabled, the strength of the shadow is taken equal to mesh.visibility\n         * If you enabled an alpha texture on your material, the alpha value red from the texture is also combined to compute the strength:\n         *          mesh.visibility * alphaTexture.a\n         * The texture used is the diffuse by default, but it can be set to the opacity by setting useOpacityTextureForTransparentShadow\n         * Note that by definition transparencyShadow must be set to true for enableSoftTransparentShadow to work!\n         */\n        this.enableSoftTransparentShadow = false;\n        /**\n         * If this is true, use the opacity texture's alpha channel for transparent shadows instead of the diffuse one\n         */\n        this.useOpacityTextureForTransparentShadow = false;\n        /**\n         * Controls the extent to which the shadows fade out at the edge of the frustum\n         */\n        this.frustumEdgeFalloff = 0;\n        /**\n         * If true the shadow map is generated by rendering the back face of the mesh instead of the front face.\n         * This can help with self-shadowing as the geometry making up the back of objects is slightly offset.\n         * It might on the other hand introduce peter panning.\n         */\n        this.forceBackFacesOnly = false;\n        this._lightDirection = Vector3.Zero();\n        this._viewMatrix = Matrix.Zero();\n        this._projectionMatrix = Matrix.Zero();\n        this._transformMatrix = Matrix.Zero();\n        this._cachedPosition = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cachedDirection = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._currentFaceIndex = 0;\n        this._currentFaceIndexCache = 0;\n        this._defaultTextureMatrix = Matrix.Identity();\n        this._mapSize = mapSize;\n        this._light = light;\n        this._scene = light.getScene();\n        this._camera = camera !== null && camera !== void 0 ? camera : null;\n        let shadowGenerators = light._shadowGenerators;\n        if (!shadowGenerators) {\n            shadowGenerators = light._shadowGenerators = new Map();\n        }\n        shadowGenerators.set(this._camera, this);\n        this.id = light.id;\n        this._useUBO = this._scene.getEngine().supportsUniformBuffers;\n        if (this._useUBO) {\n            this._sceneUBOs = [];\n            this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for Shadow Generator (light \"${this._light.name}\")`));\n        }\n        ShadowGenerator._SceneComponentInitialization(this._scene);\n        // Texture type fallback from float to int if not supported.\n        const caps = this._scene.getEngine().getCaps();\n        if (!usefullFloatFirst) {\n            if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\n                this._textureType = 2;\n            }\n            else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\n                this._textureType = 1;\n            }\n            else {\n                this._textureType = 0;\n            }\n        }\n        else {\n            if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\n                this._textureType = 1;\n            }\n            else if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\n                this._textureType = 2;\n            }\n            else {\n                this._textureType = 0;\n            }\n        }\n        this._initializeGenerator();\n        this._applyFilterValues();\n    }\n    _initializeGenerator() {\n        this._light._markMeshesAsLightDirty();\n        this._initializeShadowMap();\n    }\n    _createTargetRenderTexture() {\n        const engine = this._scene.getEngine();\n        if (engine._features.supportDepthStencilTexture) {\n            this._shadowMap = new RenderTargetTexture(this._light.name + \"_shadowMap\", this._mapSize, this._scene, false, true, this._textureType, this._light.needCube(), undefined, false, false);\n            this._shadowMap.createDepthStencilTexture(engine.useReverseDepthBuffer ? 516 : 513, true);\n        }\n        else {\n            this._shadowMap = new RenderTargetTexture(this._light.name + \"_shadowMap\", this._mapSize, this._scene, false, true, this._textureType, this._light.needCube());\n        }\n    }\n    _initializeShadowMap() {\n        this._createTargetRenderTexture();\n        if (this._shadowMap === null) {\n            return;\n        }\n        this._shadowMap.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._shadowMap.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._shadowMap.anisotropicFilteringLevel = 1;\n        this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        this._shadowMap.renderParticles = false;\n        this._shadowMap.ignoreCameraViewport = true;\n        if (this._storedUniqueId) {\n            this._shadowMap.uniqueId = this._storedUniqueId;\n        }\n        // Custom render function.\n        this._shadowMap.customRenderFunction = this._renderForShadowMap.bind(this);\n        // Force the mesh is ready function to true as we are double checking it\n        // in the custom render function. Also it prevents side effects and useless\n        // shader variations in DEPTHPREPASS mode.\n        this._shadowMap.customIsReadyFunction = () => {\n            return true;\n        };\n        const engine = this._scene.getEngine();\n        this._shadowMap.onBeforeBindObservable.add(() => {\n            var _a;\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\n            (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, `shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\n        });\n        // Record Face Index before render.\n        this._shadowMap.onBeforeRenderObservable.add((faceIndex) => {\n            if (this._sceneUBOs) {\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[0]);\n            }\n            this._currentFaceIndex = faceIndex;\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\n                engine.setColorWrite(false);\n            }\n            this.getTransformMatrix(); // generate the view/projection matrix\n            this._scene.setTransformMatrix(this._viewMatrix, this._projectionMatrix);\n            if (this._useUBO) {\n                this._scene.getSceneUniformBuffer().unbindEffect();\n                this._scene.finalizeSceneUbo();\n            }\n        });\n        // Blur if required after render.\n        this._shadowMap.onAfterUnbindObservable.add(() => {\n            var _a, _b;\n            if (this._sceneUBOs) {\n                this._scene.setSceneUniformBuffer(this._currentSceneUBO);\n            }\n            this._scene.updateTransformMatrix(); // restore the view/projection matrices of the active camera\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\n                engine.setColorWrite(true);\n            }\n            if (!this.useBlurExponentialShadowMap && !this.useBlurCloseExponentialShadowMap) {\n                (_a = engine._debugPopGroup) === null || _a === void 0 ? void 0 : _a.call(engine, 1);\n                return;\n            }\n            const shadowMap = this.getShadowMapForRendering();\n            if (shadowMap) {\n                this._scene.postProcessManager.directRender(this._blurPostProcesses, shadowMap.renderTarget, true);\n                engine.unBindFramebuffer(shadowMap.renderTarget, true);\n                (_b = engine._debugPopGroup) === null || _b === void 0 ? void 0 : _b.call(engine, 1);\n            }\n        });\n        // Clear according to the chosen filter.\n        const clearZero = new Color4(0, 0, 0, 0);\n        const clearOne = new Color4(1.0, 1.0, 1.0, 1.0);\n        this._shadowMap.onClearObservable.add((engine) => {\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\n                engine.clear(clearOne, false, true, false);\n            }\n            else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\n                engine.clear(clearZero, true, true, false);\n            }\n            else {\n                engine.clear(clearOne, true, true, false);\n            }\n        });\n        // Recreate on resize.\n        this._shadowMap.onResizeObservable.add((rtt) => {\n            this._storedUniqueId = this._shadowMap.uniqueId;\n            this._mapSize = rtt.getRenderSize();\n            this._light._markMeshesAsLightDirty();\n            this.recreateShadowMap();\n        });\n        // Ensures rendering groupids do not erase the depth buffer\n        // or we would lose the shadows information.\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\n            this._shadowMap.setRenderingAutoClearDepthStencil(i, false);\n        }\n    }\n    _initializeBlurRTTAndPostProcesses() {\n        const engine = this._scene.getEngine();\n        const targetSize = this._mapSize / this.blurScale;\n        if (!this.useKernelBlur || this.blurScale !== 1.0) {\n            this._shadowMap2 = new RenderTargetTexture(this._light.name + \"_shadowMap2\", targetSize, this._scene, false, true, this._textureType, undefined, undefined, false);\n            this._shadowMap2.wrapU = Texture.CLAMP_ADDRESSMODE;\n            this._shadowMap2.wrapV = Texture.CLAMP_ADDRESSMODE;\n            this._shadowMap2.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        }\n        if (this.useKernelBlur) {\n            this._kernelBlurXPostprocess = new BlurPostProcess(this._light.name + \"KernelBlurX\", new Vector2(1, 0), this.blurKernel, 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._textureType);\n            this._kernelBlurXPostprocess.width = targetSize;\n            this._kernelBlurXPostprocess.height = targetSize;\n            this._kernelBlurXPostprocess.externalTextureSamplerBinding = true;\n            this._kernelBlurXPostprocess.onApplyObservable.add((effect) => {\n                effect.setTexture(\"textureSampler\", this._shadowMap);\n            });\n            this._kernelBlurYPostprocess = new BlurPostProcess(this._light.name + \"KernelBlurY\", new Vector2(0, 1), this.blurKernel, 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._textureType);\n            this._kernelBlurXPostprocess.autoClear = false;\n            this._kernelBlurYPostprocess.autoClear = false;\n            if (this._textureType === 0) {\n                this._kernelBlurXPostprocess.packedFloat = true;\n                this._kernelBlurYPostprocess.packedFloat = true;\n            }\n            this._blurPostProcesses = [this._kernelBlurXPostprocess, this._kernelBlurYPostprocess];\n        }\n        else {\n            this._boxBlurPostprocess = new PostProcess(this._light.name + \"DepthBoxBlur\", \"depthBoxBlur\", [\"screenSize\", \"boxOffset\"], [], 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, \"#define OFFSET \" + this._blurBoxOffset, this._textureType);\n            this._boxBlurPostprocess.externalTextureSamplerBinding = true;\n            this._boxBlurPostprocess.onApplyObservable.add((effect) => {\n                effect.setFloat2(\"screenSize\", targetSize, targetSize);\n                effect.setTexture(\"textureSampler\", this._shadowMap);\n            });\n            this._boxBlurPostprocess.autoClear = false;\n            this._blurPostProcesses = [this._boxBlurPostprocess];\n        }\n    }\n    _renderForShadowMap(opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) {\n        let index;\n        if (depthOnlySubMeshes.length) {\n            for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                this._renderSubMeshForShadowMap(depthOnlySubMeshes.data[index]);\n            }\n        }\n        for (index = 0; index < opaqueSubMeshes.length; index++) {\n            this._renderSubMeshForShadowMap(opaqueSubMeshes.data[index]);\n        }\n        for (index = 0; index < alphaTestSubMeshes.length; index++) {\n            this._renderSubMeshForShadowMap(alphaTestSubMeshes.data[index]);\n        }\n        if (this._transparencyShadow) {\n            for (index = 0; index < transparentSubMeshes.length; index++) {\n                this._renderSubMeshForShadowMap(transparentSubMeshes.data[index], true);\n            }\n        }\n        else {\n            for (index = 0; index < transparentSubMeshes.length; index++) {\n                transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect, mesh) {\n        effect.setMatrix(\"viewProjection\", this.getTransformMatrix());\n    }\n    _renderSubMeshForShadowMap(subMesh, isTransparent = false) {\n        var _a, _b;\n        const renderingMesh = subMesh.getRenderingMesh();\n        const effectiveMesh = subMesh.getEffectiveMesh();\n        const scene = this._scene;\n        const engine = scene.getEngine();\n        const material = subMesh.getMaterial();\n        effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n        if (!material || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\n            return;\n        }\n        // Culling\n        const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\n        let sideOrientation = (_a = renderingMesh.overrideMaterialSideOrientation) !== null && _a !== void 0 ? _a : material.sideOrientation;\n        if (detNeg) {\n            sideOrientation =\n                sideOrientation === 0 ? 1 : 0;\n        }\n        const reverseSideOrientation = sideOrientation === 0;\n        engine.setState(material.backFaceCulling, undefined, undefined, reverseSideOrientation, material.cullBackFaces);\n        // Managing instances\n        const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n        if (batch.mustReturn) {\n            return;\n        }\n        const hardwareInstancedRendering = engine.getCaps().instancedArrays &&\n            ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\n        if (this.customAllowRendering && !this.customAllowRendering(subMesh)) {\n            return;\n        }\n        if (this.isReady(subMesh, hardwareInstancedRendering, isTransparent)) {\n            subMesh._renderId = scene.getRenderId();\n            const shadowDepthWrapper = material.shadowDepthWrapper;\n            const drawWrapper = (_b = shadowDepthWrapper === null || shadowDepthWrapper === void 0 ? void 0 : shadowDepthWrapper.getEffect(subMesh, this, engine.currentRenderPassId)) !== null && _b !== void 0 ? _b : subMesh._getDrawWrapper();\n            const effect = DrawWrapper.GetEffect(drawWrapper);\n            engine.enableEffect(drawWrapper);\n            if (!hardwareInstancedRendering) {\n                renderingMesh._bind(subMesh, effect, material.fillMode);\n            }\n            this.getTransformMatrix(); // make sure _cachedDirection et _cachedPosition are up to date\n            effect.setFloat3(\"biasAndScaleSM\", this.bias, this.normalBias, this.depthScale);\n            if (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\n                effect.setVector3(\"lightDataSM\", this._cachedDirection);\n            }\n            else {\n                effect.setVector3(\"lightDataSM\", this._cachedPosition);\n            }\n            const camera = this._getCamera();\n            if (camera) {\n                effect.setFloat2(\"depthValuesSM\", this.getLight().getDepthMinZ(camera), this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera));\n            }\n            if (isTransparent && this.enableSoftTransparentShadow) {\n                effect.setFloat(\"softTransparentShadowSM\", effectiveMesh.visibility * material.alpha);\n            }\n            if (shadowDepthWrapper) {\n                subMesh._setMainDrawWrapperOverride(drawWrapper);\n                if (shadowDepthWrapper.standalone) {\n                    shadowDepthWrapper.baseMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\n                }\n                else {\n                    material.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\n                }\n                subMesh._setMainDrawWrapperOverride(null);\n            }\n            else {\n                // Alpha test\n                if (this._opacityTexture) {\n                    effect.setTexture(\"diffuseSampler\", this._opacityTexture);\n                    effect.setMatrix(\"diffuseMatrix\", this._opacityTexture.getTextureMatrix() || this._defaultTextureMatrix);\n                }\n                // Bones\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                    const skeleton = renderingMesh.skeleton;\n                    if (skeleton.isUsingTextureForMatrices) {\n                        const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\n                        if (!boneTexture) {\n                            return;\n                        }\n                        effect.setTexture(\"boneSampler\", boneTexture);\n                        effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n                    }\n                    else {\n                        effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\n                    }\n                }\n                // Morph targets\n                MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n                    renderingMesh.morphTargetManager._bind(effect);\n                }\n                // Clip planes\n                bindClipPlane(effect, material, scene);\n            }\n            if (!this._useUBO && !shadowDepthWrapper) {\n                this._bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect, effectiveMesh);\n            }\n            MaterialHelper.BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\n            this._scene.getSceneUniformBuffer().bindUniformBuffer();\n            const world = effectiveMesh.getWorldMatrix();\n            // In the non hardware instanced mode, the Mesh ubo update is done by the callback passed to renderingMesh._processRendering (see below)\n            if (hardwareInstancedRendering) {\n                effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                effectiveMesh.transferToEffect(world);\n            }\n            if (this.forceBackFacesOnly) {\n                engine.setState(true, 0, false, true, material.cullBackFaces);\n            }\n            // Observables\n            this.onBeforeShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\n            this.onBeforeShadowMapRenderObservable.notifyObservers(effect);\n            // Draw\n            renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, worldOverride) => {\n                if (effectiveMesh !== renderingMesh && !isInstance) {\n                    renderingMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                    renderingMesh.transferToEffect(worldOverride);\n                }\n                else {\n                    effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                    effectiveMesh.transferToEffect(isInstance ? worldOverride : world);\n                }\n            });\n            if (this.forceBackFacesOnly) {\n                engine.setState(true, 0, false, false, material.cullBackFaces);\n            }\n            // Observables\n            this.onAfterShadowMapRenderObservable.notifyObservers(effect);\n            this.onAfterShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\n        }\n        else {\n            // Need to reset refresh rate of the shadowMap\n            if (this._shadowMap) {\n                this._shadowMap.resetRefreshCounter();\n            }\n        }\n    }\n    _applyFilterValues() {\n        if (!this._shadowMap) {\n            return;\n        }\n        if (this.filter === ShadowGenerator.FILTER_NONE || this.filter === ShadowGenerator.FILTER_PCSS) {\n            this._shadowMap.updateSamplingMode(Texture.NEAREST_SAMPLINGMODE);\n        }\n        else {\n            this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        }\n    }\n    /**\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\n     * @param onCompiled Callback triggered at the and of the effects compilation\n     * @param options Sets of optional options forcing the compilation with different modes\n     */\n    forceCompilation(onCompiled, options) {\n        const localOptions = {\n            useInstances: false,\n            ...options,\n        };\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            if (onCompiled) {\n                onCompiled(this);\n            }\n            return;\n        }\n        const renderList = shadowMap.renderList;\n        if (!renderList) {\n            if (onCompiled) {\n                onCompiled(this);\n            }\n            return;\n        }\n        const subMeshes = new Array();\n        for (const mesh of renderList) {\n            subMeshes.push(...mesh.subMeshes);\n        }\n        if (subMeshes.length === 0) {\n            if (onCompiled) {\n                onCompiled(this);\n            }\n            return;\n        }\n        let currentIndex = 0;\n        const checkReady = () => {\n            var _a, _b;\n            if (!this._scene || !this._scene.getEngine()) {\n                return;\n            }\n            while (this.isReady(subMeshes[currentIndex], localOptions.useInstances, (_b = (_a = subMeshes[currentIndex].getMaterial()) === null || _a === void 0 ? void 0 : _a.needAlphaBlendingForMesh(subMeshes[currentIndex].getMesh())) !== null && _b !== void 0 ? _b : false)) {\n                currentIndex++;\n                if (currentIndex >= subMeshes.length) {\n                    if (onCompiled) {\n                        onCompiled(this);\n                    }\n                    return;\n                }\n            }\n            setTimeout(checkReady, 16);\n        };\n        checkReady();\n    }\n    /**\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\n     * @param options Sets of optional options forcing the compilation with different modes\n     * @returns A promise that resolves when the compilation completes\n     */\n    forceCompilationAsync(options) {\n        return new Promise((resolve) => {\n            this.forceCompilation(() => {\n                resolve();\n            }, options);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _isReadyCustomDefines(defines, subMesh, useInstances) { }\n    _prepareShadowDefines(subMesh, useInstances, defines, isTransparent) {\n        defines.push(\"#define SM_LIGHTTYPE_\" + this._light.getClassName().toUpperCase());\n        defines.push(\"#define SM_FLOAT \" + (this._textureType !== 0 ? \"1\" : \"0\"));\n        defines.push(\"#define SM_ESM \" + (this.useExponentialShadowMap || this.useBlurExponentialShadowMap ? \"1\" : \"0\"));\n        defines.push(\"#define SM_DEPTHTEXTURE \" + (this.usePercentageCloserFiltering || this.useContactHardeningShadow ? \"1\" : \"0\"));\n        const mesh = subMesh.getMesh();\n        // Normal bias.\n        defines.push(\"#define SM_NORMALBIAS \" + (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind) ? \"1\" : \"0\"));\n        defines.push(\"#define SM_DIRECTIONINLIGHTDATA \" + (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT ? \"1\" : \"0\"));\n        // Point light\n        defines.push(\"#define SM_USEDISTANCE \" + (this._light.needCube() ? \"1\" : \"0\"));\n        // Soft transparent shadows\n        defines.push(\"#define SM_SOFTTRANSPARENTSHADOW \" + (this.enableSoftTransparentShadow && isTransparent ? \"1\" : \"0\"));\n        this._isReadyCustomDefines(defines, subMesh, useInstances);\n        return defines;\n    }\n    /**\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\n     * @param subMesh The submesh we want to render in the shadow map\n     * @param useInstances Defines whether will draw in the map using instances\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\n     * @returns true if ready otherwise, false\n     */\n    isReady(subMesh, useInstances, isTransparent) {\n        var _a;\n        const material = subMesh.getMaterial(), shadowDepthWrapper = material === null || material === void 0 ? void 0 : material.shadowDepthWrapper;\n        this._opacityTexture = null;\n        if (!material) {\n            return false;\n        }\n        const defines = [];\n        this._prepareShadowDefines(subMesh, useInstances, defines, isTransparent);\n        if (shadowDepthWrapper) {\n            if (!shadowDepthWrapper.isReadyForSubMesh(subMesh, defines, this, useInstances, this._scene.getEngine().currentRenderPassId)) {\n                return false;\n            }\n        }\n        else {\n            const subMeshEffect = subMesh._getDrawWrapper(undefined, true);\n            let effect = subMeshEffect.effect;\n            let cachedDefines = subMeshEffect.defines;\n            const attribs = [VertexBuffer.PositionKind];\n            const mesh = subMesh.getMesh();\n            // Normal bias.\n            if (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n                attribs.push(VertexBuffer.NormalKind);\n                defines.push(\"#define NORMAL\");\n                if (mesh.nonUniformScaling) {\n                    defines.push(\"#define NONUNIFORMSCALING\");\n                }\n            }\n            // Alpha test\n            const needAlphaTesting = material.needAlphaTesting();\n            if (needAlphaTesting || material.needAlphaBlending()) {\n                if (this.useOpacityTextureForTransparentShadow) {\n                    this._opacityTexture = material.opacityTexture;\n                }\n                else {\n                    this._opacityTexture = material.getAlphaTestTexture();\n                }\n                if (this._opacityTexture) {\n                    if (!this._opacityTexture.isReady()) {\n                        return false;\n                    }\n                    const alphaCutOff = (_a = material.alphaCutOff) !== null && _a !== void 0 ? _a : ShadowGenerator.DEFAULT_ALPHA_CUTOFF;\n                    defines.push(\"#define ALPHATEXTURE\");\n                    if (needAlphaTesting) {\n                        defines.push(`#define ALPHATESTVALUE ${alphaCutOff}${alphaCutOff % 1 === 0 ? \".\" : \"\"}`);\n                    }\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                        attribs.push(VertexBuffer.UVKind);\n                        defines.push(\"#define UV1\");\n                    }\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n                        if (this._opacityTexture.coordinatesIndex === 1) {\n                            attribs.push(VertexBuffer.UV2Kind);\n                            defines.push(\"#define UV2\");\n                        }\n                    }\n                }\n            }\n            // Bones\n            const fallbacks = new EffectFallbacks();\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n                attribs.push(VertexBuffer.MatricesIndicesKind);\n                attribs.push(VertexBuffer.MatricesWeightsKind);\n                if (mesh.numBoneInfluencers > 4) {\n                    attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                    attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n                }\n                const skeleton = mesh.skeleton;\n                defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n                if (mesh.numBoneInfluencers > 0) {\n                    fallbacks.addCPUSkinningFallback(0, mesh);\n                }\n                if (skeleton.isUsingTextureForMatrices) {\n                    defines.push(\"#define BONETEXTURE\");\n                }\n                else {\n                    defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\n                }\n            }\n            else {\n                defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n            }\n            // Morph targets\n            const manager = mesh.morphTargetManager;\n            let morphInfluencers = 0;\n            if (manager) {\n                if (manager.numInfluencers > 0) {\n                    defines.push(\"#define MORPHTARGETS\");\n                    morphInfluencers = manager.numInfluencers;\n                    defines.push(\"#define NUM_MORPH_INFLUENCERS \" + morphInfluencers);\n                    if (manager.isUsingTextureForTargets) {\n                        defines.push(\"#define MORPHTARGETS_TEXTURE\");\n                    }\n                    MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, morphInfluencers);\n                }\n            }\n            // ClipPlanes\n            prepareStringDefinesForClipPlanes(material, this._scene, defines);\n            // Instances\n            if (useInstances) {\n                defines.push(\"#define INSTANCES\");\n                MaterialHelper.PushAttributesForInstances(attribs);\n                if (subMesh.getRenderingMesh().hasThinInstances) {\n                    defines.push(\"#define THIN_INSTANCES\");\n                }\n            }\n            if (this.customShaderOptions) {\n                if (this.customShaderOptions.defines) {\n                    for (const define of this.customShaderOptions.defines) {\n                        if (defines.indexOf(define) === -1) {\n                            defines.push(define);\n                        }\n                    }\n                }\n            }\n            // Get correct effect\n            const join = defines.join(\"\\n\");\n            if (cachedDefines !== join) {\n                cachedDefines = join;\n                let shaderName = \"shadowMap\";\n                const uniforms = [\n                    \"world\",\n                    \"mBones\",\n                    \"viewProjection\",\n                    \"diffuseMatrix\",\n                    \"lightDataSM\",\n                    \"depthValuesSM\",\n                    \"biasAndScaleSM\",\n                    \"morphTargetInfluences\",\n                    \"boneTextureWidth\",\n                    \"softTransparentShadowSM\",\n                    \"morphTargetTextureInfo\",\n                    \"morphTargetTextureIndices\",\n                ];\n                const samplers = [\"diffuseSampler\", \"boneSampler\", \"morphTargets\"];\n                const uniformBuffers = [\"Scene\", \"Mesh\"];\n                addClipPlaneUniforms(uniforms);\n                // Custom shader?\n                if (this.customShaderOptions) {\n                    shaderName = this.customShaderOptions.shaderName;\n                    if (this.customShaderOptions.attributes) {\n                        for (const attrib of this.customShaderOptions.attributes) {\n                            if (attribs.indexOf(attrib) === -1) {\n                                attribs.push(attrib);\n                            }\n                        }\n                    }\n                    if (this.customShaderOptions.uniforms) {\n                        for (const uniform of this.customShaderOptions.uniforms) {\n                            if (uniforms.indexOf(uniform) === -1) {\n                                uniforms.push(uniform);\n                            }\n                        }\n                    }\n                    if (this.customShaderOptions.samplers) {\n                        for (const sampler of this.customShaderOptions.samplers) {\n                            if (samplers.indexOf(sampler) === -1) {\n                                samplers.push(sampler);\n                            }\n                        }\n                    }\n                }\n                const engine = this._scene.getEngine();\n                effect = engine.createEffect(shaderName, {\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: null,\n                    onError: null,\n                    indexParameters: { maxSimultaneousMorphTargets: morphInfluencers },\n                }, engine);\n                subMeshEffect.setEffect(effect, cachedDefines);\n            }\n            if (!effect.isReady()) {\n                return false;\n            }\n        }\n        if (this.useBlurExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\n            if (!this._blurPostProcesses || !this._blurPostProcesses.length) {\n                this._initializeBlurRTTAndPostProcesses();\n            }\n        }\n        if (this._kernelBlurXPostprocess && !this._kernelBlurXPostprocess.isReady()) {\n            return false;\n        }\n        if (this._kernelBlurYPostprocess && !this._kernelBlurYPostprocess.isReady()) {\n            return false;\n        }\n        if (this._boxBlurPostprocess && !this._boxBlurPostprocess.isReady()) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\n     * @param defines Defines of the material we want to update\n     * @param lightIndex Index of the light in the enabled light list of the material\n     */\n    prepareDefines(defines, lightIndex) {\n        const scene = this._scene;\n        const light = this._light;\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\n            return;\n        }\n        defines[\"SHADOW\" + lightIndex] = true;\n        if (this.useContactHardeningShadow) {\n            defines[\"SHADOWPCSS\" + lightIndex] = true;\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\n            }\n            else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\n            }\n            // else default to high.\n        }\n        else if (this.usePercentageCloserFiltering) {\n            defines[\"SHADOWPCF\" + lightIndex] = true;\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\n            }\n            else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\n            }\n            // else default to high.\n        }\n        else if (this.usePoissonSampling) {\n            defines[\"SHADOWPOISSON\" + lightIndex] = true;\n        }\n        else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\n            defines[\"SHADOWESM\" + lightIndex] = true;\n        }\n        else if (this.useCloseExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\n            defines[\"SHADOWCLOSEESM\" + lightIndex] = true;\n        }\n        if (light.needCube()) {\n            defines[\"SHADOWCUBE\" + lightIndex] = true;\n        }\n    }\n    /**\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\n     * defined in the generator but impacting the effect).\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\n     * @param effect The effect we are binding the information for\n     */\n    bindShadowLight(lightIndex, effect) {\n        const light = this._light;\n        const scene = this._scene;\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\n            return;\n        }\n        const camera = this._getCamera();\n        if (!camera) {\n            return;\n        }\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            return;\n        }\n        if (!light.needCube()) {\n            effect.setMatrix(\"lightMatrix\" + lightIndex, this.getTransformMatrix());\n        }\n        // Only PCF uses depth stencil texture.\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), shadowMap.getSize().width, 1 / shadowMap.getSize().width, this.frustumEdgeFalloff, lightIndex);\n        }\n        else if (this._filter === ShadowGenerator.FILTER_PCSS) {\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\n            effect.setTexture(\"depthSampler\" + lightIndex, this.getShadowMapForRendering());\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), 1 / shadowMap.getSize().width, this._contactHardeningLightSizeUVRatio * shadowMap.getSize().width, this.frustumEdgeFalloff, lightIndex);\n        }\n        else {\n            effect.setTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), this.blurScale / shadowMap.getSize().width, this.depthScale, this.frustumEdgeFalloff, lightIndex);\n        }\n        light._uniformBuffer.updateFloat2(\"depthValues\", this.getLight().getDepthMinZ(camera), this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera), lightIndex);\n    }\n    /**\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\n     * (eq to shadow projection matrix * light transform matrix)\n     * @returns The transform matrix used to create the shadow map\n     */\n    getTransformMatrix() {\n        const scene = this._scene;\n        if (this._currentRenderId === scene.getRenderId() && this._currentFaceIndexCache === this._currentFaceIndex) {\n            return this._transformMatrix;\n        }\n        this._currentRenderId = scene.getRenderId();\n        this._currentFaceIndexCache = this._currentFaceIndex;\n        let lightPosition = this._light.position;\n        if (this._light.computeTransformedInformation()) {\n            lightPosition = this._light.transformedPosition;\n        }\n        Vector3.NormalizeToRef(this._light.getShadowDirection(this._currentFaceIndex), this._lightDirection);\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\n        }\n        if (this._light.needProjectionMatrixCompute() ||\n            !this._cachedPosition ||\n            !this._cachedDirection ||\n            !lightPosition.equals(this._cachedPosition) ||\n            !this._lightDirection.equals(this._cachedDirection)) {\n            this._cachedPosition.copyFrom(lightPosition);\n            this._cachedDirection.copyFrom(this._lightDirection);\n            Matrix.LookAtLHToRef(lightPosition, lightPosition.add(this._lightDirection), Vector3.Up(), this._viewMatrix);\n            const shadowMap = this.getShadowMap();\n            if (shadowMap) {\n                const renderList = shadowMap.renderList;\n                if (renderList) {\n                    this._light.setShadowProjectionMatrix(this._projectionMatrix, this._viewMatrix, renderList);\n                }\n            }\n            this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n        }\n        return this._transformMatrix;\n    }\n    /**\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\n     * Cube and 2D textures for instance.\n     */\n    recreateShadowMap() {\n        const shadowMap = this._shadowMap;\n        if (!shadowMap) {\n            return;\n        }\n        // Track render list.\n        const renderList = shadowMap.renderList;\n        // Clean up existing data.\n        this._disposeRTTandPostProcesses();\n        // Reinitializes.\n        this._initializeGenerator();\n        // Reaffect the filter to ensure a correct fallback if necessary.\n        this.filter = this._filter;\n        // Reaffect the filter.\n        this._applyFilterValues();\n        // Reaffect Render List.\n        if (renderList) {\n            // Note: don't do this._shadowMap!.renderList = renderList;\n            // The renderList hooked array is accessing the old RenderTargetTexture (see RenderTargetTexture._hookArray), which is disposed at this point (by the call to _disposeRTTandPostProcesses)\n            if (!this._shadowMap.renderList) {\n                this._shadowMap.renderList = [];\n            }\n            for (const mesh of renderList) {\n                this._shadowMap.renderList.push(mesh);\n            }\n        }\n        else {\n            this._shadowMap.renderList = null;\n        }\n    }\n    _disposeBlurPostProcesses() {\n        if (this._shadowMap2) {\n            this._shadowMap2.dispose();\n            this._shadowMap2 = null;\n        }\n        if (this._boxBlurPostprocess) {\n            this._boxBlurPostprocess.dispose();\n            this._boxBlurPostprocess = null;\n        }\n        if (this._kernelBlurXPostprocess) {\n            this._kernelBlurXPostprocess.dispose();\n            this._kernelBlurXPostprocess = null;\n        }\n        if (this._kernelBlurYPostprocess) {\n            this._kernelBlurYPostprocess.dispose();\n            this._kernelBlurYPostprocess = null;\n        }\n        this._blurPostProcesses = [];\n    }\n    _disposeRTTandPostProcesses() {\n        if (this._shadowMap) {\n            this._shadowMap.dispose();\n            this._shadowMap = null;\n        }\n        this._disposeBlurPostProcesses();\n    }\n    _disposeSceneUBOs() {\n        if (this._sceneUBOs) {\n            for (const ubo of this._sceneUBOs) {\n                ubo.dispose();\n            }\n            this._sceneUBOs = [];\n        }\n    }\n    /**\n     * Disposes the ShadowGenerator.\n     * Returns nothing.\n     */\n    dispose() {\n        this._disposeRTTandPostProcesses();\n        this._disposeSceneUBOs();\n        if (this._light) {\n            if (this._light._shadowGenerators) {\n                const iterator = this._light._shadowGenerators.entries();\n                for (let entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\n                    const [camera, shadowGenerator] = entry.value;\n                    if (shadowGenerator === this) {\n                        this._light._shadowGenerators.delete(camera);\n                    }\n                }\n                if (this._light._shadowGenerators.size === 0) {\n                    this._light._shadowGenerators = null;\n                }\n            }\n            this._light._markMeshesAsLightDirty();\n        }\n        this.onBeforeShadowMapRenderMeshObservable.clear();\n        this.onBeforeShadowMapRenderObservable.clear();\n        this.onAfterShadowMapRenderMeshObservable.clear();\n        this.onAfterShadowMapRenderObservable.clear();\n    }\n    /**\n     * Serializes the shadow generator setup to a json object.\n     * @returns The serialized JSON object\n     */\n    serialize() {\n        var _a;\n        const serializationObject = {};\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            return serializationObject;\n        }\n        serializationObject.className = this.getClassName();\n        serializationObject.lightId = this._light.id;\n        serializationObject.cameraId = (_a = this._camera) === null || _a === void 0 ? void 0 : _a.id;\n        serializationObject.id = this.id;\n        serializationObject.mapSize = shadowMap.getRenderSize();\n        serializationObject.forceBackFacesOnly = this.forceBackFacesOnly;\n        serializationObject.darkness = this.getDarkness();\n        serializationObject.transparencyShadow = this._transparencyShadow;\n        serializationObject.frustumEdgeFalloff = this.frustumEdgeFalloff;\n        serializationObject.bias = this.bias;\n        serializationObject.normalBias = this.normalBias;\n        serializationObject.usePercentageCloserFiltering = this.usePercentageCloserFiltering;\n        serializationObject.useContactHardeningShadow = this.useContactHardeningShadow;\n        serializationObject.contactHardeningLightSizeUVRatio = this.contactHardeningLightSizeUVRatio;\n        serializationObject.filteringQuality = this.filteringQuality;\n        serializationObject.useExponentialShadowMap = this.useExponentialShadowMap;\n        serializationObject.useBlurExponentialShadowMap = this.useBlurExponentialShadowMap;\n        serializationObject.useCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\n        serializationObject.useBlurCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\n        serializationObject.usePoissonSampling = this.usePoissonSampling;\n        serializationObject.depthScale = this.depthScale;\n        serializationObject.blurBoxOffset = this.blurBoxOffset;\n        serializationObject.blurKernel = this.blurKernel;\n        serializationObject.blurScale = this.blurScale;\n        serializationObject.useKernelBlur = this.useKernelBlur;\n        serializationObject.renderList = [];\n        if (shadowMap.renderList) {\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\n                const mesh = shadowMap.renderList[meshIndex];\n                serializationObject.renderList.push(mesh.id);\n            }\n        }\n        return serializationObject;\n    }\n    /**\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\n     * @param parsedShadowGenerator The JSON object to parse\n     * @param scene The scene to create the shadow map for\n     * @param constr A function that builds a shadow generator or undefined to create an instance of the default shadow generator\n     * @returns The parsed shadow generator\n     */\n    static Parse(parsedShadowGenerator, scene, constr) {\n        const light = scene.getLightById(parsedShadowGenerator.lightId);\n        const camera = parsedShadowGenerator.cameraId !== undefined ? scene.getCameraById(parsedShadowGenerator.cameraId) : null;\n        const shadowGenerator = constr ? constr(parsedShadowGenerator.mapSize, light, camera) : new ShadowGenerator(parsedShadowGenerator.mapSize, light, undefined, camera);\n        const shadowMap = shadowGenerator.getShadowMap();\n        for (let meshIndex = 0; meshIndex < parsedShadowGenerator.renderList.length; meshIndex++) {\n            const meshes = scene.getMeshesById(parsedShadowGenerator.renderList[meshIndex]);\n            meshes.forEach(function (mesh) {\n                if (!shadowMap) {\n                    return;\n                }\n                if (!shadowMap.renderList) {\n                    shadowMap.renderList = [];\n                }\n                shadowMap.renderList.push(mesh);\n            });\n        }\n        if (parsedShadowGenerator.id !== undefined) {\n            shadowGenerator.id = parsedShadowGenerator.id;\n        }\n        shadowGenerator.forceBackFacesOnly = !!parsedShadowGenerator.forceBackFacesOnly;\n        if (parsedShadowGenerator.darkness !== undefined) {\n            shadowGenerator.setDarkness(parsedShadowGenerator.darkness);\n        }\n        if (parsedShadowGenerator.transparencyShadow) {\n            shadowGenerator.setTransparencyShadow(true);\n        }\n        if (parsedShadowGenerator.frustumEdgeFalloff !== undefined) {\n            shadowGenerator.frustumEdgeFalloff = parsedShadowGenerator.frustumEdgeFalloff;\n        }\n        if (parsedShadowGenerator.bias !== undefined) {\n            shadowGenerator.bias = parsedShadowGenerator.bias;\n        }\n        if (parsedShadowGenerator.normalBias !== undefined) {\n            shadowGenerator.normalBias = parsedShadowGenerator.normalBias;\n        }\n        if (parsedShadowGenerator.usePercentageCloserFiltering) {\n            shadowGenerator.usePercentageCloserFiltering = true;\n        }\n        else if (parsedShadowGenerator.useContactHardeningShadow) {\n            shadowGenerator.useContactHardeningShadow = true;\n        }\n        else if (parsedShadowGenerator.usePoissonSampling) {\n            shadowGenerator.usePoissonSampling = true;\n        }\n        else if (parsedShadowGenerator.useExponentialShadowMap) {\n            shadowGenerator.useExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useBlurExponentialShadowMap) {\n            shadowGenerator.useBlurExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useCloseExponentialShadowMap) {\n            shadowGenerator.useCloseExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useBlurCloseExponentialShadowMap) {\n            shadowGenerator.useBlurCloseExponentialShadowMap = true;\n        }\n        // Backward compat\n        else if (parsedShadowGenerator.useVarianceShadowMap) {\n            shadowGenerator.useExponentialShadowMap = true;\n        }\n        else if (parsedShadowGenerator.useBlurVarianceShadowMap) {\n            shadowGenerator.useBlurExponentialShadowMap = true;\n        }\n        if (parsedShadowGenerator.contactHardeningLightSizeUVRatio !== undefined) {\n            shadowGenerator.contactHardeningLightSizeUVRatio = parsedShadowGenerator.contactHardeningLightSizeUVRatio;\n        }\n        if (parsedShadowGenerator.filteringQuality !== undefined) {\n            shadowGenerator.filteringQuality = parsedShadowGenerator.filteringQuality;\n        }\n        if (parsedShadowGenerator.depthScale) {\n            shadowGenerator.depthScale = parsedShadowGenerator.depthScale;\n        }\n        if (parsedShadowGenerator.blurScale) {\n            shadowGenerator.blurScale = parsedShadowGenerator.blurScale;\n        }\n        if (parsedShadowGenerator.blurBoxOffset) {\n            shadowGenerator.blurBoxOffset = parsedShadowGenerator.blurBoxOffset;\n        }\n        if (parsedShadowGenerator.useKernelBlur) {\n            shadowGenerator.useKernelBlur = parsedShadowGenerator.useKernelBlur;\n        }\n        if (parsedShadowGenerator.blurKernel) {\n            shadowGenerator.blurKernel = parsedShadowGenerator.blurKernel;\n        }\n        return shadowGenerator;\n    }\n}\n/**\n * Name of the shadow generator class\n */\nShadowGenerator.CLASSNAME = \"ShadowGenerator\";\n/**\n * Shadow generator mode None: no filtering applied.\n */\nShadowGenerator.FILTER_NONE = 0;\n/**\n * Shadow generator mode ESM: Exponential Shadow Mapping.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_EXPONENTIALSHADOWMAP = 1;\n/**\n * Shadow generator mode Poisson Sampling: Percentage Closer Filtering.\n * (Multiple Tap around evenly distributed around the pixel are used to evaluate the shadow strength)\n */\nShadowGenerator.FILTER_POISSONSAMPLING = 2;\n/**\n * Shadow generator mode ESM: Blurred Exponential Shadow Mapping.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP = 3;\n/**\n * Shadow generator mode ESM: Exponential Shadow Mapping using the inverse of the exponential preventing\n * edge artifacts on steep falloff.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP = 4;\n/**\n * Shadow generator mode ESM: Blurred Exponential Shadow Mapping using the inverse of the exponential preventing\n * edge artifacts on steep falloff.\n * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\n */\nShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP = 5;\n/**\n * Shadow generator mode PCF: Percentage Closer Filtering\n * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\n * (https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch11.html)\n */\nShadowGenerator.FILTER_PCF = 6;\n/**\n * Shadow generator mode PCSS: Percentage Closering Soft Shadow.\n * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\n * Contact Hardening\n */\nShadowGenerator.FILTER_PCSS = 7;\n/**\n * Reserved for PCF and PCSS\n * Highest Quality.\n *\n * Execute PCF on a 5*5 kernel improving a lot the shadow aliasing artifacts.\n *\n * Execute PCSS with 32 taps blocker search and 64 taps PCF.\n */\nShadowGenerator.QUALITY_HIGH = 0;\n/**\n * Reserved for PCF and PCSS\n * Good tradeoff for quality/perf cross devices\n *\n * Execute PCF on a 3*3 kernel.\n *\n * Execute PCSS with 16 taps blocker search and 32 taps PCF.\n */\nShadowGenerator.QUALITY_MEDIUM = 1;\n/**\n * Reserved for PCF and PCSS\n * The lowest quality but the fastest.\n *\n * Execute PCF on a 1*1 kernel.\n *\n * Execute PCSS with 16 taps blocker search and 16 taps PCF.\n */\nShadowGenerator.QUALITY_LOW = 2;\n/**\n * Defines the default alpha cutoff value used for transparent alpha tested materials.\n */\nShadowGenerator.DEFAULT_ALPHA_CUTOFF = 0.5;\n/**\n * @internal\n */\nShadowGenerator._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"ShadowGeneratorSceneComponent\");\n};\n//# sourceMappingURL=shadowGenerator.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration.js\";\nimport \"./ShadersInclude/packingFunctions.js\";\nimport \"./ShadersInclude/clipPlaneFragment.js\";\nconst name = \"depthPixelShader\";\nconst shader = `#ifdef ALPHATEST\nvarying vec2 vUV;\runiform sampler2D diffuseSampler;\r#endif\n#include<clipPlaneFragmentDeclaration>\nvarying float vDepthMetric;\r#ifdef PACKED\n#include<packingFunctions>\n#endif\n#ifdef STORE_CAMERASPACE_Z\nvarying vec4 vViewPos;\r#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\r{\r#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\rdiscard;\r#endif\n#ifdef STORE_CAMERASPACE_Z\n#ifdef PACKED\ngl_FragColor=pack(vViewPos.z);\r#else\ngl_FragColor=vec4(vViewPos.z,0.0,0.0,1.0);\r#endif\n#else\n#ifdef NONLINEARDEPTH\n#ifdef PACKED\ngl_FragColor=pack(gl_FragCoord.z);\r#else\ngl_FragColor=vec4(gl_FragCoord.z,0.0,0.0,0.0);\r#endif\n#else\n#ifdef PACKED\ngl_FragColor=pack(vDepthMetric);\r#else\ngl_FragColor=vec4(vDepthMetric,0.0,0.0,1.0);\r#endif\n#endif\n#endif\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthPixelShader = { name, shader };\n//# sourceMappingURL=depth.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"instancesDeclaration\";\nconst shader = `#ifdef INSTANCES\nattribute vec4 world0;\rattribute vec4 world1;\rattribute vec4 world2;\rattribute vec4 world3;\r#ifdef INSTANCESCOLOR\nattribute vec4 instanceColor;\r#endif\n#if defined(THIN_INSTANCES) && !defined(WORLD_UBO)\nuniform mat4 world;\r#endif\n#if defined(VELOCITY) || defined(PREPASS_VELOCITY)\nattribute vec4 previousWorld0;\rattribute vec4 previousWorld1;\rattribute vec4 previousWorld2;\rattribute vec4 previousWorld3;\r#ifdef THIN_INSTANCES\nuniform mat4 previousWorld;\r#endif\n#endif\n#else\n#if !defined(WORLD_UBO)\nuniform mat4 world;\r#endif\n#if defined(VELOCITY) || defined(PREPASS_VELOCITY)\nuniform mat4 previousWorld;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const instancesDeclaration = { name, shader };\n//# sourceMappingURL=instancesDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/bonesDeclaration.js\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration.js\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration.js\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration.js\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration.js\";\nimport \"./ShadersInclude/instancesDeclaration.js\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal.js\";\nimport \"./ShadersInclude/morphTargetsVertex.js\";\nimport \"./ShadersInclude/instancesVertex.js\";\nimport \"./ShadersInclude/bonesVertex.js\";\nimport \"./ShadersInclude/bakedVertexAnimation.js\";\nimport \"./ShadersInclude/clipPlaneVertex.js\";\nconst name = \"depthVertexShader\";\nconst shader = `attribute vec3 position;\r#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<clipPlaneVertexDeclaration>\n#include<instancesDeclaration>\nuniform mat4 viewProjection;\runiform vec2 depthValues;\r#if defined(ALPHATEST) || defined(NEED_UV)\nvarying vec2 vUV;\runiform mat4 diffuseMatrix;\r#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#endif\n#ifdef STORE_CAMERASPACE_Z\nuniform mat4 view;\rvarying vec4 vViewPos;\r#endif\nvarying float vDepthMetric;\r#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\r{\rvec3 positionUpdated=position;\r#ifdef UV1\nvec2 uvUpdated=uv;\r#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(positionUpdated,1.0);\r#include<clipPlaneVertex>\ngl_Position=viewProjection*worldPos;\r#ifdef STORE_CAMERASPACE_Z\nvViewPos=view*worldPos;\r#else\n#ifdef USE_REVERSE_DEPTHBUFFER\nvDepthMetric=((-gl_Position.z+depthValues.x)/(depthValues.y));\r#else\nvDepthMetric=((gl_Position.z+depthValues.x)/(depthValues.y));\r#endif\n#endif\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\n#ifdef UV1\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\r#endif\n#ifdef UV2\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\r#endif\n#endif\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthVertexShader = { name, shader };\n//# sourceMappingURL=depth.vertex.js.map","import { Color4 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\nimport { Camera } from \"../Cameras/camera.js\";\n\nimport \"../Shaders/depth.fragment.js\";\nimport \"../Shaders/depth.vertex.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper.js\";\n/**\n * This represents a depth renderer in Babylon.\n * A depth renderer will render to it's depth map every frame which can be displayed or used in post processing\n */\nexport class DepthRenderer {\n    /**\n     * Sets a specific material to be used to render a mesh/a list of meshes by the depth renderer\n     * @param mesh mesh or array of meshes\n     * @param material material to use by the depth render when rendering the mesh(es). If undefined is passed, the specific material created by the depth renderer will be used.\n     */\n    setMaterialForRendering(mesh, material) {\n        this._depthMap.setMaterialForRendering(mesh, material);\n    }\n    /**\n     * Instantiates a depth renderer\n     * @param scene The scene the renderer belongs to\n     * @param type The texture type of the depth map (default: Engine.TEXTURETYPE_FLOAT)\n     * @param camera The camera to be used to render the depth map (default: scene's active camera)\n     * @param storeNonLinearDepth Defines whether the depth is stored linearly like in Babylon Shadows or directly like glFragCoord.z\n     * @param samplingMode The sampling mode to be used with the render target (Linear, Nearest...) (default: TRILINEAR_SAMPLINGMODE)\n     * @param storeCameraSpaceZ Defines whether the depth stored is the Z coordinate in camera space. If true, storeNonLinearDepth has no effect. (Default: false)\n     * @param name Name of the render target (default: DepthRenderer)\n     */\n    constructor(scene, type = 1, camera = null, storeNonLinearDepth = false, samplingMode = Texture.TRILINEAR_SAMPLINGMODE, storeCameraSpaceZ = false, name) {\n        /** Enable or disable the depth renderer. When disabled, the depth texture is not updated */\n        this.enabled = true;\n        /** Force writing the transparent objects into the depth map */\n        this.forceDepthWriteTransparentMeshes = false;\n        /**\n         * Specifies that the depth renderer will only be used within\n         * the camera it is created for.\n         * This can help forcing its rendering during the camera processing.\n         */\n        this.useOnlyInActiveCamera = false;\n        /** If true, reverse the culling of materials before writing to the depth texture.\n         * So, basically, when \"true\", back facing instead of front facing faces are rasterized into the texture\n         */\n        this.reverseCulling = false;\n        this._scene = scene;\n        this._storeNonLinearDepth = storeNonLinearDepth;\n        this._storeCameraSpaceZ = storeCameraSpaceZ;\n        this.isPacked = type === 0;\n        if (this.isPacked) {\n            this.clearColor = new Color4(1.0, 1.0, 1.0, 1.0);\n        }\n        else {\n            this.clearColor = new Color4(storeCameraSpaceZ ? 1e8 : 1.0, 0.0, 0.0, 1.0);\n        }\n        DepthRenderer._SceneComponentInitialization(this._scene);\n        const engine = scene.getEngine();\n        this._camera = camera;\n        if (samplingMode !== Texture.NEAREST_SAMPLINGMODE) {\n            if (type === 1 && !engine._caps.textureFloatLinearFiltering) {\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\n            }\n            if (type === 2 && !engine._caps.textureHalfFloatLinearFiltering) {\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\n            }\n        }\n        // Render target\n        const format = this.isPacked || !engine._features.supportExtendedTextureFormats ? 5 : 6;\n        this._depthMap = new RenderTargetTexture(name !== null && name !== void 0 ? name : \"DepthRenderer\", { width: engine.getRenderWidth(), height: engine.getRenderHeight() }, this._scene, false, true, type, false, samplingMode, undefined, undefined, undefined, format);\n        this._depthMap.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._depthMap.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._depthMap.refreshRate = 1;\n        this._depthMap.renderParticles = false;\n        this._depthMap.renderList = null;\n        // Camera to get depth map from to support multiple concurrent cameras\n        this._depthMap.activeCamera = this._camera;\n        this._depthMap.ignoreCameraViewport = true;\n        this._depthMap.useCameraPostProcesses = false;\n        // set default depth value to 1.0 (far away)\n        this._depthMap.onClearObservable.add((engine) => {\n            engine.clear(this.clearColor, true, true, true);\n        });\n        this._depthMap.onBeforeBindObservable.add(() => {\n            var _a;\n            (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, \"depth renderer\", 1);\n        });\n        this._depthMap.onAfterUnbindObservable.add(() => {\n            var _a;\n            (_a = engine._debugPopGroup) === null || _a === void 0 ? void 0 : _a.call(engine, 1);\n        });\n        this._depthMap.customIsReadyFunction = (mesh, refreshRate, preWarm) => {\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\n                    const subMesh = mesh.subMeshes[i];\n                    const renderingMesh = subMesh.getRenderingMesh();\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n                    const hardwareInstancedRendering = engine.getCaps().instancedArrays &&\n                        ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        // Custom render function\n        const renderSubMesh = (subMesh) => {\n            var _a, _b;\n            const renderingMesh = subMesh.getRenderingMesh();\n            const effectiveMesh = subMesh.getEffectiveMesh();\n            const scene = this._scene;\n            const engine = scene.getEngine();\n            const material = subMesh.getMaterial();\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n            if (!material || effectiveMesh.infiniteDistance || material.disableDepthWrite || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\n                return;\n            }\n            // Culling\n            const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\n            let sideOrientation = (_a = renderingMesh.overrideMaterialSideOrientation) !== null && _a !== void 0 ? _a : material.sideOrientation;\n            if (detNeg) {\n                sideOrientation =\n                    sideOrientation === 0\n                        ? 1\n                        : 0;\n            }\n            const reverseSideOrientation = sideOrientation === 0;\n            engine.setState(material.backFaceCulling, 0, false, reverseSideOrientation, this.reverseCulling ? !material.cullBackFaces : material.cullBackFaces);\n            // Managing instances\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n            if (batch.mustReturn) {\n                return;\n            }\n            const hardwareInstancedRendering = engine.getCaps().instancedArrays &&\n                ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\n            const camera = this._camera || scene.activeCamera;\n            if (this.isReady(subMesh, hardwareInstancedRendering) && camera) {\n                subMesh._renderId = scene.getRenderId();\n                const renderingMaterial = (_b = effectiveMesh._internalAbstractMeshDataInfo._materialForRenderPass) === null || _b === void 0 ? void 0 : _b[engine.currentRenderPassId];\n                let drawWrapper = subMesh._getDrawWrapper();\n                if (!drawWrapper && renderingMaterial) {\n                    drawWrapper = renderingMaterial._getDrawWrapper();\n                }\n                const cameraIsOrtho = camera.mode === Camera.ORTHOGRAPHIC_CAMERA;\n                if (!drawWrapper) {\n                    return;\n                }\n                const effect = drawWrapper.effect;\n                engine.enableEffect(drawWrapper);\n                if (!hardwareInstancedRendering) {\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\n                }\n                if (!renderingMaterial) {\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                    effect.setMatrix(\"world\", effectiveMesh.getWorldMatrix());\n                    if (this._storeCameraSpaceZ) {\n                        effect.setMatrix(\"view\", scene.getViewMatrix());\n                    }\n                }\n                else {\n                    renderingMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), effectiveMesh, subMesh);\n                }\n                let minZ, maxZ;\n                if (cameraIsOrtho) {\n                    minZ = !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\n                }\n                else {\n                    minZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? camera.minZ : engine.isNDCHalfZRange ? 0 : camera.minZ;\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : camera.maxZ;\n                }\n                effect.setFloat2(\"depthValues\", minZ, minZ + maxZ);\n                if (!renderingMaterial) {\n                    // Alpha test\n                    if (material.needAlphaTesting()) {\n                        const alphaTexture = material.getAlphaTestTexture();\n                        if (alphaTexture) {\n                            effect.setTexture(\"diffuseSampler\", alphaTexture);\n                            effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\n                        }\n                    }\n                    // Bones\n                    if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                        const skeleton = renderingMesh.skeleton;\n                        if (skeleton.isUsingTextureForMatrices) {\n                            const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\n                            if (!boneTexture) {\n                                return;\n                            }\n                            effect.setTexture(\"boneSampler\", boneTexture);\n                            effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n                        }\n                        else {\n                            effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\n                        }\n                    }\n                    // Clip planes\n                    bindClipPlane(effect, material, scene);\n                    // Morph targets\n                    MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\n                    if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n                        renderingMesh.morphTargetManager._bind(effect);\n                    }\n                }\n                // Draw\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, world) => effect.setMatrix(\"world\", world));\n            }\n        };\n        this._depthMap.customRenderFunction = (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) => {\n            let index;\n            if (depthOnlySubMeshes.length) {\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\n                }\n            }\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\n                renderSubMesh(opaqueSubMeshes.data[index]);\n            }\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\n                renderSubMesh(alphaTestSubMeshes.data[index]);\n            }\n            if (this.forceDepthWriteTransparentMeshes) {\n                for (index = 0; index < transparentSubMeshes.length; index++) {\n                    renderSubMesh(transparentSubMeshes.data[index]);\n                }\n            }\n            else {\n                for (index = 0; index < transparentSubMeshes.length; index++) {\n                    transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n                }\n            }\n        };\n    }\n    /**\n     * Creates the depth rendering effect and checks if the effect is ready.\n     * @param subMesh The submesh to be used to render the depth map of\n     * @param useInstances If multiple world instances should be used\n     * @returns if the depth renderer is ready to render the depth map\n     */\n    isReady(subMesh, useInstances) {\n        var _a;\n        const engine = this._scene.getEngine();\n        const mesh = subMesh.getMesh();\n        const scene = mesh.getScene();\n        const renderingMaterial = (_a = mesh._internalAbstractMeshDataInfo._materialForRenderPass) === null || _a === void 0 ? void 0 : _a[engine.currentRenderPassId];\n        if (renderingMaterial) {\n            return renderingMaterial.isReadyForSubMesh(mesh, subMesh, useInstances);\n        }\n        const material = subMesh.getMaterial();\n        if (!material || material.disableDepthWrite) {\n            return false;\n        }\n        const defines = [];\n        const attribs = [VertexBuffer.PositionKind];\n        // Alpha test\n        if (material && material.needAlphaTesting() && material.getAlphaTestTexture()) {\n            defines.push(\"#define ALPHATEST\");\n            if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                attribs.push(VertexBuffer.UVKind);\n                defines.push(\"#define UV1\");\n            }\n            if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n                attribs.push(VertexBuffer.UV2Kind);\n                defines.push(\"#define UV2\");\n            }\n        }\n        // Bones\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\n            const skeleton = subMesh.getRenderingMesh().skeleton;\n            if (skeleton === null || skeleton === void 0 ? void 0 : skeleton.isUsingTextureForMatrices) {\n                defines.push(\"#define BONETEXTURE\");\n            }\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Morph targets\n        const morphTargetManager = mesh.morphTargetManager;\n        let numMorphInfluencers = 0;\n        if (morphTargetManager) {\n            if (morphTargetManager.numInfluencers > 0) {\n                numMorphInfluencers = morphTargetManager.numInfluencers;\n                defines.push(\"#define MORPHTARGETS\");\n                defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\n                if (morphTargetManager.isUsingTextureForTargets) {\n                    defines.push(\"#define MORPHTARGETS_TEXTURE\");\n                }\n                MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\n            }\n        }\n        // Instances\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            MaterialHelper.PushAttributesForInstances(attribs);\n            if (subMesh.getRenderingMesh().hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n            }\n        }\n        // None linear depth\n        if (this._storeNonLinearDepth) {\n            defines.push(\"#define NONLINEARDEPTH\");\n        }\n        // Store camera space Z coordinate instead of NDC Z\n        if (this._storeCameraSpaceZ) {\n            defines.push(\"#define STORE_CAMERASPACE_Z\");\n        }\n        // Float Mode\n        if (this.isPacked) {\n            defines.push(\"#define PACKED\");\n        }\n        // Clip planes\n        prepareStringDefinesForClipPlanes(material, scene, defines);\n        // Get correct effect\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true);\n        const cachedDefines = drawWrapper.defines;\n        const join = defines.join(\"\\n\");\n        if (cachedDefines !== join) {\n            const uniforms = [\n                \"world\",\n                \"mBones\",\n                \"boneTextureWidth\",\n                \"viewProjection\",\n                \"view\",\n                \"diffuseMatrix\",\n                \"depthValues\",\n                \"morphTargetInfluences\",\n                \"morphTargetTextureInfo\",\n                \"morphTargetTextureIndices\",\n            ];\n            addClipPlaneUniforms(uniforms);\n            drawWrapper.setEffect(engine.createEffect(\"depth\", attribs, uniforms, [\"diffuseSampler\", \"morphTargets\", \"boneSampler\"], join, undefined, undefined, undefined, {\n                maxSimultaneousMorphTargets: numMorphInfluencers,\n            }), join);\n        }\n        return drawWrapper.effect.isReady();\n    }\n    /**\n     * Gets the texture which the depth map will be written to.\n     * @returns The depth map texture\n     */\n    getDepthMap() {\n        return this._depthMap;\n    }\n    /**\n     * Disposes of the depth renderer.\n     */\n    dispose() {\n        const keysToDelete = [];\n        for (const key in this._scene._depthRenderer) {\n            const depthRenderer = this._scene._depthRenderer[key];\n            if (depthRenderer === this) {\n                keysToDelete.push(key);\n            }\n        }\n        if (keysToDelete.length > 0) {\n            this._depthMap.dispose();\n            for (const key of keysToDelete) {\n                delete this._scene._depthRenderer[key];\n            }\n        }\n    }\n}\n/**\n * @internal\n */\nDepthRenderer._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"DepthRendererSceneComponent\");\n};\n//# sourceMappingURL=depthRenderer.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"minmaxReduxPixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\r#if defined(INITIAL)\nuniform sampler2D sourceTexture;\runiform vec2 texSize;\rvoid main(void)\r{\rivec2 coord=ivec2(vUV*(texSize-1.0));\rfloat f1=texelFetch(sourceTexture,coord,0).r;\rfloat f2=texelFetch(sourceTexture,coord+ivec2(1,0),0).r;\rfloat f3=texelFetch(sourceTexture,coord+ivec2(1,1),0).r;\rfloat f4=texelFetch(sourceTexture,coord+ivec2(0,1),0).r;\rfloat minz=min(min(min(f1,f2),f3),f4);\r#ifdef DEPTH_REDUX\nfloat maxz=max(max(max(sign(1.0-f1)*f1,sign(1.0-f2)*f2),sign(1.0-f3)*f3),sign(1.0-f4)*f4);\r#else\nfloat maxz=max(max(max(f1,f2),f3),f4);\r#endif\nglFragColor=vec4(minz,maxz,0.,0.);\r}\r#elif defined(MAIN)\nuniform vec2 texSize;\rvoid main(void)\r{\rivec2 coord=ivec2(vUV*(texSize-1.0));\rvec2 f1=texelFetch(textureSampler,coord,0).rg;\rvec2 f2=texelFetch(textureSampler,coord+ivec2(1,0),0).rg;\rvec2 f3=texelFetch(textureSampler,coord+ivec2(1,1),0).rg;\rvec2 f4=texelFetch(textureSampler,coord+ivec2(0,1),0).rg;\rfloat minz=min(min(min(f1.x,f2.x),f3.x),f4.x);\rfloat maxz=max(max(max(f1.y,f2.y),f3.y),f4.y);\rglFragColor=vec4(minz,maxz,0.,0.);\r}\r#elif defined(ONEBEFORELAST)\nuniform ivec2 texSize;\rvoid main(void)\r{\rivec2 coord=ivec2(vUV*vec2(texSize-1));\rvec2 f1=texelFetch(textureSampler,coord % texSize,0).rg;\rvec2 f2=texelFetch(textureSampler,(coord+ivec2(1,0)) % texSize,0).rg;\rvec2 f3=texelFetch(textureSampler,(coord+ivec2(1,1)) % texSize,0).rg;\rvec2 f4=texelFetch(textureSampler,(coord+ivec2(0,1)) % texSize,0).rg;\rfloat minz=min(f1.x,f2.x);\rfloat maxz=max(f1.y,f2.y);\rglFragColor=vec4(minz,maxz,0.,0.);\r}\r#elif defined(LAST)\nvoid main(void)\r{\rglFragColor=vec4(0.);\rif (true) { \rdiscard;\r}\r}\r#endif\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const minmaxReduxPixelShader = { name, shader };\n//# sourceMappingURL=minmaxRedux.fragment.js.map","\nimport { Observable } from \"./observable.js\";\nimport { PostProcess } from \"../PostProcesses/postProcess.js\";\nimport { PostProcessManager } from \"../PostProcesses/postProcessManager.js\";\nimport \"../Shaders/minmaxRedux.fragment.js\";\n/**\n * This class computes a min/max reduction from a texture: it means it computes the minimum\n * and maximum values from all values of the texture.\n * It is performed on the GPU for better performances, thanks to a succession of post processes.\n * The source values are read from the red channel of the texture.\n */\nexport class MinMaxReducer {\n    /**\n     * Creates a min/max reducer\n     * @param camera The camera to use for the post processes\n     */\n    constructor(camera) {\n        /**\n         * Observable triggered when the computation has been performed\n         */\n        this.onAfterReductionPerformed = new Observable();\n        this._forceFullscreenViewport = true;\n        this._activated = false;\n        this._camera = camera;\n        this._postProcessManager = new PostProcessManager(camera.getScene());\n        this._onContextRestoredObserver = camera.getEngine().onContextRestoredObservable.add(() => {\n            this._postProcessManager._rebuild();\n        });\n    }\n    /**\n     * Gets the texture used to read the values from.\n     */\n    get sourceTexture() {\n        return this._sourceTexture;\n    }\n    /**\n     * Sets the source texture to read the values from.\n     * One must indicate if the texture is a depth texture or not through the depthRedux parameter\n     * because in such textures '1' value must not be taken into account to compute the maximum\n     * as this value is used to clear the texture.\n     * Note that the computation is not activated by calling this function, you must call activate() for that!\n     * @param sourceTexture The texture to read the values from. The values should be in the red channel.\n     * @param depthRedux Indicates if the texture is a depth texture or not\n     * @param type The type of the textures created for the reduction (defaults to TEXTURETYPE_HALF_FLOAT)\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\n     */\n    setSourceTexture(sourceTexture, depthRedux, type = 2, forceFullscreenViewport = true) {\n        if (sourceTexture === this._sourceTexture) {\n            return;\n        }\n        this.dispose(false);\n        this._sourceTexture = sourceTexture;\n        this._reductionSteps = [];\n        this._forceFullscreenViewport = forceFullscreenViewport;\n        const scene = this._camera.getScene();\n        // create the first step\n        const reductionInitial = new PostProcess(\"Initial reduction phase\", \"minmaxRedux\", // shader\n        [\"texSize\"], [\"sourceTexture\"], // textures\n        1.0, // options\n        null, // camera\n        1, // sampling\n        scene.getEngine(), // engine\n        false, // reusable\n        \"#define INITIAL\" + (depthRedux ? \"\\n#define DEPTH_REDUX\" : \"\"), // defines\n        type, undefined, undefined, undefined, 7);\n        reductionInitial.autoClear = false;\n        reductionInitial.forceFullscreenViewport = forceFullscreenViewport;\n        let w = this._sourceTexture.getRenderWidth(), h = this._sourceTexture.getRenderHeight();\n        reductionInitial.onApply = ((w, h) => {\n            return (effect) => {\n                effect.setTexture(\"sourceTexture\", this._sourceTexture);\n                effect.setFloat2(\"texSize\", w, h);\n            };\n        })(w, h);\n        this._reductionSteps.push(reductionInitial);\n        let index = 1;\n        // create the additional steps\n        while (w > 1 || h > 1) {\n            w = Math.max(Math.round(w / 2), 1);\n            h = Math.max(Math.round(h / 2), 1);\n            const reduction = new PostProcess(\"Reduction phase \" + index, \"minmaxRedux\", // shader\n            [\"texSize\"], null, { width: w, height: h }, // options\n            null, // camera\n            1, // sampling\n            scene.getEngine(), // engine\n            false, // reusable\n            \"#define \" + (w == 1 && h == 1 ? \"LAST\" : w == 1 || h == 1 ? \"ONEBEFORELAST\" : \"MAIN\"), // defines\n            type, undefined, undefined, undefined, 7);\n            reduction.autoClear = false;\n            reduction.forceFullscreenViewport = forceFullscreenViewport;\n            reduction.onApply = ((w, h) => {\n                return (effect) => {\n                    if (w == 1 || h == 1) {\n                        effect.setInt2(\"texSize\", w, h);\n                    }\n                    else {\n                        effect.setFloat2(\"texSize\", w, h);\n                    }\n                };\n            })(w, h);\n            this._reductionSteps.push(reduction);\n            index++;\n            if (w == 1 && h == 1) {\n                const func = (w, h, reduction) => {\n                    const buffer = new Float32Array(4 * w * h), minmax = { min: 0, max: 0 };\n                    return () => {\n                        scene.getEngine()._readTexturePixels(reduction.inputTexture.texture, w, h, -1, 0, buffer, false);\n                        minmax.min = buffer[0];\n                        minmax.max = buffer[1];\n                        this.onAfterReductionPerformed.notifyObservers(minmax);\n                    };\n                };\n                reduction.onAfterRenderObservable.add(func(w, h, reduction));\n            }\n        }\n    }\n    /**\n     * Defines the refresh rate of the computation.\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\n     */\n    get refreshRate() {\n        return this._sourceTexture ? this._sourceTexture.refreshRate : -1;\n    }\n    set refreshRate(value) {\n        if (this._sourceTexture) {\n            this._sourceTexture.refreshRate = value;\n        }\n    }\n    /**\n     * Gets the activation status of the reducer\n     */\n    get activated() {\n        return this._activated;\n    }\n    /**\n     * Activates the reduction computation.\n     * When activated, the observers registered in onAfterReductionPerformed are\n     * called after the computation is performed\n     */\n    activate() {\n        if (this._onAfterUnbindObserver || !this._sourceTexture) {\n            return;\n        }\n        this._onAfterUnbindObserver = this._sourceTexture.onAfterUnbindObservable.add(() => {\n            var _a, _b;\n            const engine = this._camera.getScene().getEngine();\n            (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, `min max reduction`, 1);\n            this._reductionSteps[0].activate(this._camera);\n            this._postProcessManager.directRender(this._reductionSteps, this._reductionSteps[0].inputTexture, this._forceFullscreenViewport);\n            engine.unBindFramebuffer(this._reductionSteps[0].inputTexture, false);\n            (_b = engine._debugPopGroup) === null || _b === void 0 ? void 0 : _b.call(engine, 1);\n        });\n        this._activated = true;\n    }\n    /**\n     * Deactivates the reduction computation.\n     */\n    deactivate() {\n        if (!this._onAfterUnbindObserver || !this._sourceTexture) {\n            return;\n        }\n        this._sourceTexture.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);\n        this._onAfterUnbindObserver = null;\n        this._activated = false;\n    }\n    /**\n     * Disposes the min/max reducer\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\n     */\n    dispose(disposeAll = true) {\n        if (disposeAll) {\n            this.onAfterReductionPerformed.clear();\n            if (this._onContextRestoredObserver) {\n                this._camera.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n                this._onContextRestoredObserver = null;\n            }\n        }\n        this.deactivate();\n        if (this._reductionSteps) {\n            for (let i = 0; i < this._reductionSteps.length; ++i) {\n                this._reductionSteps[i].dispose();\n            }\n            this._reductionSteps = null;\n        }\n        if (this._postProcessManager && disposeAll) {\n            this._postProcessManager.dispose();\n        }\n        this._sourceTexture = null;\n    }\n}\n//# sourceMappingURL=minMaxReducer.js.map","\nimport { DepthRenderer } from \"../Rendering/depthRenderer.js\";\nimport { MinMaxReducer } from \"./minMaxReducer.js\";\n/**\n * This class is a small wrapper around the MinMaxReducer class to compute the min/max values of a depth texture\n */\nexport class DepthReducer extends MinMaxReducer {\n    /**\n     * Gets the depth renderer used for the computation.\n     * Note that the result is null if you provide your own renderer when calling setDepthRenderer.\n     */\n    get depthRenderer() {\n        return this._depthRenderer;\n    }\n    /**\n     * Creates a depth reducer\n     * @param camera The camera used to render the depth texture\n     */\n    constructor(camera) {\n        super(camera);\n    }\n    /**\n     * Sets the depth renderer to use to generate the depth map\n     * @param depthRenderer The depth renderer to use. If not provided, a new one will be created automatically\n     * @param type The texture type of the depth map (default: TEXTURETYPE_HALF_FLOAT)\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\n     */\n    setDepthRenderer(depthRenderer = null, type = 2, forceFullscreenViewport = true) {\n        const scene = this._camera.getScene();\n        if (this._depthRenderer) {\n            delete scene._depthRenderer[this._depthRendererId];\n            this._depthRenderer.dispose();\n            this._depthRenderer = null;\n        }\n        if (depthRenderer === null) {\n            if (!scene._depthRenderer) {\n                scene._depthRenderer = {};\n            }\n            depthRenderer = this._depthRenderer = new DepthRenderer(scene, type, this._camera, false, 1);\n            depthRenderer.enabled = false;\n            this._depthRendererId = \"minmax\" + this._camera.id;\n            scene._depthRenderer[this._depthRendererId] = depthRenderer;\n        }\n        super.setSourceTexture(depthRenderer.getDepthMap(), true, type, forceFullscreenViewport);\n    }\n    /**\n     * @internal\n     */\n    setSourceTexture(sourceTexture, depthRedux, type = 2, forceFullscreenViewport = true) {\n        super.setSourceTexture(sourceTexture, depthRedux, type, forceFullscreenViewport);\n    }\n    /**\n     * Activates the reduction computation.\n     * When activated, the observers registered in onAfterReductionPerformed are\n     * called after the computation is performed\n     */\n    activate() {\n        if (this._depthRenderer) {\n            this._depthRenderer.enabled = true;\n        }\n        super.activate();\n    }\n    /**\n     * Deactivates the reduction computation.\n     */\n    deactivate() {\n        super.deactivate();\n        if (this._depthRenderer) {\n            this._depthRenderer.enabled = false;\n        }\n    }\n    /**\n     * Disposes the depth reducer\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\n     */\n    dispose(disposeAll = true) {\n        super.dispose(disposeAll);\n        if (this._depthRenderer && disposeAll) {\n            const scene = this._depthRenderer.getDepthMap().getScene();\n            if (scene) {\n                delete scene._depthRenderer[this._depthRendererId];\n            }\n            this._depthRenderer.dispose();\n            this._depthRenderer = null;\n        }\n    }\n}\n//# sourceMappingURL=depthReducer.js.map","import { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture.js\";\n\nimport \"../../Shaders/shadowMap.fragment.js\";\nimport \"../../Shaders/shadowMap.vertex.js\";\nimport \"../../Shaders/depthBoxBlur.fragment.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\nimport { ShadowGenerator } from \"./shadowGenerator.js\";\nimport { BoundingInfo } from \"../../Culling/boundingInfo.js\";\nimport { DepthReducer } from \"../../Misc/depthReducer.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst UpDir = Vector3.Up();\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst ZeroVec = Vector3.Zero();\nconst tmpv1 = new Vector3(), tmpv2 = new Vector3(), tmpMatrix = new Matrix();\n/**\n * A CSM implementation allowing casting shadows on large scenes.\n * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\n * Based on: https://github.com/TheRealMJP/Shadows and https://johanmedestrom.wordpress.com/2016/03/18/opengl-cascaded-shadow-maps/\n */\nexport class CascadedShadowGenerator extends ShadowGenerator {\n    _validateFilter(filter) {\n        if (filter === ShadowGenerator.FILTER_NONE || filter === ShadowGenerator.FILTER_PCF || filter === ShadowGenerator.FILTER_PCSS) {\n            return filter;\n        }\n        console.error('Unsupported filter \"' + filter + '\"!');\n        return ShadowGenerator.FILTER_NONE;\n    }\n    /**\n     * Gets or set the number of cascades used by the CSM.\n     */\n    get numCascades() {\n        return this._numCascades;\n    }\n    set numCascades(value) {\n        value = Math.min(Math.max(value, CascadedShadowGenerator.MIN_CASCADES_COUNT), CascadedShadowGenerator.MAX_CASCADES_COUNT);\n        if (value === this._numCascades) {\n            return;\n        }\n        this._numCascades = value;\n        this.recreateShadowMap();\n        this._recreateSceneUBOs();\n    }\n    /**\n     * Enables or disables the shadow casters bounding info computation.\n     * If your shadow casters don't move, you can disable this feature.\n     * If it is enabled, the bounding box computation is done every frame.\n     */\n    get freezeShadowCastersBoundingInfo() {\n        return this._freezeShadowCastersBoundingInfo;\n    }\n    set freezeShadowCastersBoundingInfo(freeze) {\n        if (this._freezeShadowCastersBoundingInfoObservable && freeze) {\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\n            this._freezeShadowCastersBoundingInfoObservable = null;\n        }\n        if (!this._freezeShadowCastersBoundingInfoObservable && !freeze) {\n            this._freezeShadowCastersBoundingInfoObservable = this._scene.onBeforeRenderObservable.add(this._computeShadowCastersBoundingInfo.bind(this));\n        }\n        this._freezeShadowCastersBoundingInfo = freeze;\n        if (freeze) {\n            this._computeShadowCastersBoundingInfo();\n        }\n    }\n    _computeShadowCastersBoundingInfo() {\n        this._scbiMin.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._scbiMax.copyFromFloats(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\n        if (this._shadowMap && this._shadowMap.renderList) {\n            const renderList = this._shadowMap.renderList;\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\n                const mesh = renderList[meshIndex];\n                if (!mesh) {\n                    continue;\n                }\n                const boundingInfo = mesh.getBoundingInfo(), boundingBox = boundingInfo.boundingBox;\n                this._scbiMin.minimizeInPlace(boundingBox.minimumWorld);\n                this._scbiMax.maximizeInPlace(boundingBox.maximumWorld);\n            }\n            const meshes = this._scene.meshes;\n            for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\n                const mesh = meshes[meshIndex];\n                if (!mesh || !mesh.isVisible || !mesh.isEnabled || !mesh.receiveShadows) {\n                    continue;\n                }\n                const boundingInfo = mesh.getBoundingInfo(), boundingBox = boundingInfo.boundingBox;\n                this._scbiMin.minimizeInPlace(boundingBox.minimumWorld);\n                this._scbiMax.maximizeInPlace(boundingBox.maximumWorld);\n            }\n        }\n        this._shadowCastersBoundingInfo.reConstruct(this._scbiMin, this._scbiMax);\n    }\n    /**\n     * Gets or sets the shadow casters bounding info.\n     * If you provide your own shadow casters bounding info, first enable freezeShadowCastersBoundingInfo\n     * so that the system won't overwrite the bounds you provide\n     */\n    get shadowCastersBoundingInfo() {\n        return this._shadowCastersBoundingInfo;\n    }\n    set shadowCastersBoundingInfo(boundingInfo) {\n        this._shadowCastersBoundingInfo = boundingInfo;\n    }\n    /**\n     * Sets the minimal and maximal distances to use when computing the cascade breaks.\n     *\n     * The values of min / max are typically the depth zmin and zmax values of your scene, for a given frame.\n     * If you don't know these values, simply leave them to their defaults and don't call this function.\n     * @param min minimal distance for the breaks (default to 0.)\n     * @param max maximal distance for the breaks (default to 1.)\n     */\n    setMinMaxDistance(min, max) {\n        if (this._minDistance === min && this._maxDistance === max) {\n            return;\n        }\n        if (min > max) {\n            min = 0;\n            max = 1;\n        }\n        if (min < 0) {\n            min = 0;\n        }\n        if (max > 1) {\n            max = 1;\n        }\n        this._minDistance = min;\n        this._maxDistance = max;\n        this._breaksAreDirty = true;\n    }\n    /** Gets the minimal distance used in the cascade break computation */\n    get minDistance() {\n        return this._minDistance;\n    }\n    /** Gets the maximal distance used in the cascade break computation */\n    get maxDistance() {\n        return this._maxDistance;\n    }\n    /**\n     * Gets the class name of that object\n     * @returns \"CascadedShadowGenerator\"\n     */\n    getClassName() {\n        return CascadedShadowGenerator.CLASSNAME;\n    }\n    /**\n     * Gets a cascade minimum extents\n     * @param cascadeIndex index of the cascade\n     * @returns the minimum cascade extents\n     */\n    getCascadeMinExtents(cascadeIndex) {\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMinExtents[cascadeIndex] : null;\n    }\n    /**\n     * Gets a cascade maximum extents\n     * @param cascadeIndex index of the cascade\n     * @returns the maximum cascade extents\n     */\n    getCascadeMaxExtents(cascadeIndex) {\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMaxExtents[cascadeIndex] : null;\n    }\n    /**\n     * Gets the shadow max z distance. It's the limit beyond which shadows are not displayed.\n     * It defaults to camera.maxZ\n     */\n    get shadowMaxZ() {\n        if (!this._getCamera()) {\n            return 0;\n        }\n        return this._shadowMaxZ;\n    }\n    /**\n     * Sets the shadow max z distance.\n     */\n    set shadowMaxZ(value) {\n        const camera = this._getCamera();\n        if (!camera) {\n            this._shadowMaxZ = value;\n            return;\n        }\n        if (this._shadowMaxZ === value || value < camera.minZ || value > camera.maxZ) {\n            return;\n        }\n        this._shadowMaxZ = value;\n        this._light._markMeshesAsLightDirty();\n        this._breaksAreDirty = true;\n    }\n    /**\n     * Gets or sets the debug flag.\n     * When enabled, the cascades are materialized by different colors on the screen.\n     */\n    get debug() {\n        return this._debug;\n    }\n    set debug(dbg) {\n        this._debug = dbg;\n        this._light._markMeshesAsLightDirty();\n    }\n    /**\n     * Gets or sets the depth clamping value.\n     *\n     * When enabled, it improves the shadow quality because the near z plane of the light frustum don't need to be adjusted\n     * to account for the shadow casters far away.\n     *\n     * Note that this property is incompatible with PCSS filtering, so it won't be used in that case.\n     */\n    get depthClamp() {\n        return this._depthClamp;\n    }\n    set depthClamp(value) {\n        this._depthClamp = value;\n    }\n    /**\n     * Gets or sets the percentage of blending between two cascades (value between 0. and 1.).\n     * It defaults to 0.1 (10% blending).\n     */\n    get cascadeBlendPercentage() {\n        return this._cascadeBlendPercentage;\n    }\n    set cascadeBlendPercentage(value) {\n        this._cascadeBlendPercentage = value;\n        this._light._markMeshesAsLightDirty();\n    }\n    /**\n     * Gets or set the lambda parameter.\n     * This parameter is used to split the camera frustum and create the cascades.\n     * It's a value between 0. and 1.: If 0, the split is a uniform split of the frustum, if 1 it is a logarithmic split.\n     * For all values in-between, it's a linear combination of the uniform and logarithm split algorithm.\n     */\n    get lambda() {\n        return this._lambda;\n    }\n    set lambda(value) {\n        const lambda = Math.min(Math.max(value, 0), 1);\n        if (this._lambda == lambda) {\n            return;\n        }\n        this._lambda = lambda;\n        this._breaksAreDirty = true;\n    }\n    /**\n     * Gets the view matrix corresponding to a given cascade\n     * @param cascadeNum cascade to retrieve the view matrix from\n     * @returns the cascade view matrix\n     */\n    getCascadeViewMatrix(cascadeNum) {\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._viewMatrices[cascadeNum] : null;\n    }\n    /**\n     * Gets the projection matrix corresponding to a given cascade\n     * @param cascadeNum cascade to retrieve the projection matrix from\n     * @returns the cascade projection matrix\n     */\n    getCascadeProjectionMatrix(cascadeNum) {\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._projectionMatrices[cascadeNum] : null;\n    }\n    /**\n     * Gets the transformation matrix corresponding to a given cascade\n     * @param cascadeNum cascade to retrieve the transformation matrix from\n     * @returns the cascade transformation matrix\n     */\n    getCascadeTransformMatrix(cascadeNum) {\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._transformMatrices[cascadeNum] : null;\n    }\n    /**\n     * Sets the depth renderer to use when autoCalcDepthBounds is enabled.\n     *\n     * Note that if no depth renderer is set, a new one will be automatically created internally when necessary.\n     *\n     * You should call this function if you already have a depth renderer enabled in your scene, to avoid\n     * doing multiple depth rendering each frame. If you provide your own depth renderer, make sure it stores linear depth!\n     * @param depthRenderer The depth renderer to use when autoCalcDepthBounds is enabled. If you pass null or don't call this function at all, a depth renderer will be automatically created\n     */\n    setDepthRenderer(depthRenderer) {\n        this._depthRenderer = depthRenderer;\n        if (this._depthReducer) {\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\n        }\n    }\n    /**\n     * Gets or sets the autoCalcDepthBounds property.\n     *\n     * When enabled, a depth rendering pass is first performed (with an internally created depth renderer or with the one\n     * you provide by calling setDepthRenderer). Then, a min/max reducing is applied on the depth map to compute the\n     * minimal and maximal depth of the map and those values are used as inputs for the setMinMaxDistance() function.\n     * It can greatly enhance the shadow quality, at the expense of more GPU works.\n     * When using this option, you should increase the value of the lambda parameter, and even set it to 1 for best results.\n     */\n    get autoCalcDepthBounds() {\n        return this._autoCalcDepthBounds;\n    }\n    set autoCalcDepthBounds(value) {\n        const camera = this._getCamera();\n        if (!camera) {\n            return;\n        }\n        this._autoCalcDepthBounds = value;\n        if (!value) {\n            if (this._depthReducer) {\n                this._depthReducer.deactivate();\n            }\n            this.setMinMaxDistance(0, 1);\n            return;\n        }\n        if (!this._depthReducer) {\n            this._depthReducer = new DepthReducer(camera);\n            this._depthReducer.onAfterReductionPerformed.add((minmax) => {\n                let min = minmax.min, max = minmax.max;\n                if (min >= max) {\n                    min = 0;\n                    max = 1;\n                }\n                if (min != this._minDistance || max != this._maxDistance) {\n                    this.setMinMaxDistance(min, max);\n                }\n            });\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\n        }\n        this._depthReducer.activate();\n    }\n    /**\n     * Defines the refresh rate of the min/max computation used when autoCalcDepthBounds is set to true\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\n     * Note that if you provided your own depth renderer through a call to setDepthRenderer, you are responsible\n     * for setting the refresh rate on the renderer yourself!\n     */\n    get autoCalcDepthBoundsRefreshRate() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._depthReducer) === null || _a === void 0 ? void 0 : _a.depthRenderer) === null || _b === void 0 ? void 0 : _b.getDepthMap().refreshRate) !== null && _c !== void 0 ? _c : -1;\n    }\n    set autoCalcDepthBoundsRefreshRate(value) {\n        var _a;\n        if ((_a = this._depthReducer) === null || _a === void 0 ? void 0 : _a.depthRenderer) {\n            this._depthReducer.depthRenderer.getDepthMap().refreshRate = value;\n        }\n    }\n    /**\n     * Create the cascade breaks according to the lambda, shadowMaxZ and min/max distance properties, as well as the camera near and far planes.\n     * This function is automatically called when updating lambda, shadowMaxZ and min/max distances, however you should call it yourself if\n     * you change the camera near/far planes!\n     */\n    splitFrustum() {\n        this._breaksAreDirty = true;\n    }\n    _splitFrustum() {\n        const camera = this._getCamera();\n        if (!camera) {\n            return;\n        }\n        const near = camera.minZ, far = camera.maxZ, cameraRange = far - near, minDistance = this._minDistance, maxDistance = this._shadowMaxZ < far && this._shadowMaxZ >= near ? Math.min((this._shadowMaxZ - near) / (far - near), this._maxDistance) : this._maxDistance;\n        const minZ = near + minDistance * cameraRange, maxZ = near + maxDistance * cameraRange;\n        const range = maxZ - minZ, ratio = maxZ / minZ;\n        for (let cascadeIndex = 0; cascadeIndex < this._cascades.length; ++cascadeIndex) {\n            const p = (cascadeIndex + 1) / this._numCascades, log = minZ * ratio ** p, uniform = minZ + range * p;\n            const d = this._lambda * (log - uniform) + uniform;\n            this._cascades[cascadeIndex].prevBreakDistance = cascadeIndex === 0 ? minDistance : this._cascades[cascadeIndex - 1].breakDistance;\n            this._cascades[cascadeIndex].breakDistance = (d - near) / cameraRange;\n            this._viewSpaceFrustumsZ[cascadeIndex] = d;\n            this._frustumLengths[cascadeIndex] = (this._cascades[cascadeIndex].breakDistance - this._cascades[cascadeIndex].prevBreakDistance) * cameraRange;\n        }\n        this._breaksAreDirty = false;\n    }\n    _computeMatrices() {\n        const scene = this._scene;\n        const camera = this._getCamera();\n        if (!camera) {\n            return;\n        }\n        Vector3.NormalizeToRef(this._light.getShadowDirection(0), this._lightDirection);\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\n        }\n        this._cachedDirection.copyFrom(this._lightDirection);\n        const useReverseDepthBuffer = scene.getEngine().useReverseDepthBuffer;\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\n            this._computeFrustumInWorldSpace(cascadeIndex);\n            this._computeCascadeFrustum(cascadeIndex);\n            this._cascadeMaxExtents[cascadeIndex].subtractToRef(this._cascadeMinExtents[cascadeIndex], tmpv1); // tmpv1 = cascadeExtents\n            // Get position of the shadow camera\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection.scale(this._cascadeMinExtents[cascadeIndex].z), this._shadowCameraPos[cascadeIndex]);\n            // Come up with a new orthographic camera for the shadow caster\n            Matrix.LookAtLHToRef(this._shadowCameraPos[cascadeIndex], this._frustumCenter[cascadeIndex], UpDir, this._viewMatrices[cascadeIndex]);\n            let minZ = 0, maxZ = tmpv1.z;\n            // Try to tighten minZ and maxZ based on the bounding box of the shadow casters\n            const boundingInfo = this._shadowCastersBoundingInfo;\n            boundingInfo.update(this._viewMatrices[cascadeIndex]);\n            maxZ = Math.min(maxZ, boundingInfo.boundingBox.maximumWorld.z);\n            if (!this._depthClamp || this.filter === ShadowGenerator.FILTER_PCSS) {\n                // If we don't use depth clamping, we must set minZ so that all shadow casters are in the light frustum\n                minZ = Math.min(minZ, boundingInfo.boundingBox.minimumWorld.z);\n            }\n            else {\n                // If using depth clamping, we can adjust minZ to reduce the [minZ, maxZ] range (and get some additional precision in the shadow map)\n                minZ = Math.max(minZ, boundingInfo.boundingBox.minimumWorld.z);\n            }\n            Matrix.OrthoOffCenterLHToRef(this._cascadeMinExtents[cascadeIndex].x, this._cascadeMaxExtents[cascadeIndex].x, this._cascadeMinExtents[cascadeIndex].y, this._cascadeMaxExtents[cascadeIndex].y, useReverseDepthBuffer ? maxZ : minZ, useReverseDepthBuffer ? minZ : maxZ, this._projectionMatrices[cascadeIndex], scene.getEngine().isNDCHalfZRange);\n            this._cascadeMinExtents[cascadeIndex].z = minZ;\n            this._cascadeMaxExtents[cascadeIndex].z = maxZ;\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\n            // Create the rounding matrix, by projecting the world-space origin and determining\n            // the fractional offset in texel space\n            Vector3.TransformCoordinatesToRef(ZeroVec, this._transformMatrices[cascadeIndex], tmpv1); // tmpv1 = shadowOrigin\n            tmpv1.scaleInPlace(this._mapSize / 2);\n            tmpv2.copyFromFloats(Math.round(tmpv1.x), Math.round(tmpv1.y), Math.round(tmpv1.z)); // tmpv2 = roundedOrigin\n            tmpv2.subtractInPlace(tmpv1).scaleInPlace(2 / this._mapSize); // tmpv2 = roundOffset\n            Matrix.TranslationToRef(tmpv2.x, tmpv2.y, 0.0, tmpMatrix);\n            this._projectionMatrices[cascadeIndex].multiplyToRef(tmpMatrix, this._projectionMatrices[cascadeIndex]);\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\n            this._transformMatrices[cascadeIndex].copyToArray(this._transformMatricesAsArray, cascadeIndex * 16);\n        }\n    }\n    // Get the 8 points of the view frustum in world space\n    _computeFrustumInWorldSpace(cascadeIndex) {\n        const camera = this._getCamera();\n        if (!camera) {\n            return;\n        }\n        const prevSplitDist = this._cascades[cascadeIndex].prevBreakDistance, splitDist = this._cascades[cascadeIndex].breakDistance;\n        const isNDCHalfZRange = this._scene.getEngine().isNDCHalfZRange;\n        camera.getViewMatrix(); // make sure the transformation matrix we get when calling 'getTransformationMatrix()' is calculated with an up to date view matrix\n        const invViewProj = Matrix.Invert(camera.getTransformationMatrix());\n        const cornerIndexOffset = this._scene.getEngine().useReverseDepthBuffer ? 4 : 0;\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNDCSpace.length; ++cornerIndex) {\n            tmpv1.copyFrom(CascadedShadowGenerator._FrustumCornersNDCSpace[(cornerIndex + cornerIndexOffset) % CascadedShadowGenerator._FrustumCornersNDCSpace.length]);\n            if (isNDCHalfZRange && tmpv1.z === -1) {\n                tmpv1.z = 0;\n            }\n            Vector3.TransformCoordinatesToRef(tmpv1, invViewProj, this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\n        }\n        // Get the corners of the current cascade slice of the view frustum\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNDCSpace.length / 2; ++cornerIndex) {\n            tmpv1.copyFrom(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4]).subtractInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\n            tmpv2.copyFrom(tmpv1).scaleInPlace(prevSplitDist); // near corner ray\n            tmpv1.scaleInPlace(splitDist); // far corner ray\n            tmpv1.addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4].copyFrom(tmpv1);\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].addInPlace(tmpv2);\n        }\n    }\n    _computeCascadeFrustum(cascadeIndex) {\n        this._cascadeMinExtents[cascadeIndex].copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cascadeMaxExtents[cascadeIndex].copyFromFloats(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\n        this._frustumCenter[cascadeIndex].copyFromFloats(0, 0, 0);\n        const camera = this._getCamera();\n        if (!camera) {\n            return;\n        }\n        // Calculate the centroid of the view frustum slice\n        for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\n            this._frustumCenter[cascadeIndex].addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\n        }\n        this._frustumCenter[cascadeIndex].scaleInPlace(1 / this._frustumCornersWorldSpace[cascadeIndex].length);\n        if (this.stabilizeCascades) {\n            // Calculate the radius of a bounding sphere surrounding the frustum corners\n            let sphereRadius = 0;\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\n                const dist = this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].subtractToRef(this._frustumCenter[cascadeIndex], tmpv1).length();\n                sphereRadius = Math.max(sphereRadius, dist);\n            }\n            sphereRadius = Math.ceil(sphereRadius * 16) / 16;\n            this._cascadeMaxExtents[cascadeIndex].copyFromFloats(sphereRadius, sphereRadius, sphereRadius);\n            this._cascadeMinExtents[cascadeIndex].copyFromFloats(-sphereRadius, -sphereRadius, -sphereRadius);\n        }\n        else {\n            // Create a temporary view matrix for the light\n            const lightCameraPos = this._frustumCenter[cascadeIndex];\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection, tmpv1); // tmpv1 = look at\n            Matrix.LookAtLHToRef(lightCameraPos, tmpv1, UpDir, tmpMatrix); // matrix = lightView\n            // Calculate an AABB around the frustum corners\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\n                Vector3.TransformCoordinatesToRef(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex], tmpMatrix, tmpv1);\n                this._cascadeMinExtents[cascadeIndex].minimizeInPlace(tmpv1);\n                this._cascadeMaxExtents[cascadeIndex].maximizeInPlace(tmpv1);\n            }\n        }\n    }\n    _recreateSceneUBOs() {\n        this._disposeSceneUBOs();\n        if (this._sceneUBOs) {\n            for (let i = 0; i < this._numCascades; ++i) {\n                this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for CSM Shadow Generator (light \"${this._light.name}\" cascade #${i})`));\n            }\n        }\n    }\n    /**\n     *  Support test.\n     */\n    static get IsSupported() {\n        const engine = EngineStore.LastCreatedEngine;\n        if (!engine) {\n            return false;\n        }\n        return engine._features.supportCSM;\n    }\n    /**\n     * Creates a Cascaded Shadow Generator object.\n     * A ShadowGenerator is the required tool to use the shadows.\n     * Each directional light casting shadows needs to use its own ShadowGenerator.\n     * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\n     * @param light The directional light object generating the shadows.\n     * @param usefulFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\n     * @param camera Camera associated with this shadow generator (default: null). If null, takes the scene active camera at the time we need to access it\n     */\n    constructor(mapSize, light, usefulFloatFirst, camera) {\n        if (!CascadedShadowGenerator.IsSupported) {\n            Logger.Error(\"CascadedShadowMap is not supported by the current engine.\");\n            return;\n        }\n        super(mapSize, light, usefulFloatFirst, camera);\n        this.usePercentageCloserFiltering = true;\n    }\n    _initializeGenerator() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;\n        this.penumbraDarkness = (_a = this.penumbraDarkness) !== null && _a !== void 0 ? _a : 1.0;\n        this._numCascades = (_b = this._numCascades) !== null && _b !== void 0 ? _b : CascadedShadowGenerator.DEFAULT_CASCADES_COUNT;\n        this.stabilizeCascades = (_c = this.stabilizeCascades) !== null && _c !== void 0 ? _c : false;\n        this._freezeShadowCastersBoundingInfoObservable = (_d = this._freezeShadowCastersBoundingInfoObservable) !== null && _d !== void 0 ? _d : null;\n        this.freezeShadowCastersBoundingInfo = (_e = this.freezeShadowCastersBoundingInfo) !== null && _e !== void 0 ? _e : false;\n        this._scbiMin = (_f = this._scbiMin) !== null && _f !== void 0 ? _f : new Vector3(0, 0, 0);\n        this._scbiMax = (_g = this._scbiMax) !== null && _g !== void 0 ? _g : new Vector3(0, 0, 0);\n        this._shadowCastersBoundingInfo = (_h = this._shadowCastersBoundingInfo) !== null && _h !== void 0 ? _h : new BoundingInfo(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n        this._breaksAreDirty = (_j = this._breaksAreDirty) !== null && _j !== void 0 ? _j : true;\n        this._minDistance = (_k = this._minDistance) !== null && _k !== void 0 ? _k : 0;\n        this._maxDistance = (_l = this._maxDistance) !== null && _l !== void 0 ? _l : 1;\n        this._currentLayer = (_m = this._currentLayer) !== null && _m !== void 0 ? _m : 0;\n        this._shadowMaxZ = (_q = (_o = this._shadowMaxZ) !== null && _o !== void 0 ? _o : (_p = this._getCamera()) === null || _p === void 0 ? void 0 : _p.maxZ) !== null && _q !== void 0 ? _q : 10000;\n        this._debug = (_r = this._debug) !== null && _r !== void 0 ? _r : false;\n        this._depthClamp = (_s = this._depthClamp) !== null && _s !== void 0 ? _s : true;\n        this._cascadeBlendPercentage = (_t = this._cascadeBlendPercentage) !== null && _t !== void 0 ? _t : 0.1;\n        this._lambda = (_u = this._lambda) !== null && _u !== void 0 ? _u : 0.5;\n        this._autoCalcDepthBounds = (_v = this._autoCalcDepthBounds) !== null && _v !== void 0 ? _v : false;\n        this._recreateSceneUBOs();\n        super._initializeGenerator();\n    }\n    _createTargetRenderTexture() {\n        const engine = this._scene.getEngine();\n        const size = { width: this._mapSize, height: this._mapSize, layers: this.numCascades };\n        this._shadowMap = new RenderTargetTexture(this._light.name + \"_CSMShadowMap\", size, this._scene, false, true, this._textureType, false, undefined, false, false, undefined /*, 6*/);\n        this._shadowMap.createDepthStencilTexture(engine.useReverseDepthBuffer ? 516 : 513, true);\n    }\n    _initializeShadowMap() {\n        super._initializeShadowMap();\n        if (this._shadowMap === null) {\n            return;\n        }\n        this._transformMatricesAsArray = new Float32Array(this._numCascades * 16);\n        this._viewSpaceFrustumsZ = new Array(this._numCascades);\n        this._frustumLengths = new Array(this._numCascades);\n        this._lightSizeUVCorrection = new Array(this._numCascades * 2);\n        this._depthCorrection = new Array(this._numCascades);\n        this._cascades = [];\n        this._viewMatrices = [];\n        this._projectionMatrices = [];\n        this._transformMatrices = [];\n        this._cascadeMinExtents = [];\n        this._cascadeMaxExtents = [];\n        this._frustumCenter = [];\n        this._shadowCameraPos = [];\n        this._frustumCornersWorldSpace = [];\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\n            this._cascades[cascadeIndex] = {\n                prevBreakDistance: 0,\n                breakDistance: 0,\n            };\n            this._viewMatrices[cascadeIndex] = Matrix.Zero();\n            this._projectionMatrices[cascadeIndex] = Matrix.Zero();\n            this._transformMatrices[cascadeIndex] = Matrix.Zero();\n            this._cascadeMinExtents[cascadeIndex] = new Vector3();\n            this._cascadeMaxExtents[cascadeIndex] = new Vector3();\n            this._frustumCenter[cascadeIndex] = new Vector3();\n            this._shadowCameraPos[cascadeIndex] = new Vector3();\n            this._frustumCornersWorldSpace[cascadeIndex] = new Array(CascadedShadowGenerator._FrustumCornersNDCSpace.length);\n            for (let i = 0; i < CascadedShadowGenerator._FrustumCornersNDCSpace.length; ++i) {\n                this._frustumCornersWorldSpace[cascadeIndex][i] = new Vector3();\n            }\n        }\n        const engine = this._scene.getEngine();\n        this._shadowMap.onBeforeBindObservable.clear();\n        this._shadowMap.onBeforeRenderObservable.clear();\n        this._shadowMap.onBeforeRenderObservable.add((layer) => {\n            if (this._sceneUBOs) {\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[layer]);\n            }\n            this._currentLayer = layer;\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\n                engine.setColorWrite(false);\n            }\n            this._scene.setTransformMatrix(this.getCascadeViewMatrix(layer), this.getCascadeProjectionMatrix(layer));\n            if (this._useUBO) {\n                this._scene.getSceneUniformBuffer().unbindEffect();\n                this._scene.finalizeSceneUbo();\n            }\n        });\n        this._shadowMap.onBeforeBindObservable.add(() => {\n            var _a;\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\n            (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, `cascaded shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\n            if (this._breaksAreDirty) {\n                this._splitFrustum();\n            }\n            this._computeMatrices();\n        });\n        this._splitFrustum();\n    }\n    _bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect) {\n        effect.setMatrix(\"viewProjection\", this.getCascadeTransformMatrix(this._currentLayer));\n    }\n    _isReadyCustomDefines(defines) {\n        defines.push(\"#define SM_DEPTHCLAMP \" + (this._depthClamp && this._filter !== ShadowGenerator.FILTER_PCSS ? \"1\" : \"0\"));\n    }\n    /**\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\n     * @param defines Defines of the material we want to update\n     * @param lightIndex Index of the light in the enabled light list of the material\n     */\n    prepareDefines(defines, lightIndex) {\n        super.prepareDefines(defines, lightIndex);\n        const scene = this._scene;\n        const light = this._light;\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\n            return;\n        }\n        defines[\"SHADOWCSM\" + lightIndex] = true;\n        defines[\"SHADOWCSMDEBUG\" + lightIndex] = this.debug;\n        defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = this.numCascades;\n        defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = scene.useRightHandedSystem;\n        const camera = this._getCamera();\n        if (camera && this._shadowMaxZ < camera.maxZ) {\n            defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = true;\n        }\n        if (this.cascadeBlendPercentage === 0) {\n            defines[\"SHADOWCSMNOBLEND\" + lightIndex] = true;\n        }\n    }\n    /**\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\n     * defined in the generator but impacting the effect).\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\n     * @param effect The effect we are binfing the information for\n     */\n    bindShadowLight(lightIndex, effect) {\n        const light = this._light;\n        const scene = this._scene;\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\n            return;\n        }\n        const camera = this._getCamera();\n        if (!camera) {\n            return;\n        }\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            return;\n        }\n        const width = shadowMap.getSize().width;\n        effect.setMatrices(\"lightMatrix\" + lightIndex, this._transformMatricesAsArray);\n        effect.setArray(\"viewFrustumZ\" + lightIndex, this._viewSpaceFrustumsZ);\n        effect.setFloat(\"cascadeBlendFactor\" + lightIndex, this.cascadeBlendPercentage === 0 ? 10000 : 1 / this.cascadeBlendPercentage);\n        effect.setArray(\"frustumLengths\" + lightIndex, this._frustumLengths);\n        // Only PCF uses depth stencil texture.\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, shadowMap);\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\n        }\n        else if (this._filter === ShadowGenerator.FILTER_PCSS) {\n            for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 0] =\n                    cascadeIndex === 0\n                        ? 1\n                        : (this._cascadeMaxExtents[0].x - this._cascadeMinExtents[0].x) / (this._cascadeMaxExtents[cascadeIndex].x - this._cascadeMinExtents[cascadeIndex].x); // x correction\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 1] =\n                    cascadeIndex === 0\n                        ? 1\n                        : (this._cascadeMaxExtents[0].y - this._cascadeMinExtents[0].y) / (this._cascadeMaxExtents[cascadeIndex].y - this._cascadeMinExtents[cascadeIndex].y); // y correction\n                this._depthCorrection[cascadeIndex] =\n                    cascadeIndex === 0\n                        ? 1\n                        : (this._cascadeMaxExtents[cascadeIndex].z - this._cascadeMinExtents[cascadeIndex].z) / (this._cascadeMaxExtents[0].z - this._cascadeMinExtents[0].z);\n            }\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, shadowMap);\n            effect.setTexture(\"depthSampler\" + lightIndex, shadowMap);\n            effect.setArray2(\"lightSizeUVCorrection\" + lightIndex, this._lightSizeUVCorrection);\n            effect.setArray(\"depthCorrection\" + lightIndex, this._depthCorrection);\n            effect.setFloat(\"penumbraDarkness\" + lightIndex, this.penumbraDarkness);\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), 1 / width, this._contactHardeningLightSizeUVRatio * width, this.frustumEdgeFalloff, lightIndex);\n        }\n        else {\n            effect.setTexture(\"shadowSampler\" + lightIndex, shadowMap);\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\n        }\n        light._uniformBuffer.updateFloat2(\"depthValues\", this.getLight().getDepthMinZ(camera), this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera), lightIndex);\n    }\n    /**\n     * Gets the transformation matrix of the first cascade used to project the meshes into the map from the light point of view.\n     * (eq to view projection * shadow projection matrices)\n     * @returns The transform matrix used to create the shadow map\n     */\n    getTransformMatrix() {\n        return this.getCascadeTransformMatrix(0);\n    }\n    /**\n     * Disposes the ShadowGenerator.\n     * Returns nothing.\n     */\n    dispose() {\n        super.dispose();\n        if (this._freezeShadowCastersBoundingInfoObservable) {\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\n            this._freezeShadowCastersBoundingInfoObservable = null;\n        }\n        if (this._depthReducer) {\n            this._depthReducer.dispose();\n            this._depthReducer = null;\n        }\n    }\n    /**\n     * Serializes the shadow generator setup to a json object.\n     * @returns The serialized JSON object\n     */\n    serialize() {\n        const serializationObject = super.serialize();\n        const shadowMap = this.getShadowMap();\n        if (!shadowMap) {\n            return serializationObject;\n        }\n        serializationObject.numCascades = this._numCascades;\n        serializationObject.debug = this._debug;\n        serializationObject.stabilizeCascades = this.stabilizeCascades;\n        serializationObject.lambda = this._lambda;\n        serializationObject.cascadeBlendPercentage = this.cascadeBlendPercentage;\n        serializationObject.depthClamp = this._depthClamp;\n        serializationObject.autoCalcDepthBounds = this.autoCalcDepthBounds;\n        serializationObject.shadowMaxZ = this._shadowMaxZ;\n        serializationObject.penumbraDarkness = this.penumbraDarkness;\n        serializationObject.freezeShadowCastersBoundingInfo = this._freezeShadowCastersBoundingInfo;\n        serializationObject.minDistance = this.minDistance;\n        serializationObject.maxDistance = this.maxDistance;\n        serializationObject.renderList = [];\n        if (shadowMap.renderList) {\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\n                const mesh = shadowMap.renderList[meshIndex];\n                serializationObject.renderList.push(mesh.id);\n            }\n        }\n        return serializationObject;\n    }\n    /**\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\n     * @param parsedShadowGenerator The JSON object to parse\n     * @param scene The scene to create the shadow map for\n     * @returns The parsed shadow generator\n     */\n    static Parse(parsedShadowGenerator, scene) {\n        const shadowGenerator = ShadowGenerator.Parse(parsedShadowGenerator, scene, (mapSize, light, camera) => new CascadedShadowGenerator(mapSize, light, undefined, camera));\n        if (parsedShadowGenerator.numCascades !== undefined) {\n            shadowGenerator.numCascades = parsedShadowGenerator.numCascades;\n        }\n        if (parsedShadowGenerator.debug !== undefined) {\n            shadowGenerator.debug = parsedShadowGenerator.debug;\n        }\n        if (parsedShadowGenerator.stabilizeCascades !== undefined) {\n            shadowGenerator.stabilizeCascades = parsedShadowGenerator.stabilizeCascades;\n        }\n        if (parsedShadowGenerator.lambda !== undefined) {\n            shadowGenerator.lambda = parsedShadowGenerator.lambda;\n        }\n        if (parsedShadowGenerator.cascadeBlendPercentage !== undefined) {\n            shadowGenerator.cascadeBlendPercentage = parsedShadowGenerator.cascadeBlendPercentage;\n        }\n        if (parsedShadowGenerator.depthClamp !== undefined) {\n            shadowGenerator.depthClamp = parsedShadowGenerator.depthClamp;\n        }\n        if (parsedShadowGenerator.autoCalcDepthBounds !== undefined) {\n            shadowGenerator.autoCalcDepthBounds = parsedShadowGenerator.autoCalcDepthBounds;\n        }\n        if (parsedShadowGenerator.shadowMaxZ !== undefined) {\n            shadowGenerator.shadowMaxZ = parsedShadowGenerator.shadowMaxZ;\n        }\n        if (parsedShadowGenerator.penumbraDarkness !== undefined) {\n            shadowGenerator.penumbraDarkness = parsedShadowGenerator.penumbraDarkness;\n        }\n        if (parsedShadowGenerator.freezeShadowCastersBoundingInfo !== undefined) {\n            shadowGenerator.freezeShadowCastersBoundingInfo = parsedShadowGenerator.freezeShadowCastersBoundingInfo;\n        }\n        if (parsedShadowGenerator.minDistance !== undefined && parsedShadowGenerator.maxDistance !== undefined) {\n            shadowGenerator.setMinMaxDistance(parsedShadowGenerator.minDistance, parsedShadowGenerator.maxDistance);\n        }\n        return shadowGenerator;\n    }\n}\nCascadedShadowGenerator._FrustumCornersNDCSpace = [\n    new Vector3(-1.0, +1.0, -1.0),\n    new Vector3(+1.0, +1.0, -1.0),\n    new Vector3(+1.0, -1.0, -1.0),\n    new Vector3(-1.0, -1.0, -1.0),\n    new Vector3(-1.0, +1.0, +1.0),\n    new Vector3(+1.0, +1.0, +1.0),\n    new Vector3(+1.0, -1.0, +1.0),\n    new Vector3(-1.0, -1.0, +1.0),\n];\n/**\n * Name of the CSM class\n */\nCascadedShadowGenerator.CLASSNAME = \"CascadedShadowGenerator\";\n/**\n * Defines the default number of cascades used by the CSM.\n */\nCascadedShadowGenerator.DEFAULT_CASCADES_COUNT = 4;\n/**\n * Defines the minimum number of cascades used by the CSM.\n */\nCascadedShadowGenerator.MIN_CASCADES_COUNT = 2;\n/**\n * Defines the maximum number of cascades used by the CSM.\n */\nCascadedShadowGenerator.MAX_CASCADES_COUNT = 4;\n/**\n * @internal\n */\nCascadedShadowGenerator._SceneComponentInitialization = (_) => {\n    throw _WarnImport(\"ShadowGeneratorSceneComponent\");\n};\n//# sourceMappingURL=cascadedShadowGenerator.js.map","import { ShadowGenerator } from \"./shadowGenerator.js\";\nimport { CascadedShadowGenerator } from \"./cascadedShadowGenerator.js\";\nimport { SceneComponentConstants } from \"../../sceneComponent.js\";\nimport { AbstractScene } from \"../../abstractScene.js\";\n// Adds the parser to the scene parsers.\nAbstractScene.AddParser(SceneComponentConstants.NAME_SHADOWGENERATOR, (parsedData, scene) => {\n    // Shadows\n    if (parsedData.shadowGenerators !== undefined && parsedData.shadowGenerators !== null) {\n        for (let index = 0, cache = parsedData.shadowGenerators.length; index < cache; index++) {\n            const parsedShadowGenerator = parsedData.shadowGenerators[index];\n            if (parsedShadowGenerator.className === CascadedShadowGenerator.CLASSNAME) {\n                CascadedShadowGenerator.Parse(parsedShadowGenerator, scene);\n            }\n            else {\n                ShadowGenerator.Parse(parsedShadowGenerator, scene);\n            }\n            // SG would be available on their associated lights\n        }\n    }\n});\n/**\n * Defines the shadow generator component responsible to manage any shadow generators\n * in a given scene.\n */\nexport class ShadowGeneratorSceneComponent {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    constructor(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_SHADOWGENERATOR;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    register() {\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR, this, this._gatherRenderTargets);\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    rebuild() {\n        // Nothing To Do Here.\n    }\n    /**\n     * Serializes the component data to the specified json object\n     * @param serializationObject The object to serialize to\n     */\n    serialize(serializationObject) {\n        // Shadows\n        serializationObject.shadowGenerators = [];\n        const lights = this.scene.lights;\n        for (const light of lights) {\n            const shadowGenerators = light.getShadowGenerators();\n            if (shadowGenerators) {\n                const iterator = shadowGenerators.values();\n                for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n                    const shadowGenerator = key.value;\n                    serializationObject.shadowGenerators.push(shadowGenerator.serialize());\n                }\n            }\n        }\n    }\n    /**\n     * Adds all the elements from the container to the scene\n     * @param container the container holding the elements\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addFromContainer(container) {\n        // Nothing To Do Here. (directly attached to a light)\n    }\n    /**\n     * Removes all the elements in the container from the scene\n     * @param container contains the elements to remove\n     * @param dispose if the removed element should be disposed (default: false)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removeFromContainer(container, dispose) {\n        // Nothing To Do Here. (directly attached to a light)\n    }\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    dispose() {\n        // Nothing To Do Here.\n    }\n    _gatherRenderTargets(renderTargets) {\n        // Shadows\n        const scene = this.scene;\n        if (this.scene.shadowsEnabled) {\n            for (let lightIndex = 0; lightIndex < scene.lights.length; lightIndex++) {\n                const light = scene.lights[lightIndex];\n                const shadowGenerators = light.getShadowGenerators();\n                if (light.isEnabled() && light.shadowEnabled && shadowGenerators) {\n                    const iterator = shadowGenerators.values();\n                    for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\n                        const shadowGenerator = key.value;\n                        const shadowMap = shadowGenerator.getShadowMap();\n                        if (scene.textures.indexOf(shadowMap) !== -1) {\n                            renderTargets.push(shadowMap);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nShadowGenerator._SceneComponentInitialization = (scene) => {\n    let component = scene._getComponent(SceneComponentConstants.NAME_SHADOWGENERATOR);\n    if (!component) {\n        component = new ShadowGeneratorSceneComponent(scene);\n        scene._addComponent(component);\n    }\n};\n//# sourceMappingURL=shadowGeneratorSceneComponent.js.map","import { DirectionalLight } from '@babylonjs/core/Lights/directionalLight'\nimport { HemisphericLight } from '@babylonjs/core/Lights/hemisphericLight'\nimport { ShadowGenerator } from '@babylonjs/core/Lights/Shadows/shadowGenerator'\nimport { Vector3 } from '@babylonjs/core/Maths/math.vector'\nimport '@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent'\n\nconst defaultOptions = {\n  enableShadows: true\n}\n\nfunction createLights(options = defaultOptions) {\n  const { enableShadows, shadowTransparency, intensity, scene } = options\n  const d_light = new DirectionalLight(\"DirectionalLight\", new Vector3(-0.3, -1, 0.4), scene)\n  d_light.position = new Vector3(-50,65,-50)\n  d_light.intensity = .65 * intensity\n  \n  const h_light = new HemisphericLight(\"HemisphericLight\", new Vector3(1, 1, 0), scene)\n  h_light.intensity = .4 * intensity\n  \n  if(enableShadows){\n    d_light.shadowMinZ = 1\n    d_light.shadowMaxZ = 70\n\t\t// d_light.autoCalcShadowZBounds = true\n    d_light.shadowGenerator = new ShadowGenerator(2048, d_light);\n    d_light.shadowGenerator.useCloseExponentialShadowMap = true; // best\n    d_light.shadowGenerator.darkness = shadowTransparency\n    // d_light.shadowGenerator.usePoissonSampling = true\n    // d_light.shadowGenerator.bias = .01\n  }\n\n  return {directional: d_light, hemispheric: h_light}\n}\n\nexport { createLights }","import { Vector4 } from \"../../Maths/math.vector.js\";\nimport { Color4 } from \"../../Maths/math.color.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData for a box\n * @param options an object used to set the following optional parameters for the box, required but can be empty\n * * size sets the width, height and depth of the box to the value of size, optional default 1\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.size\n * @param options.width\n * @param options.height\n * @param options.depth\n * @param options.faceUV\n * @param options.faceColors\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.wrap\n * @param options.topBaseAt\n * @param options.bottomBaseAt\n * @returns the VertexData of the box\n */\nexport function CreateBoxVertexData(options) {\n    const nbFaces = 6;\n    let indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\n    const normals = [\n        0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0,\n        1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\n    ];\n    const uvs = [];\n    let positions = [];\n    const width = options.width || options.size || 1;\n    const height = options.height || options.size || 1;\n    const depth = options.depth || options.size || 1;\n    const wrap = options.wrap || false;\n    let topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\n    let bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\n    topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\n    bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\n    const topOrder = [2, 0, 3, 1];\n    const bottomOrder = [2, 0, 1, 3];\n    let topIndex = topOrder[topBaseAt];\n    let bottomIndex = bottomOrder[bottomBaseAt];\n    let basePositions = [\n        1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,\n        1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1,\n    ];\n    if (wrap) {\n        indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\n        basePositions = [\n            -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1,\n        ];\n        let topFaceBase = [\n            [1, 1, 1],\n            [-1, 1, 1],\n            [-1, 1, -1],\n            [1, 1, -1],\n        ];\n        let bottomFaceBase = [\n            [-1, -1, 1],\n            [1, -1, 1],\n            [1, -1, -1],\n            [-1, -1, -1],\n        ];\n        const topFaceOrder = [17, 18, 19, 16];\n        const bottomFaceOrder = [22, 23, 20, 21];\n        while (topIndex > 0) {\n            topFaceBase.unshift(topFaceBase.pop());\n            topFaceOrder.unshift(topFaceOrder.pop());\n            topIndex--;\n        }\n        while (bottomIndex > 0) {\n            bottomFaceBase.unshift(bottomFaceBase.pop());\n            bottomFaceOrder.unshift(bottomFaceOrder.pop());\n            bottomIndex--;\n        }\n        topFaceBase = topFaceBase.flat();\n        bottomFaceBase = bottomFaceBase.flat();\n        basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\n        indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\n        indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\n    }\n    const scaleArray = [width / 2, height / 2, depth / 2];\n    positions = basePositions.reduce((accumulator, currentValue, currentIndex) => accumulator.concat(currentValue * scaleArray[currentIndex % 3]), []);\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n    const faceUV = options.faceUV || new Array(6);\n    const faceColors = options.faceColors;\n    const colors = [];\n    // default face colors and UV if undefined\n    for (let f = 0; f < 6; f++) {\n        if (faceUV[f] === undefined) {\n            faceUV[f] = new Vector4(0, 0, 1, 1);\n        }\n        if (faceColors && faceColors[f] === undefined) {\n            faceColors[f] = new Color4(1, 1, 1, 1);\n        }\n    }\n    // Create each face in turn.\n    for (let index = 0; index < nbFaces; index++) {\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\n        if (faceColors) {\n            for (let c = 0; c < 4; c++) {\n                colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\n            }\n        }\n    }\n    // sides\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n    // Result\n    const vertexData = new VertexData();\n    vertexData.indices = indices;\n    vertexData.positions = positions;\n    vertexData.normals = normals;\n    vertexData.uvs = uvs;\n    if (faceColors) {\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\n        vertexData.colors = totalColors;\n    }\n    return vertexData;\n}\n/**\n * Creates a box mesh\n * * The parameter `size` sets the size (float) of each box side (default 1)\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\n * * Please read this tutorial : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#box\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.size\n * @param options.width\n * @param options.height\n * @param options.depth\n * @param options.faceUV\n * @param options.faceColors\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.wrap\n * @param options.topBaseAt\n * @param options.bottomBaseAt\n * @param options.updatable\n * @param scene defines the hosting scene\n * @returns the box mesh\n */\nexport function CreateBox(name, options = {}, scene = null) {\n    const box = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    box._originalBuilderSideOrientation = options.sideOrientation;\n    const vertexData = CreateBoxVertexData(options);\n    vertexData.applyToMesh(box, options.updatable);\n    return box;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated please use CreateBox directly\n */\nexport const BoxBuilder = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    CreateBox,\n};\n// Side effects\nVertexData.CreateBox = CreateBoxVertexData;\nMesh.CreateBox = (name, size, scene = null, updatable, sideOrientation) => {\n    const options = {\n        size,\n        sideOrientation,\n        updatable,\n    };\n    return CreateBox(name, options, scene);\n};\n//# sourceMappingURL=boxBuilder.js.map","\n/**\n * Configuration needed for prepass-capable materials\n */\nexport class PrePassConfiguration {\n    constructor() {\n        /**\n         * Previous world matrices of meshes carrying this material\n         * Used for computing velocity\n         */\n        this.previousWorldMatrices = {};\n        /**\n         * Previous bones of meshes carrying this material\n         * Used for computing velocity\n         */\n        this.previousBones = {};\n    }\n    /**\n     * Add the required uniforms to the current list.\n     * @param uniforms defines the current uniform list.\n     */\n    static AddUniforms(uniforms) {\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\n    }\n    /**\n     * Add the required samplers to the current list.\n     * @param samplers defines the current sampler list.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static AddSamplers(samplers) {\n        // pass\n    }\n    /**\n     * Binds the material data.\n     * @param effect defines the effect to update\n     * @param scene defines the scene the material belongs to.\n     * @param mesh The mesh\n     * @param world World matrix of this mesh\n     * @param isFrozen Is the material frozen\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bindForSubMesh(effect, scene, mesh, world, isFrozen) {\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\n            if (scene.prePassRenderer.getIndex(2) !== -1) {\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n                }\n                if (!this.previousViewProjection) {\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\n                }\n                const engine = scene.getEngine();\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\n                    // First update of the prepass configuration for this rendering pass\n                    this._lastUpdateFrameId = engine.frameId;\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\n                }\n                else if (this._lastUpdateFrameId !== engine.frameId) {\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\n                    this._lastUpdateFrameId = engine.frameId;\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\n                }\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n            }\n        }\n    }\n}\n//# sourceMappingURL=prePassConfiguration.js.map","import { Matrix } from \"../Maths/math.vector.js\";\nimport { Material } from \"../Materials/material.js\";\n/**\n * Base class of materials working in push mode in babylon JS\n * @internal\n */\nexport class PushMaterial extends Material {\n    constructor(name, scene, storeEffectOnSubMeshes = true) {\n        super(name, scene);\n        this._normalMatrix = new Matrix();\n        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\n    }\n    getEffect() {\n        return this._storeEffectOnSubMeshes ? this._activeEffect : super.getEffect();\n    }\n    isReady(mesh, useInstances) {\n        if (!mesh) {\n            return false;\n        }\n        if (!this._storeEffectOnSubMeshes) {\n            return true;\n        }\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n            return true;\n        }\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\n    }\n    _isReadyForSubMesh(subMesh) {\n        const defines = subMesh.materialDefines;\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\n            if (defines._renderId === this.getScene().getRenderId()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Binds the given world matrix to the active effect\n     *\n     * @param world the matrix to bind\n     */\n    bindOnlyWorldMatrix(world) {\n        this._activeEffect.setMatrix(\"world\", world);\n    }\n    /**\n     * Binds the given normal matrix to the active effect\n     *\n     * @param normalMatrix the matrix to bind\n     */\n    bindOnlyNormalMatrix(normalMatrix) {\n        this._activeEffect.setMatrix(\"normalMatrix\", normalMatrix);\n    }\n    bind(world, mesh) {\n        if (!mesh) {\n            return;\n        }\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\n    }\n    _afterBind(mesh, effect = null) {\n        super._afterBind(mesh, effect);\n        this.getScene()._cachedEffect = effect;\n        if (effect) {\n            effect._forceRebindOnNextCall = false;\n        }\n    }\n    _mustRebind(scene, effect, visibility = 1) {\n        return scene.isCachedMaterialInvalid(this, effect, visibility);\n    }\n    dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        this._activeEffect = undefined;\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\n    }\n}\n//# sourceMappingURL=pushMaterial.js.map","import { Engine } from \"../Engines/engine.js\";\n\n/**\n * This groups all the flags used to control the materials channel.\n */\nexport class MaterialFlags {\n    /**\n     * Are diffuse textures enabled in the application.\n     */\n    static get DiffuseTextureEnabled() {\n        return this._DiffuseTextureEnabled;\n    }\n    static set DiffuseTextureEnabled(value) {\n        if (this._DiffuseTextureEnabled === value) {\n            return;\n        }\n        this._DiffuseTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are detail textures enabled in the application.\n     */\n    static get DetailTextureEnabled() {\n        return this._DetailTextureEnabled;\n    }\n    static set DetailTextureEnabled(value) {\n        if (this._DetailTextureEnabled === value) {\n            return;\n        }\n        this._DetailTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are decal maps enabled in the application.\n     */\n    static get DecalMapEnabled() {\n        return this._DecalMapEnabled;\n    }\n    static set DecalMapEnabled(value) {\n        if (this._DecalMapEnabled === value) {\n            return;\n        }\n        this._DecalMapEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are ambient textures enabled in the application.\n     */\n    static get AmbientTextureEnabled() {\n        return this._AmbientTextureEnabled;\n    }\n    static set AmbientTextureEnabled(value) {\n        if (this._AmbientTextureEnabled === value) {\n            return;\n        }\n        this._AmbientTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are opacity textures enabled in the application.\n     */\n    static get OpacityTextureEnabled() {\n        return this._OpacityTextureEnabled;\n    }\n    static set OpacityTextureEnabled(value) {\n        if (this._OpacityTextureEnabled === value) {\n            return;\n        }\n        this._OpacityTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are reflection textures enabled in the application.\n     */\n    static get ReflectionTextureEnabled() {\n        return this._ReflectionTextureEnabled;\n    }\n    static set ReflectionTextureEnabled(value) {\n        if (this._ReflectionTextureEnabled === value) {\n            return;\n        }\n        this._ReflectionTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are emissive textures enabled in the application.\n     */\n    static get EmissiveTextureEnabled() {\n        return this._EmissiveTextureEnabled;\n    }\n    static set EmissiveTextureEnabled(value) {\n        if (this._EmissiveTextureEnabled === value) {\n            return;\n        }\n        this._EmissiveTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are specular textures enabled in the application.\n     */\n    static get SpecularTextureEnabled() {\n        return this._SpecularTextureEnabled;\n    }\n    static set SpecularTextureEnabled(value) {\n        if (this._SpecularTextureEnabled === value) {\n            return;\n        }\n        this._SpecularTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are bump textures enabled in the application.\n     */\n    static get BumpTextureEnabled() {\n        return this._BumpTextureEnabled;\n    }\n    static set BumpTextureEnabled(value) {\n        if (this._BumpTextureEnabled === value) {\n            return;\n        }\n        this._BumpTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are lightmap textures enabled in the application.\n     */\n    static get LightmapTextureEnabled() {\n        return this._LightmapTextureEnabled;\n    }\n    static set LightmapTextureEnabled(value) {\n        if (this._LightmapTextureEnabled === value) {\n            return;\n        }\n        this._LightmapTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are refraction textures enabled in the application.\n     */\n    static get RefractionTextureEnabled() {\n        return this._RefractionTextureEnabled;\n    }\n    static set RefractionTextureEnabled(value) {\n        if (this._RefractionTextureEnabled === value) {\n            return;\n        }\n        this._RefractionTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are color grading textures enabled in the application.\n     */\n    static get ColorGradingTextureEnabled() {\n        return this._ColorGradingTextureEnabled;\n    }\n    static set ColorGradingTextureEnabled(value) {\n        if (this._ColorGradingTextureEnabled === value) {\n            return;\n        }\n        this._ColorGradingTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are fresnels enabled in the application.\n     */\n    static get FresnelEnabled() {\n        return this._FresnelEnabled;\n    }\n    static set FresnelEnabled(value) {\n        if (this._FresnelEnabled === value) {\n            return;\n        }\n        this._FresnelEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(4);\n    }\n    /**\n     * Are clear coat textures enabled in the application.\n     */\n    static get ClearCoatTextureEnabled() {\n        return this._ClearCoatTextureEnabled;\n    }\n    static set ClearCoatTextureEnabled(value) {\n        if (this._ClearCoatTextureEnabled === value) {\n            return;\n        }\n        this._ClearCoatTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are clear coat bump textures enabled in the application.\n     */\n    static get ClearCoatBumpTextureEnabled() {\n        return this._ClearCoatBumpTextureEnabled;\n    }\n    static set ClearCoatBumpTextureEnabled(value) {\n        if (this._ClearCoatBumpTextureEnabled === value) {\n            return;\n        }\n        this._ClearCoatBumpTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are clear coat tint textures enabled in the application.\n     */\n    static get ClearCoatTintTextureEnabled() {\n        return this._ClearCoatTintTextureEnabled;\n    }\n    static set ClearCoatTintTextureEnabled(value) {\n        if (this._ClearCoatTintTextureEnabled === value) {\n            return;\n        }\n        this._ClearCoatTintTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are sheen textures enabled in the application.\n     */\n    static get SheenTextureEnabled() {\n        return this._SheenTextureEnabled;\n    }\n    static set SheenTextureEnabled(value) {\n        if (this._SheenTextureEnabled === value) {\n            return;\n        }\n        this._SheenTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are anisotropic textures enabled in the application.\n     */\n    static get AnisotropicTextureEnabled() {\n        return this._AnisotropicTextureEnabled;\n    }\n    static set AnisotropicTextureEnabled(value) {\n        if (this._AnisotropicTextureEnabled === value) {\n            return;\n        }\n        this._AnisotropicTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are thickness textures enabled in the application.\n     */\n    static get ThicknessTextureEnabled() {\n        return this._ThicknessTextureEnabled;\n    }\n    static set ThicknessTextureEnabled(value) {\n        if (this._ThicknessTextureEnabled === value) {\n            return;\n        }\n        this._ThicknessTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are refraction intensity textures enabled in the application.\n     */\n    static get RefractionIntensityTextureEnabled() {\n        return this._ThicknessTextureEnabled;\n    }\n    static set RefractionIntensityTextureEnabled(value) {\n        if (this._RefractionIntensityTextureEnabled === value) {\n            return;\n        }\n        this._RefractionIntensityTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are translucency intensity textures enabled in the application.\n     */\n    static get TranslucencyIntensityTextureEnabled() {\n        return this._ThicknessTextureEnabled;\n    }\n    static set TranslucencyIntensityTextureEnabled(value) {\n        if (this._TranslucencyIntensityTextureEnabled === value) {\n            return;\n        }\n        this._TranslucencyIntensityTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n    /**\n     * Are translucency intensity textures enabled in the application.\n     */\n    static get IridescenceTextureEnabled() {\n        return this._IridescenceTextureEnabled;\n    }\n    static set IridescenceTextureEnabled(value) {\n        if (this._IridescenceTextureEnabled === value) {\n            return;\n        }\n        this._IridescenceTextureEnabled = value;\n        Engine.MarkAllMaterialsAsDirty(1);\n    }\n}\n// Flags used to enable or disable a type of texture for all Standard Materials\nMaterialFlags._DiffuseTextureEnabled = true;\nMaterialFlags._DetailTextureEnabled = true;\nMaterialFlags._DecalMapEnabled = true;\nMaterialFlags._AmbientTextureEnabled = true;\nMaterialFlags._OpacityTextureEnabled = true;\nMaterialFlags._ReflectionTextureEnabled = true;\nMaterialFlags._EmissiveTextureEnabled = true;\nMaterialFlags._SpecularTextureEnabled = true;\nMaterialFlags._BumpTextureEnabled = true;\nMaterialFlags._LightmapTextureEnabled = true;\nMaterialFlags._RefractionTextureEnabled = true;\nMaterialFlags._ColorGradingTextureEnabled = true;\nMaterialFlags._FresnelEnabled = true;\nMaterialFlags._ClearCoatTextureEnabled = true;\nMaterialFlags._ClearCoatBumpTextureEnabled = true;\nMaterialFlags._ClearCoatTintTextureEnabled = true;\nMaterialFlags._SheenTextureEnabled = true;\nMaterialFlags._AnisotropicTextureEnabled = true;\nMaterialFlags._ThicknessTextureEnabled = true;\nMaterialFlags._RefractionIntensityTextureEnabled = true;\nMaterialFlags._TranslucencyIntensityTextureEnabled = true;\nMaterialFlags._IridescenceTextureEnabled = true;\n//# sourceMappingURL=materialFlags.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"decalFragmentDeclaration\";\nconst shader = `#ifdef DECAL\nuniform vec4 vDecalInfos;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const decalFragmentDeclaration = { name, shader };\n//# sourceMappingURL=decalFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nimport \"./decalFragmentDeclaration.js\";\nconst name = \"defaultFragmentDeclaration\";\nconst shader = `uniform vec4 vEyePosition;\runiform vec4 vDiffuseColor;\r#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\r#endif\nuniform vec3 vEmissiveColor;\runiform vec3 vAmbientColor;\runiform float visibility;\r#ifdef DIFFUSE\nuniform vec2 vDiffuseInfos;\r#endif\n#ifdef AMBIENT\nuniform vec2 vAmbientInfos;\r#endif\n#ifdef OPACITY \nuniform vec2 vOpacityInfos;\r#endif\n#ifdef EMISSIVE\nuniform vec2 vEmissiveInfos;\r#endif\n#ifdef LIGHTMAP\nuniform vec2 vLightmapInfos;\r#endif\n#ifdef BUMP\nuniform vec3 vBumpInfos;\runiform vec2 vTangentSpaceParams;\r#endif\n#ifdef ALPHATEST\nuniform float alphaCutOff;\r#endif\n#if defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_PROJECTION) || defined(REFRACTION) || defined(PREPASS)\nuniform mat4 view;\r#endif\n#ifdef REFRACTION\nuniform vec4 vRefractionInfos;\r#ifndef REFRACTIONMAP_3D\nuniform mat4 refractionMatrix;\r#endif\n#ifdef REFRACTIONFRESNEL\nuniform vec4 refractionLeftColor;\runiform vec4 refractionRightColor;\r#endif\n#if defined(USE_LOCAL_REFRACTIONMAP_CUBIC) && defined(REFRACTIONMAP_3D)\nuniform vec3 vRefractionPosition;\runiform vec3 vRefractionSize; \r#endif\n#endif\n#if defined(SPECULAR) && defined(SPECULARTERM)\nuniform vec2 vSpecularInfos;\r#endif\n#ifdef DIFFUSEFRESNEL\nuniform vec4 diffuseLeftColor;\runiform vec4 diffuseRightColor;\r#endif\n#ifdef OPACITYFRESNEL\nuniform vec4 opacityParts;\r#endif\n#ifdef EMISSIVEFRESNEL\nuniform vec4 emissiveLeftColor;\runiform vec4 emissiveRightColor;\r#endif\n#ifdef REFLECTION\nuniform vec2 vReflectionInfos;\r#if defined(REFLECTIONMAP_PLANAR) || defined(REFLECTIONMAP_CUBIC) || defined(REFLECTIONMAP_PROJECTION) || defined(REFLECTIONMAP_EQUIRECTANGULAR) || defined(REFLECTIONMAP_SPHERICAL) || defined(REFLECTIONMAP_SKYBOX)\nuniform mat4 reflectionMatrix;\r#endif\n#ifndef REFLECTIONMAP_SKYBOX\n#if defined(USE_LOCAL_REFLECTIONMAP_CUBIC) && defined(REFLECTIONMAP_CUBIC)\nuniform vec3 vReflectionPosition;\runiform vec3 vReflectionSize; \r#endif\n#endif\n#ifdef REFLECTIONFRESNEL\nuniform vec4 reflectionLeftColor;\runiform vec4 reflectionRightColor;\r#endif\n#endif\n#ifdef DETAIL\nuniform vec4 vDetailInfos;\r#endif\n#include<decalFragmentDeclaration>\n#define ADDITIONAL_FRAGMENT_DECLARATION\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const defaultFragmentDeclaration = { name, shader };\n//# sourceMappingURL=defaultFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nimport \"./sceneUboDeclaration.js\";\nimport \"./meshUboDeclaration.js\";\nconst name = \"defaultUboDeclaration\";\nconst shader = `layout(std140,column_major) uniform;\runiform Material\r{\rvec4 diffuseLeftColor;\rvec4 diffuseRightColor;\rvec4 opacityParts;\rvec4 reflectionLeftColor;\rvec4 reflectionRightColor;\rvec4 refractionLeftColor;\rvec4 refractionRightColor;\rvec4 emissiveLeftColor;\rvec4 emissiveRightColor;\rvec2 vDiffuseInfos;\rvec2 vAmbientInfos;\rvec2 vOpacityInfos;\rvec2 vReflectionInfos;\rvec3 vReflectionPosition;\rvec3 vReflectionSize;\rvec2 vEmissiveInfos;\rvec2 vLightmapInfos;\rvec2 vSpecularInfos;\rvec3 vBumpInfos;\rmat4 diffuseMatrix;\rmat4 ambientMatrix;\rmat4 opacityMatrix;\rmat4 reflectionMatrix;\rmat4 emissiveMatrix;\rmat4 lightmapMatrix;\rmat4 specularMatrix;\rmat4 bumpMatrix;\rvec2 vTangentSpaceParams;\rfloat pointSize;\rfloat alphaCutOff;\rmat4 refractionMatrix;\rvec4 vRefractionInfos;\rvec3 vRefractionPosition;\rvec3 vRefractionSize;\rvec4 vSpecularColor;\rvec3 vEmissiveColor;\rvec4 vDiffuseColor;\rvec3 vAmbientColor;\r#define ADDITIONAL_UBO_DECLARATION\n};\r#include<sceneUboDeclaration>\n#include<meshUboDeclaration>\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const defaultUboDeclaration = { name, shader };\n//# sourceMappingURL=defaultUboDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"oitDeclaration\";\nconst shader = `#ifdef ORDER_INDEPENDENT_TRANSPARENCY\n#extension GL_EXT_draw_buffers : require\nlayout(location=0) out vec2 depth; \rlayout(location=1) out vec4 frontColor;\rlayout(location=2) out vec4 backColor;\r#define MAX_DEPTH 99999.0\nhighp vec4 gl_FragColor;\runiform sampler2D oitDepthSampler;\runiform sampler2D oitFrontColorSampler;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const oitDeclaration = { name, shader };\n//# sourceMappingURL=oitDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"mainUVVaryingDeclaration\";\nconst shader = `#ifdef MAINUV{X}\nvarying vec2 vMainUV{X};\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const mainUVVaryingDeclaration = { name, shader };\n//# sourceMappingURL=mainUVVaryingDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"lightFragmentDeclaration\";\nconst shader = `#ifdef LIGHT{X}\nuniform vec4 vLightData{X};\runiform vec4 vLightDiffuse{X};\r#ifdef SPECULARTERM\nuniform vec4 vLightSpecular{X};\r#else\nvec4 vLightSpecular{X}=vec4(0.);\r#endif\n#ifdef SHADOW{X}\n#ifdef SHADOWCSM{X}\nuniform mat4 lightMatrix{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float viewFrustumZ{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float frustumLengths{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float cascadeBlendFactor{X};\rvarying vec4 vPositionFromLight{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying float vDepthMetric{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying vec4 vPositionFromCamera{X};\r#if defined(SHADOWPCSS{X})\nuniform highp sampler2DArrayShadow shadowSampler{X};\runiform highp sampler2DArray depthSampler{X};\runiform vec2 lightSizeUVCorrection{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float depthCorrection{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float penumbraDarkness{X};\r#elif defined(SHADOWPCF{X})\nuniform highp sampler2DArrayShadow shadowSampler{X};\r#else\nuniform highp sampler2DArray shadowSampler{X};\r#endif\n#ifdef SHADOWCSMDEBUG{X}\nconst vec3 vCascadeColorsMultiplier{X}[8]=vec3[8]\r(\rvec3 ( 1.5,0.0,0.0 ),\rvec3 ( 0.0,1.5,0.0 ),\rvec3 ( 0.0,0.0,5.5 ),\rvec3 ( 1.5,0.0,5.5 ),\rvec3 ( 1.5,1.5,0.0 ),\rvec3 ( 1.0,1.0,1.0 ),\rvec3 ( 0.0,1.0,5.5 ),\rvec3 ( 0.5,3.5,0.75 )\r);\rvec3 shadowDebug{X};\r#endif\n#ifdef SHADOWCSMUSESHADOWMAXZ{X}\nint index{X}=-1;\r#else\nint index{X}=SHADOWCSMNUM_CASCADES{X}-1;\r#endif\nfloat diff{X}=0.;\r#elif defined(SHADOWCUBE{X})\nuniform samplerCube shadowSampler{X};\r#else\nvarying vec4 vPositionFromLight{X};\rvarying float vDepthMetric{X};\r#if defined(SHADOWPCSS{X})\nuniform highp sampler2DShadow shadowSampler{X};\runiform highp sampler2D depthSampler{X};\r#elif defined(SHADOWPCF{X})\nuniform highp sampler2DShadow shadowSampler{X};\r#else\nuniform sampler2D shadowSampler{X};\r#endif\nuniform mat4 lightMatrix{X};\r#endif\nuniform vec4 shadowsInfo{X};\runiform vec2 depthValues{X};\r#endif\n#ifdef SPOTLIGHT{X}\nuniform vec4 vLightDirection{X};\runiform vec4 vLightFalloff{X};\r#elif defined(POINTLIGHT{X})\nuniform vec4 vLightFalloff{X};\r#elif defined(HEMILIGHT{X})\nuniform vec3 vLightGround{X};\r#endif\n#ifdef PROJECTEDLIGHTTEXTURE{X}\nuniform mat4 textureProjectionMatrix{X};\runiform sampler2D projectionLightSampler{X};\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightFragmentDeclaration = { name, shader };\n//# sourceMappingURL=lightFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"lightUboDeclaration\";\nconst shader = `#ifdef LIGHT{X}\nuniform Light{X}\r{\rvec4 vLightData;\rvec4 vLightDiffuse;\rvec4 vLightSpecular;\r#ifdef SPOTLIGHT{X}\nvec4 vLightDirection;\rvec4 vLightFalloff;\r#elif defined(POINTLIGHT{X})\nvec4 vLightFalloff;\r#elif defined(HEMILIGHT{X})\nvec3 vLightGround;\r#endif\nvec4 shadowsInfo;\rvec2 depthValues;\r} light{X};\r#ifdef PROJECTEDLIGHTTEXTURE{X}\nuniform mat4 textureProjectionMatrix{X};\runiform sampler2D projectionLightSampler{X};\r#endif\n#ifdef SHADOW{X}\n#ifdef SHADOWCSM{X}\nuniform mat4 lightMatrix{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float viewFrustumZ{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float frustumLengths{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float cascadeBlendFactor{X};\rvarying vec4 vPositionFromLight{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying float vDepthMetric{X}[SHADOWCSMNUM_CASCADES{X}];\rvarying vec4 vPositionFromCamera{X};\r#if defined(SHADOWPCSS{X})\nuniform highp sampler2DArrayShadow shadowSampler{X};\runiform highp sampler2DArray depthSampler{X};\runiform vec2 lightSizeUVCorrection{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float depthCorrection{X}[SHADOWCSMNUM_CASCADES{X}];\runiform float penumbraDarkness{X};\r#elif defined(SHADOWPCF{X})\nuniform highp sampler2DArrayShadow shadowSampler{X};\r#else\nuniform highp sampler2DArray shadowSampler{X};\r#endif\n#ifdef SHADOWCSMDEBUG{X}\nconst vec3 vCascadeColorsMultiplier{X}[8]=vec3[8]\r(\rvec3 ( 1.5,0.0,0.0 ),\rvec3 ( 0.0,1.5,0.0 ),\rvec3 ( 0.0,0.0,5.5 ),\rvec3 ( 1.5,0.0,5.5 ),\rvec3 ( 1.5,1.5,0.0 ),\rvec3 ( 1.0,1.0,1.0 ),\rvec3 ( 0.0,1.0,5.5 ),\rvec3 ( 0.5,3.5,0.75 )\r);\rvec3 shadowDebug{X};\r#endif\n#ifdef SHADOWCSMUSESHADOWMAXZ{X}\nint index{X}=-1;\r#else\nint index{X}=SHADOWCSMNUM_CASCADES{X}-1;\r#endif\nfloat diff{X}=0.;\r#elif defined(SHADOWCUBE{X})\nuniform samplerCube shadowSampler{X}; \r#else\nvarying vec4 vPositionFromLight{X};\rvarying float vDepthMetric{X};\r#if defined(SHADOWPCSS{X})\nuniform highp sampler2DShadow shadowSampler{X};\runiform highp sampler2D depthSampler{X};\r#elif defined(SHADOWPCF{X})\nuniform highp sampler2DShadow shadowSampler{X};\r#else\nuniform sampler2D shadowSampler{X};\r#endif\nuniform mat4 lightMatrix{X};\r#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightUboDeclaration = { name, shader };\n//# sourceMappingURL=lightUboDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"lightsFragmentFunctions\";\nconst shader = `struct lightingInfo\r{\rvec3 diffuse;\r#ifdef SPECULARTERM\nvec3 specular;\r#endif\n#ifdef NDOTL\nfloat ndl;\r#endif\n};\rlightingInfo computeLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 lightVectorW;\rfloat attenuation=1.0;\rif (lightData.w==0.)\r{\rvec3 direction=lightData.xyz-vPositionW;\rattenuation=max(0.,1.0-length(direction)/range);\rlightVectorW=normalize(direction);\r}\relse\r{\rlightVectorW=normalize(-lightData.xyz);\r}\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rlightingInfo computeSpotLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec4 lightDirection,vec3 diffuseColor,vec3 specularColor,float range,float glossiness) {\rlightingInfo result;\rvec3 direction=lightData.xyz-vPositionW;\rvec3 lightVectorW=normalize(direction);\rfloat attenuation=max(0.,1.0-length(direction)/range);\rfloat cosAngle=max(0.,dot(lightDirection.xyz,-lightVectorW));\rif (cosAngle>=lightDirection.w)\r{\rcosAngle=max(0.,pow(cosAngle,lightData.w));\rattenuation*=cosAngle;\rfloat ndl=max(0.,dot(vNormal,lightVectorW));\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=ndl*diffuseColor*attenuation;\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightVectorW);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor*attenuation;\r#endif\nreturn result;\r}\rresult.diffuse=vec3(0.);\r#ifdef SPECULARTERM\nresult.specular=vec3(0.);\r#endif\n#ifdef NDOTL\nresult.ndl=0.;\r#endif\nreturn result;\r}\rlightingInfo computeHemisphericLighting(vec3 viewDirectionW,vec3 vNormal,vec4 lightData,vec3 diffuseColor,vec3 specularColor,vec3 groundColor,float glossiness) {\rlightingInfo result;\rfloat ndl=dot(vNormal,lightData.xyz)*0.5+0.5;\r#ifdef NDOTL\nresult.ndl=ndl;\r#endif\nresult.diffuse=mix(groundColor,diffuseColor,ndl);\r#ifdef SPECULARTERM\nvec3 angleW=normalize(viewDirectionW+lightData.xyz);\rfloat specComp=max(0.,dot(vNormal,angleW));\rspecComp=pow(specComp,max(1.,glossiness));\rresult.specular=specComp*specularColor;\r#endif\nreturn result;\r}\r#define inline\nvec3 computeProjectionTextureDiffuseLighting(sampler2D projectionLightSampler,mat4 textureProjectionMatrix){\rvec4 strq=textureProjectionMatrix*vec4(vPositionW,1.0);\rstrq/=strq.w;\rvec3 textureColor=texture2D(projectionLightSampler,strq.xy).rgb;\rreturn textureColor;\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightsFragmentFunctions = { name, shader };\n//# sourceMappingURL=lightsFragmentFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"shadowsFragmentFunctions\";\nconst shader = `#ifdef SHADOWS\n#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\n#define TEXTUREFUNC(s,c,l) texture2DLodEXT(s,c,l)\n#else\n#define TEXTUREFUNC(s,c,b) texture2D(s,c,b)\n#endif\n#ifndef SHADOWFLOAT\nfloat unpack(vec4 color)\r{\rconst vec4 bit_shift=vec4(1.0/(255.0*255.0*255.0),1.0/(255.0*255.0),1.0/255.0,1.0);\rreturn dot(color,bit_shift);\r}\r#endif\nfloat computeFallOff(float value,vec2 clipSpace,float frustumEdgeFalloff)\r{\rfloat mask=smoothstep(1.0-frustumEdgeFalloff,1.00000012,clamp(dot(clipSpace,clipSpace),0.,1.));\rreturn mix(value,1.0,mask);\r}\r#define inline\nfloat computeShadowCube(vec3 lightPosition,samplerCube shadowSampler,float darkness,vec2 depthValues)\r{\rvec3 directionToLight=vPositionW-lightPosition;\rfloat depth=length(directionToLight);\rdepth=(depth+depthValues.x)/(depthValues.y);\rdepth=clamp(depth,0.,1.0);\rdirectionToLight=normalize(directionToLight);\rdirectionToLight.y=-directionToLight.y;\r#ifndef SHADOWFLOAT\nfloat shadow=unpack(textureCube(shadowSampler,directionToLight));\r#else\nfloat shadow=textureCube(shadowSampler,directionToLight).x;\r#endif\nreturn depth>shadow ? darkness : 1.0;\r}\r#define inline\nfloat computeShadowWithPoissonSamplingCube(vec3 lightPosition,samplerCube shadowSampler,float mapSize,float darkness,vec2 depthValues)\r{\rvec3 directionToLight=vPositionW-lightPosition;\rfloat depth=length(directionToLight);\rdepth=(depth+depthValues.x)/(depthValues.y);\rdepth=clamp(depth,0.,1.0);\rdirectionToLight=normalize(directionToLight);\rdirectionToLight.y=-directionToLight.y;\rfloat visibility=1.;\rvec3 poissonDisk[4];\rpoissonDisk[0]=vec3(-1.0,1.0,-1.0);\rpoissonDisk[1]=vec3(1.0,-1.0,-1.0);\rpoissonDisk[2]=vec3(-1.0,-1.0,-1.0);\rpoissonDisk[3]=vec3(1.0,-1.0,1.0);\r#ifndef SHADOWFLOAT\nif (unpack(textureCube(shadowSampler,directionToLight+poissonDisk[0]*mapSize))<depth) visibility-=0.25;\rif (unpack(textureCube(shadowSampler,directionToLight+poissonDisk[1]*mapSize))<depth) visibility-=0.25;\rif (unpack(textureCube(shadowSampler,directionToLight+poissonDisk[2]*mapSize))<depth) visibility-=0.25;\rif (unpack(textureCube(shadowSampler,directionToLight+poissonDisk[3]*mapSize))<depth) visibility-=0.25;\r#else\nif (textureCube(shadowSampler,directionToLight+poissonDisk[0]*mapSize).x<depth) visibility-=0.25;\rif (textureCube(shadowSampler,directionToLight+poissonDisk[1]*mapSize).x<depth) visibility-=0.25;\rif (textureCube(shadowSampler,directionToLight+poissonDisk[2]*mapSize).x<depth) visibility-=0.25;\rif (textureCube(shadowSampler,directionToLight+poissonDisk[3]*mapSize).x<depth) visibility-=0.25;\r#endif\nreturn min(1.0,visibility+darkness);\r}\r#define inline\nfloat computeShadowWithESMCube(vec3 lightPosition,samplerCube shadowSampler,float darkness,float depthScale,vec2 depthValues)\r{\rvec3 directionToLight=vPositionW-lightPosition;\rfloat depth=length(directionToLight);\rdepth=(depth+depthValues.x)/(depthValues.y);\rfloat shadowPixelDepth=clamp(depth,0.,1.0);\rdirectionToLight=normalize(directionToLight);\rdirectionToLight.y=-directionToLight.y;\r#ifndef SHADOWFLOAT\nfloat shadowMapSample=unpack(textureCube(shadowSampler,directionToLight));\r#else\nfloat shadowMapSample=textureCube(shadowSampler,directionToLight).x;\r#endif\nfloat esm=1.0-clamp(exp(min(87.,depthScale*shadowPixelDepth))*shadowMapSample,0.,1.-darkness); \rreturn esm;\r}\r#define inline\nfloat computeShadowWithCloseESMCube(vec3 lightPosition,samplerCube shadowSampler,float darkness,float depthScale,vec2 depthValues)\r{\rvec3 directionToLight=vPositionW-lightPosition;\rfloat depth=length(directionToLight);\rdepth=(depth+depthValues.x)/(depthValues.y);\rfloat shadowPixelDepth=clamp(depth,0.,1.0);\rdirectionToLight=normalize(directionToLight);\rdirectionToLight.y=-directionToLight.y;\r#ifndef SHADOWFLOAT\nfloat shadowMapSample=unpack(textureCube(shadowSampler,directionToLight));\r#else\nfloat shadowMapSample=textureCube(shadowSampler,directionToLight).x;\r#endif\nfloat esm=clamp(exp(min(87.,-depthScale*(shadowPixelDepth-shadowMapSample))),darkness,1.);\rreturn esm;\r}\r#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\n#define inline\nfloat computeShadowCSM(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArray shadowSampler,float darkness,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec2 uv=0.5*clipSpace.xy+vec2(0.5);\rvec3 uvLayer=vec3(uv.x,uv.y,layer);\rfloat shadowPixelDepth=clamp(depthMetric,0.,1.0);\r#ifndef SHADOWFLOAT\nfloat shadow=unpack(texture2D(shadowSampler,uvLayer));\r#else\nfloat shadow=texture2D(shadowSampler,uvLayer).x;\r#endif\nreturn shadowPixelDepth>shadow ? computeFallOff(darkness,clipSpace.xy,frustumEdgeFalloff) : 1.;\r}\r#endif\n#define inline\nfloat computeShadow(vec4 vPositionFromLight,float depthMetric,sampler2D shadowSampler,float darkness,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec2 uv=0.5*clipSpace.xy+vec2(0.5);\rif (uv.x<0. || uv.x>1.0 || uv.y<0. || uv.y>1.0)\r{\rreturn 1.0;\r}\relse\r{\rfloat shadowPixelDepth=clamp(depthMetric,0.,1.0);\r#ifndef SHADOWFLOAT\nfloat shadow=unpack(TEXTUREFUNC(shadowSampler,uv,0.));\r#else\nfloat shadow=TEXTUREFUNC(shadowSampler,uv,0.).x;\r#endif\nreturn shadowPixelDepth>shadow ? computeFallOff(darkness,clipSpace.xy,frustumEdgeFalloff) : 1.;\r}\r}\r#define inline\nfloat computeShadowWithPoissonSampling(vec4 vPositionFromLight,float depthMetric,sampler2D shadowSampler,float mapSize,float darkness,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec2 uv=0.5*clipSpace.xy+vec2(0.5);\rif (uv.x<0. || uv.x>1.0 || uv.y<0. || uv.y>1.0)\r{\rreturn 1.0;\r}\relse\r{\rfloat shadowPixelDepth=clamp(depthMetric,0.,1.0);\rfloat visibility=1.;\rvec2 poissonDisk[4];\rpoissonDisk[0]=vec2(-0.94201624,-0.39906216);\rpoissonDisk[1]=vec2(0.94558609,-0.76890725);\rpoissonDisk[2]=vec2(-0.094184101,-0.92938870);\rpoissonDisk[3]=vec2(0.34495938,0.29387760);\r#ifndef SHADOWFLOAT\nif (unpack(TEXTUREFUNC(shadowSampler,uv+poissonDisk[0]*mapSize,0.))<shadowPixelDepth) visibility-=0.25;\rif (unpack(TEXTUREFUNC(shadowSampler,uv+poissonDisk[1]*mapSize,0.))<shadowPixelDepth) visibility-=0.25;\rif (unpack(TEXTUREFUNC(shadowSampler,uv+poissonDisk[2]*mapSize,0.))<shadowPixelDepth) visibility-=0.25;\rif (unpack(TEXTUREFUNC(shadowSampler,uv+poissonDisk[3]*mapSize,0.))<shadowPixelDepth) visibility-=0.25;\r#else\nif (TEXTUREFUNC(shadowSampler,uv+poissonDisk[0]*mapSize,0.).x<shadowPixelDepth) visibility-=0.25;\rif (TEXTUREFUNC(shadowSampler,uv+poissonDisk[1]*mapSize,0.).x<shadowPixelDepth) visibility-=0.25;\rif (TEXTUREFUNC(shadowSampler,uv+poissonDisk[2]*mapSize,0.).x<shadowPixelDepth) visibility-=0.25;\rif (TEXTUREFUNC(shadowSampler,uv+poissonDisk[3]*mapSize,0.).x<shadowPixelDepth) visibility-=0.25;\r#endif\nreturn computeFallOff(min(1.0,visibility+darkness),clipSpace.xy,frustumEdgeFalloff);\r}\r}\r#define inline\nfloat computeShadowWithESM(vec4 vPositionFromLight,float depthMetric,sampler2D shadowSampler,float darkness,float depthScale,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec2 uv=0.5*clipSpace.xy+vec2(0.5);\rif (uv.x<0. || uv.x>1.0 || uv.y<0. || uv.y>1.0)\r{\rreturn 1.0;\r}\relse\r{\rfloat shadowPixelDepth=clamp(depthMetric,0.,1.0);\r#ifndef SHADOWFLOAT\nfloat shadowMapSample=unpack(TEXTUREFUNC(shadowSampler,uv,0.));\r#else\nfloat shadowMapSample=TEXTUREFUNC(shadowSampler,uv,0.).x;\r#endif\nfloat esm=1.0-clamp(exp(min(87.,depthScale*shadowPixelDepth))*shadowMapSample,0.,1.-darkness);\rreturn computeFallOff(esm,clipSpace.xy,frustumEdgeFalloff);\r}\r}\r#define inline\nfloat computeShadowWithCloseESM(vec4 vPositionFromLight,float depthMetric,sampler2D shadowSampler,float darkness,float depthScale,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec2 uv=0.5*clipSpace.xy+vec2(0.5);\rif (uv.x<0. || uv.x>1.0 || uv.y<0. || uv.y>1.0)\r{\rreturn 1.0;\r}\relse\r{\rfloat shadowPixelDepth=clamp(depthMetric,0.,1.0); \r#ifndef SHADOWFLOAT\nfloat shadowMapSample=unpack(TEXTUREFUNC(shadowSampler,uv,0.));\r#else\nfloat shadowMapSample=TEXTUREFUNC(shadowSampler,uv,0.).x;\r#endif\nfloat esm=clamp(exp(min(87.,-depthScale*(shadowPixelDepth-shadowMapSample))),darkness,1.);\rreturn computeFallOff(esm,clipSpace.xy,frustumEdgeFalloff);\r}\r}\r#ifdef IS_NDC_HALF_ZRANGE\n#define ZINCLIP clipSpace.z\n#else\n#define ZINCLIP uvDepth.z\n#endif\n#if defined(WEBGL2) || defined(WEBGPU) || defined(NATIVE)\n#define GREATEST_LESS_THAN_ONE 0.99999994\n#define inline\nfloat computeShadowWithCSMPCF1(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArrayShadow shadowSampler,float darkness,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=clamp(ZINCLIP,0.,GREATEST_LESS_THAN_ONE);\rvec4 uvDepthLayer=vec4(uvDepth.x,uvDepth.y,layer,uvDepth.z);\rfloat shadow=texture2D(shadowSampler,uvDepthLayer);\rshadow=mix(darkness,1.,shadow);\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r#define inline\nfloat computeShadowWithCSMPCF3(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArrayShadow shadowSampler,vec2 shadowMapSizeAndInverse,float darkness,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=clamp(ZINCLIP,0.,GREATEST_LESS_THAN_ONE);\rvec2 uv=uvDepth.xy*shadowMapSizeAndInverse.x; \ruv+=0.5; \rvec2 st=fract(uv); \rvec2 base_uv=floor(uv)-0.5; \rbase_uv*=shadowMapSizeAndInverse.y; \rvec2 uvw0=3.-2.*st;\rvec2 uvw1=1.+2.*st;\rvec2 u=vec2((2.-st.x)/uvw0.x-1.,st.x/uvw1.x+1.)*shadowMapSizeAndInverse.y;\rvec2 v=vec2((2.-st.y)/uvw0.y-1.,st.y/uvw1.y+1.)*shadowMapSizeAndInverse.y;\rfloat shadow=0.;\rshadow+=uvw0.x*uvw0.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[0],v[0]),layer,uvDepth.z));\rshadow+=uvw1.x*uvw0.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[1],v[0]),layer,uvDepth.z));\rshadow+=uvw0.x*uvw1.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[0],v[1]),layer,uvDepth.z));\rshadow+=uvw1.x*uvw1.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[1],v[1]),layer,uvDepth.z));\rshadow=shadow/16.;\rshadow=mix(darkness,1.,shadow);\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r#define inline\nfloat computeShadowWithCSMPCF5(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArrayShadow shadowSampler,vec2 shadowMapSizeAndInverse,float darkness,float frustumEdgeFalloff)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=clamp(ZINCLIP,0.,GREATEST_LESS_THAN_ONE);\rvec2 uv=uvDepth.xy*shadowMapSizeAndInverse.x; \ruv+=0.5; \rvec2 st=fract(uv); \rvec2 base_uv=floor(uv)-0.5; \rbase_uv*=shadowMapSizeAndInverse.y; \rvec2 uvw0=4.-3.*st;\rvec2 uvw1=vec2(7.);\rvec2 uvw2=1.+3.*st;\rvec3 u=vec3((3.-2.*st.x)/uvw0.x-2.,(3.+st.x)/uvw1.x,st.x/uvw2.x+2.)*shadowMapSizeAndInverse.y;\rvec3 v=vec3((3.-2.*st.y)/uvw0.y-2.,(3.+st.y)/uvw1.y,st.y/uvw2.y+2.)*shadowMapSizeAndInverse.y;\rfloat shadow=0.;\rshadow+=uvw0.x*uvw0.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[0],v[0]),layer,uvDepth.z));\rshadow+=uvw1.x*uvw0.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[1],v[0]),layer,uvDepth.z));\rshadow+=uvw2.x*uvw0.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[2],v[0]),layer,uvDepth.z));\rshadow+=uvw0.x*uvw1.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[0],v[1]),layer,uvDepth.z));\rshadow+=uvw1.x*uvw1.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[1],v[1]),layer,uvDepth.z));\rshadow+=uvw2.x*uvw1.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[2],v[1]),layer,uvDepth.z));\rshadow+=uvw0.x*uvw2.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[0],v[2]),layer,uvDepth.z));\rshadow+=uvw1.x*uvw2.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[1],v[2]),layer,uvDepth.z));\rshadow+=uvw2.x*uvw2.y*texture2D(shadowSampler,vec4(base_uv.xy+vec2(u[2],v[2]),layer,uvDepth.z));\rshadow=shadow/144.;\rshadow=mix(darkness,1.,shadow);\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r#define inline\nfloat computeShadowWithPCF1(vec4 vPositionFromLight,float depthMetric,highp sampler2DShadow shadowSampler,float darkness,float frustumEdgeFalloff)\r{\rif (depthMetric>1.0 || depthMetric<0.0) {\rreturn 1.0;\r}\relse\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=ZINCLIP;\rfloat shadow=TEXTUREFUNC(shadowSampler,uvDepth,0.);\rshadow=mix(darkness,1.,shadow);\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r}\r#define inline\nfloat computeShadowWithPCF3(vec4 vPositionFromLight,float depthMetric,highp sampler2DShadow shadowSampler,vec2 shadowMapSizeAndInverse,float darkness,float frustumEdgeFalloff)\r{\rif (depthMetric>1.0 || depthMetric<0.0) {\rreturn 1.0;\r}\relse\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=ZINCLIP;\rvec2 uv=uvDepth.xy*shadowMapSizeAndInverse.x; \ruv+=0.5; \rvec2 st=fract(uv); \rvec2 base_uv=floor(uv)-0.5; \rbase_uv*=shadowMapSizeAndInverse.y; \rvec2 uvw0=3.-2.*st;\rvec2 uvw1=1.+2.*st;\rvec2 u=vec2((2.-st.x)/uvw0.x-1.,st.x/uvw1.x+1.)*shadowMapSizeAndInverse.y;\rvec2 v=vec2((2.-st.y)/uvw0.y-1.,st.y/uvw1.y+1.)*shadowMapSizeAndInverse.y;\rfloat shadow=0.;\rshadow+=uvw0.x*uvw0.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[0],v[0]),uvDepth.z),0.);\rshadow+=uvw1.x*uvw0.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[1],v[0]),uvDepth.z),0.);\rshadow+=uvw0.x*uvw1.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[0],v[1]),uvDepth.z),0.);\rshadow+=uvw1.x*uvw1.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[1],v[1]),uvDepth.z),0.);\rshadow=shadow/16.;\rshadow=mix(darkness,1.,shadow);\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r}\r#define inline\nfloat computeShadowWithPCF5(vec4 vPositionFromLight,float depthMetric,highp sampler2DShadow shadowSampler,vec2 shadowMapSizeAndInverse,float darkness,float frustumEdgeFalloff)\r{\rif (depthMetric>1.0 || depthMetric<0.0) {\rreturn 1.0;\r}\relse\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=ZINCLIP;\rvec2 uv=uvDepth.xy*shadowMapSizeAndInverse.x; \ruv+=0.5; \rvec2 st=fract(uv); \rvec2 base_uv=floor(uv)-0.5; \rbase_uv*=shadowMapSizeAndInverse.y; \rvec2 uvw0=4.-3.*st;\rvec2 uvw1=vec2(7.);\rvec2 uvw2=1.+3.*st;\rvec3 u=vec3((3.-2.*st.x)/uvw0.x-2.,(3.+st.x)/uvw1.x,st.x/uvw2.x+2.)*shadowMapSizeAndInverse.y;\rvec3 v=vec3((3.-2.*st.y)/uvw0.y-2.,(3.+st.y)/uvw1.y,st.y/uvw2.y+2.)*shadowMapSizeAndInverse.y;\rfloat shadow=0.;\rshadow+=uvw0.x*uvw0.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[0],v[0]),uvDepth.z),0.);\rshadow+=uvw1.x*uvw0.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[1],v[0]),uvDepth.z),0.);\rshadow+=uvw2.x*uvw0.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[2],v[0]),uvDepth.z),0.);\rshadow+=uvw0.x*uvw1.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[0],v[1]),uvDepth.z),0.);\rshadow+=uvw1.x*uvw1.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[1],v[1]),uvDepth.z),0.);\rshadow+=uvw2.x*uvw1.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[2],v[1]),uvDepth.z),0.);\rshadow+=uvw0.x*uvw2.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[0],v[2]),uvDepth.z),0.);\rshadow+=uvw1.x*uvw2.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[1],v[2]),uvDepth.z),0.);\rshadow+=uvw2.x*uvw2.y*TEXTUREFUNC(shadowSampler,vec3(base_uv.xy+vec2(u[2],v[2]),uvDepth.z),0.);\rshadow=shadow/144.;\rshadow=mix(darkness,1.,shadow);\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r}\rconst vec3 PoissonSamplers32[64]=vec3[64](\rvec3(0.06407013,0.05409927,0.),\rvec3(0.7366577,0.5789394,0.),\rvec3(-0.6270542,-0.5320278,0.),\rvec3(-0.4096107,0.8411095,0.),\rvec3(0.6849564,-0.4990818,0.),\rvec3(-0.874181,-0.04579735,0.),\rvec3(0.9989998,0.0009880066,0.),\rvec3(-0.004920578,-0.9151649,0.),\rvec3(0.1805763,0.9747483,0.),\rvec3(-0.2138451,0.2635818,0.),\rvec3(0.109845,0.3884785,0.),\rvec3(0.06876755,-0.3581074,0.),\rvec3(0.374073,-0.7661266,0.),\rvec3(0.3079132,-0.1216763,0.),\rvec3(-0.3794335,-0.8271583,0.),\rvec3(-0.203878,-0.07715034,0.),\rvec3(0.5912697,0.1469799,0.),\rvec3(-0.88069,0.3031784,0.),\rvec3(0.5040108,0.8283722,0.),\rvec3(-0.5844124,0.5494877,0.),\rvec3(0.6017799,-0.1726654,0.),\rvec3(-0.5554981,0.1559997,0.),\rvec3(-0.3016369,-0.3900928,0.),\rvec3(-0.5550632,-0.1723762,0.),\rvec3(0.925029,0.2995041,0.),\rvec3(-0.2473137,0.5538505,0.),\rvec3(0.9183037,-0.2862392,0.),\rvec3(0.2469421,0.6718712,0.),\rvec3(0.3916397,-0.4328209,0.),\rvec3(-0.03576927,-0.6220032,0.),\rvec3(-0.04661255,0.7995201,0.),\rvec3(0.4402924,0.3640312,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.),\rvec3(0.,0.,0.)\r);\rconst vec3 PoissonSamplers64[64]=vec3[64](\rvec3(-0.613392,0.617481,0.),\rvec3(0.170019,-0.040254,0.),\rvec3(-0.299417,0.791925,0.),\rvec3(0.645680,0.493210,0.),\rvec3(-0.651784,0.717887,0.),\rvec3(0.421003,0.027070,0.),\rvec3(-0.817194,-0.271096,0.),\rvec3(-0.705374,-0.668203,0.),\rvec3(0.977050,-0.108615,0.),\rvec3(0.063326,0.142369,0.),\rvec3(0.203528,0.214331,0.),\rvec3(-0.667531,0.326090,0.),\rvec3(-0.098422,-0.295755,0.),\rvec3(-0.885922,0.215369,0.),\rvec3(0.566637,0.605213,0.),\rvec3(0.039766,-0.396100,0.),\rvec3(0.751946,0.453352,0.),\rvec3(0.078707,-0.715323,0.),\rvec3(-0.075838,-0.529344,0.),\rvec3(0.724479,-0.580798,0.),\rvec3(0.222999,-0.215125,0.),\rvec3(-0.467574,-0.405438,0.),\rvec3(-0.248268,-0.814753,0.),\rvec3(0.354411,-0.887570,0.),\rvec3(0.175817,0.382366,0.),\rvec3(0.487472,-0.063082,0.),\rvec3(-0.084078,0.898312,0.),\rvec3(0.488876,-0.783441,0.),\rvec3(0.470016,0.217933,0.),\rvec3(-0.696890,-0.549791,0.),\rvec3(-0.149693,0.605762,0.),\rvec3(0.034211,0.979980,0.),\rvec3(0.503098,-0.308878,0.),\rvec3(-0.016205,-0.872921,0.),\rvec3(0.385784,-0.393902,0.),\rvec3(-0.146886,-0.859249,0.),\rvec3(0.643361,0.164098,0.),\rvec3(0.634388,-0.049471,0.),\rvec3(-0.688894,0.007843,0.),\rvec3(0.464034,-0.188818,0.),\rvec3(-0.440840,0.137486,0.),\rvec3(0.364483,0.511704,0.),\rvec3(0.034028,0.325968,0.),\rvec3(0.099094,-0.308023,0.),\rvec3(0.693960,-0.366253,0.),\rvec3(0.678884,-0.204688,0.),\rvec3(0.001801,0.780328,0.),\rvec3(0.145177,-0.898984,0.),\rvec3(0.062655,-0.611866,0.),\rvec3(0.315226,-0.604297,0.),\rvec3(-0.780145,0.486251,0.),\rvec3(-0.371868,0.882138,0.),\rvec3(0.200476,0.494430,0.),\rvec3(-0.494552,-0.711051,0.),\rvec3(0.612476,0.705252,0.),\rvec3(-0.578845,-0.768792,0.),\rvec3(-0.772454,-0.090976,0.),\rvec3(0.504440,0.372295,0.),\rvec3(0.155736,0.065157,0.),\rvec3(0.391522,0.849605,0.),\rvec3(-0.620106,-0.328104,0.),\rvec3(0.789239,-0.419965,0.),\rvec3(-0.545396,0.538133,0.),\rvec3(-0.178564,-0.596057,0.)\r);\r#define inline\nfloat computeShadowWithCSMPCSS(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArray depthSampler,highp sampler2DArrayShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff,int searchTapCount,int pcfTapCount,vec3[64] poissonSamplers,vec2 lightSizeUVCorrection,float depthCorrection,float penumbraDarkness)\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=clamp(ZINCLIP,0.,GREATEST_LESS_THAN_ONE);\rvec4 uvDepthLayer=vec4(uvDepth.x,uvDepth.y,layer,uvDepth.z);\rfloat blockerDepth=0.0;\rfloat sumBlockerDepth=0.0;\rfloat numBlocker=0.0;\rfor (int i=0; i<searchTapCount; i ++) {\rblockerDepth=texture2D(depthSampler,vec3(uvDepth.xy+(lightSizeUV*lightSizeUVCorrection*shadowMapSizeInverse*PoissonSamplers32[i].xy),layer)).r;\rif (blockerDepth<depthMetric) {\rsumBlockerDepth+=blockerDepth;\rnumBlocker++;\r}\r}\rfloat avgBlockerDepth=sumBlockerDepth/numBlocker;\rfloat AAOffset=shadowMapSizeInverse*10.;\rfloat penumbraRatio=((depthMetric-avgBlockerDepth)*depthCorrection+AAOffset);\rvec4 filterRadius=vec4(penumbraRatio*lightSizeUV*lightSizeUVCorrection*shadowMapSizeInverse,0.,0.);\rfloat random=getRand(vPositionFromLight.xy);\rfloat rotationAngle=random*3.1415926;\rvec2 rotationVector=vec2(cos(rotationAngle),sin(rotationAngle));\rfloat shadow=0.;\rfor (int i=0; i<pcfTapCount; i++) {\rvec4 offset=vec4(poissonSamplers[i],0.);\roffset=vec4(offset.x*rotationVector.x-offset.y*rotationVector.y,offset.y*rotationVector.x+offset.x*rotationVector.y,0.,0.);\rshadow+=texture2D(shadowSampler,uvDepthLayer+offset*filterRadius);\r}\rshadow/=float(pcfTapCount);\rshadow=mix(shadow,1.,min((depthMetric-avgBlockerDepth)*depthCorrection*penumbraDarkness,1.));\rshadow=mix(darkness,1.,shadow);\rif (numBlocker<1.0) {\rreturn 1.0;\r}\relse\r{\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r}\r#define inline\nfloat computeShadowWithPCSS(vec4 vPositionFromLight,float depthMetric,sampler2D depthSampler,highp sampler2DShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff,int searchTapCount,int pcfTapCount,vec3[64] poissonSamplers)\r{\rif (depthMetric>1.0 || depthMetric<0.0) {\rreturn 1.0;\r}\relse\r{\rvec3 clipSpace=vPositionFromLight.xyz/vPositionFromLight.w;\rvec3 uvDepth=vec3(0.5*clipSpace.xyz+vec3(0.5));\ruvDepth.z=ZINCLIP;\rfloat blockerDepth=0.0;\rfloat sumBlockerDepth=0.0;\rfloat numBlocker=0.0;\rfor (int i=0; i<searchTapCount; i ++) {\rblockerDepth=TEXTUREFUNC(depthSampler,uvDepth.xy+(lightSizeUV*shadowMapSizeInverse*PoissonSamplers32[i].xy),0.).r;\rif (blockerDepth<depthMetric) {\rsumBlockerDepth+=blockerDepth;\rnumBlocker++;\r}\r}\rif (numBlocker<1.0) {\rreturn 1.0;\r}\relse\r{\rfloat avgBlockerDepth=sumBlockerDepth/numBlocker;\rfloat AAOffset=shadowMapSizeInverse*10.;\rfloat penumbraRatio=((depthMetric-avgBlockerDepth)+AAOffset);\rfloat filterRadius=penumbraRatio*lightSizeUV*shadowMapSizeInverse;\rfloat random=getRand(vPositionFromLight.xy);\rfloat rotationAngle=random*3.1415926;\rvec2 rotationVector=vec2(cos(rotationAngle),sin(rotationAngle));\rfloat shadow=0.;\rfor (int i=0; i<pcfTapCount; i++) {\rvec3 offset=poissonSamplers[i];\roffset=vec3(offset.x*rotationVector.x-offset.y*rotationVector.y,offset.y*rotationVector.x+offset.x*rotationVector.y,0.);\rshadow+=TEXTUREFUNC(shadowSampler,uvDepth+offset*filterRadius,0.);\r}\rshadow/=float(pcfTapCount);\rshadow=mix(shadow,1.,depthMetric-avgBlockerDepth);\rshadow=mix(darkness,1.,shadow);\rreturn computeFallOff(shadow,clipSpace.xy,frustumEdgeFalloff);\r}\r}\r}\r#define inline\nfloat computeShadowWithPCSS16(vec4 vPositionFromLight,float depthMetric,sampler2D depthSampler,highp sampler2DShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff)\r{\rreturn computeShadowWithPCSS(vPositionFromLight,depthMetric,depthSampler,shadowSampler,shadowMapSizeInverse,lightSizeUV,darkness,frustumEdgeFalloff,16,16,PoissonSamplers32);\r}\r#define inline\nfloat computeShadowWithPCSS32(vec4 vPositionFromLight,float depthMetric,sampler2D depthSampler,highp sampler2DShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff)\r{\rreturn computeShadowWithPCSS(vPositionFromLight,depthMetric,depthSampler,shadowSampler,shadowMapSizeInverse,lightSizeUV,darkness,frustumEdgeFalloff,16,32,PoissonSamplers32);\r}\r#define inline\nfloat computeShadowWithPCSS64(vec4 vPositionFromLight,float depthMetric,sampler2D depthSampler,highp sampler2DShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff)\r{\rreturn computeShadowWithPCSS(vPositionFromLight,depthMetric,depthSampler,shadowSampler,shadowMapSizeInverse,lightSizeUV,darkness,frustumEdgeFalloff,32,64,PoissonSamplers64);\r}\r#define inline\nfloat computeShadowWithCSMPCSS16(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArray depthSampler,highp sampler2DArrayShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff,vec2 lightSizeUVCorrection,float depthCorrection,float penumbraDarkness)\r{\rreturn computeShadowWithCSMPCSS(layer,vPositionFromLight,depthMetric,depthSampler,shadowSampler,shadowMapSizeInverse,lightSizeUV,darkness,frustumEdgeFalloff,16,16,PoissonSamplers32,lightSizeUVCorrection,depthCorrection,penumbraDarkness);\r}\r#define inline\nfloat computeShadowWithCSMPCSS32(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArray depthSampler,highp sampler2DArrayShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff,vec2 lightSizeUVCorrection,float depthCorrection,float penumbraDarkness)\r{\rreturn computeShadowWithCSMPCSS(layer,vPositionFromLight,depthMetric,depthSampler,shadowSampler,shadowMapSizeInverse,lightSizeUV,darkness,frustumEdgeFalloff,16,32,PoissonSamplers32,lightSizeUVCorrection,depthCorrection,penumbraDarkness);\r}\r#define inline\nfloat computeShadowWithCSMPCSS64(float layer,vec4 vPositionFromLight,float depthMetric,highp sampler2DArray depthSampler,highp sampler2DArrayShadow shadowSampler,float shadowMapSizeInverse,float lightSizeUV,float darkness,float frustumEdgeFalloff,vec2 lightSizeUVCorrection,float depthCorrection,float penumbraDarkness)\r{\rreturn computeShadowWithCSMPCSS(layer,vPositionFromLight,depthMetric,depthSampler,shadowSampler,shadowMapSizeInverse,lightSizeUV,darkness,frustumEdgeFalloff,32,64,PoissonSamplers64,lightSizeUVCorrection,depthCorrection,penumbraDarkness);\r}\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowsFragmentFunctions = { name, shader };\n//# sourceMappingURL=shadowsFragmentFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"samplerFragmentDeclaration\";\nconst shader = `#ifdef _DEFINENAME_\n#if _DEFINENAME_DIRECTUV==1\n#define v_VARYINGNAME_UV vMainUV1\n#elif _DEFINENAME_DIRECTUV==2\n#define v_VARYINGNAME_UV vMainUV2\n#elif _DEFINENAME_DIRECTUV==3\n#define v_VARYINGNAME_UV vMainUV3\n#elif _DEFINENAME_DIRECTUV==4\n#define v_VARYINGNAME_UV vMainUV4\n#elif _DEFINENAME_DIRECTUV==5\n#define v_VARYINGNAME_UV vMainUV5\n#elif _DEFINENAME_DIRECTUV==6\n#define v_VARYINGNAME_UV vMainUV6\n#else\nvarying vec2 v_VARYINGNAME_UV;\r#endif\nuniform sampler2D _SAMPLERNAME_Sampler;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const samplerFragmentDeclaration = { name, shader };\n//# sourceMappingURL=samplerFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"fresnelFunction\";\nconst shader = `#ifdef FRESNEL\nfloat computeFresnelTerm(vec3 viewDirection,vec3 worldNormal,float bias,float power)\r{\rfloat fresnelTerm=pow(bias+abs(dot(viewDirection,worldNormal)),power);\rreturn clamp(fresnelTerm,0.,1.);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const fresnelFunction = { name, shader };\n//# sourceMappingURL=fresnelFunction.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"reflectionFunction\";\nconst shader = `vec3 computeFixedEquirectangularCoords(vec4 worldPos,vec3 worldNormal,vec3 direction)\r{\rfloat lon=atan(direction.z,direction.x);\rfloat lat=acos(direction.y);\rvec2 sphereCoords=vec2(lon,lat)*RECIPROCAL_PI2*2.0;\rfloat s=sphereCoords.x*0.5+0.5;\rfloat t=sphereCoords.y;\rreturn vec3(s,t,0); \r}\rvec3 computeMirroredFixedEquirectangularCoords(vec4 worldPos,vec3 worldNormal,vec3 direction)\r{\rfloat lon=atan(direction.z,direction.x);\rfloat lat=acos(direction.y);\rvec2 sphereCoords=vec2(lon,lat)*RECIPROCAL_PI2*2.0;\rfloat s=sphereCoords.x*0.5+0.5;\rfloat t=sphereCoords.y;\rreturn vec3(1.0-s,t,0); \r}\rvec3 computeEquirectangularCoords(vec4 worldPos,vec3 worldNormal,vec3 eyePosition,mat4 reflectionMatrix)\r{\rvec3 cameraToVertex=normalize(worldPos.xyz-eyePosition);\rvec3 r=normalize(reflect(cameraToVertex,worldNormal));\rr=vec3(reflectionMatrix*vec4(r,0));\rfloat lon=atan(r.z,r.x);\rfloat lat=acos(r.y);\rvec2 sphereCoords=vec2(lon,lat)*RECIPROCAL_PI2*2.0;\rfloat s=sphereCoords.x*0.5+0.5;\rfloat t=sphereCoords.y;\rreturn vec3(s,t,0);\r}\rvec3 computeSphericalCoords(vec4 worldPos,vec3 worldNormal,mat4 view,mat4 reflectionMatrix)\r{\rvec3 viewDir=normalize(vec3(view*worldPos));\rvec3 viewNormal=normalize(vec3(view*vec4(worldNormal,0.0)));\rvec3 r=reflect(viewDir,viewNormal);\rr=vec3(reflectionMatrix*vec4(r,0));\rr.z=r.z-1.0;\rfloat m=2.0*length(r);\rreturn vec3(r.x/m+0.5,1.0-r.y/m-0.5,0);\r}\rvec3 computePlanarCoords(vec4 worldPos,vec3 worldNormal,vec3 eyePosition,mat4 reflectionMatrix)\r{\rvec3 viewDir=worldPos.xyz-eyePosition;\rvec3 coords=normalize(reflect(viewDir,worldNormal));\rreturn vec3(reflectionMatrix*vec4(coords,1));\r}\rvec3 computeCubicCoords(vec4 worldPos,vec3 worldNormal,vec3 eyePosition,mat4 reflectionMatrix)\r{\rvec3 viewDir=normalize(worldPos.xyz-eyePosition);\rvec3 coords=reflect(viewDir,worldNormal);\rcoords=vec3(reflectionMatrix*vec4(coords,0));\r#ifdef INVERTCUBICMAP\ncoords.y*=-1.0;\r#endif\nreturn coords;\r}\rvec3 computeCubicLocalCoords(vec4 worldPos,vec3 worldNormal,vec3 eyePosition,mat4 reflectionMatrix,vec3 reflectionSize,vec3 reflectionPosition)\r{\rvec3 viewDir=normalize(worldPos.xyz-eyePosition);\rvec3 coords=reflect(viewDir,worldNormal);\rcoords=parallaxCorrectNormal(worldPos.xyz,coords,reflectionSize,reflectionPosition);\rcoords=vec3(reflectionMatrix*vec4(coords,0));\r#ifdef INVERTCUBICMAP\ncoords.y*=-1.0;\r#endif\nreturn coords;\r}\rvec3 computeProjectionCoords(vec4 worldPos,mat4 view,mat4 reflectionMatrix)\r{\rreturn vec3(reflectionMatrix*(view*worldPos));\r}\rvec3 computeSkyBoxCoords(vec3 positionW,mat4 reflectionMatrix)\r{\rreturn vec3(reflectionMatrix*vec4(positionW,1.));\r}\r#ifdef REFLECTION\nvec3 computeReflectionCoords(vec4 worldPos,vec3 worldNormal)\r{\r#ifdef REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\nvec3 direction=normalize(vDirectionW);\rreturn computeMirroredFixedEquirectangularCoords(worldPos,worldNormal,direction);\r#endif\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR_FIXED\nvec3 direction=normalize(vDirectionW);\rreturn computeFixedEquirectangularCoords(worldPos,worldNormal,direction);\r#endif\n#ifdef REFLECTIONMAP_EQUIRECTANGULAR\nreturn computeEquirectangularCoords(worldPos,worldNormal,vEyePosition.xyz,reflectionMatrix);\r#endif\n#ifdef REFLECTIONMAP_SPHERICAL\nreturn computeSphericalCoords(worldPos,worldNormal,view,reflectionMatrix);\r#endif\n#ifdef REFLECTIONMAP_PLANAR\nreturn computePlanarCoords(worldPos,worldNormal,vEyePosition.xyz,reflectionMatrix);\r#endif\n#ifdef REFLECTIONMAP_CUBIC\n#ifdef USE_LOCAL_REFLECTIONMAP_CUBIC\nreturn computeCubicLocalCoords(worldPos,worldNormal,vEyePosition.xyz,reflectionMatrix,vReflectionSize,vReflectionPosition);\r#else\nreturn computeCubicCoords(worldPos,worldNormal,vEyePosition.xyz,reflectionMatrix);\r#endif\n#endif\n#ifdef REFLECTIONMAP_PROJECTION\nreturn computeProjectionCoords(worldPos,view,reflectionMatrix);\r#endif\n#ifdef REFLECTIONMAP_SKYBOX\nreturn computeSkyBoxCoords(vPositionUVW,reflectionMatrix);\r#endif\n#ifdef REFLECTIONMAP_EXPLICIT\nreturn vec3(0,0,0);\r#endif\n}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const reflectionFunction = { name, shader };\n//# sourceMappingURL=reflectionFunction.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"imageProcessingDeclaration\";\nconst shader = `#ifdef EXPOSURE\nuniform float exposureLinear;\r#endif\n#ifdef CONTRAST\nuniform float contrast;\r#endif\n#if defined(VIGNETTE) || defined(DITHER)\nuniform vec2 vInverseScreenSize;\r#endif\n#ifdef VIGNETTE\nuniform vec4 vignetteSettings1;\runiform vec4 vignetteSettings2;\r#endif\n#ifdef COLORCURVES\nuniform vec4 vCameraColorCurveNegative;\runiform vec4 vCameraColorCurveNeutral;\runiform vec4 vCameraColorCurvePositive;\r#endif\n#ifdef COLORGRADING\n#ifdef COLORGRADING3D\nuniform highp sampler3D txColorTransform;\r#else\nuniform sampler2D txColorTransform;\r#endif\nuniform vec4 colorTransformSettings;\r#endif\n#ifdef DITHER\nuniform float ditherIntensity;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const imageProcessingDeclaration = { name, shader };\n//# sourceMappingURL=imageProcessingDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"imageProcessingFunctions\";\nconst shader = `#if defined(COLORGRADING) && !defined(COLORGRADING3D)\n/** \r* Polyfill for SAMPLE_TEXTURE_3D,which is unsupported in WebGL.\r* sampler3dSetting.x=textureOffset (0.5/textureSize).\r* sampler3dSetting.y=textureSize.\r*/\r#define inline\nvec3 sampleTexture3D(sampler2D colorTransform,vec3 color,vec2 sampler3dSetting)\r{\rfloat sliceSize=2.0*sampler3dSetting.x; \r#ifdef SAMPLER3DGREENDEPTH\nfloat sliceContinuous=(color.g-sampler3dSetting.x)*sampler3dSetting.y;\r#else\nfloat sliceContinuous=(color.b-sampler3dSetting.x)*sampler3dSetting.y;\r#endif\nfloat sliceInteger=floor(sliceContinuous);\rfloat sliceFraction=sliceContinuous-sliceInteger;\r#ifdef SAMPLER3DGREENDEPTH\nvec2 sliceUV=color.rb;\r#else\nvec2 sliceUV=color.rg;\r#endif\nsliceUV.x*=sliceSize;\rsliceUV.x+=sliceInteger*sliceSize;\rsliceUV=saturate(sliceUV);\rvec4 slice0Color=texture2D(colorTransform,sliceUV);\rsliceUV.x+=sliceSize;\rsliceUV=saturate(sliceUV);\rvec4 slice1Color=texture2D(colorTransform,sliceUV);\rvec3 result=mix(slice0Color.rgb,slice1Color.rgb,sliceFraction);\r#ifdef SAMPLER3DBGRMAP\ncolor.rgb=result.rgb;\r#else\ncolor.rgb=result.bgr;\r#endif\nreturn color;\r}\r#endif\n#ifdef TONEMAPPING_ACES\nconst mat3 ACESInputMat=mat3(\rvec3(0.59719,0.07600,0.02840),\rvec3(0.35458,0.90834,0.13383),\rvec3(0.04823,0.01566,0.83777)\r);\rconst mat3 ACESOutputMat=mat3(\rvec3( 1.60475,-0.10208,-0.00327),\rvec3(-0.53108, 1.10813,-0.07276),\rvec3(-0.07367,-0.00605, 1.07602)\r);\rvec3 RRTAndODTFit(vec3 v)\r{\rvec3 a=v*(v+0.0245786)-0.000090537;\rvec3 b=v*(0.983729*v+0.4329510)+0.238081;\rreturn a/b;\r}\rvec3 ACESFitted(vec3 color)\r{\rcolor=ACESInputMat*color;\rcolor=RRTAndODTFit(color);\rcolor=ACESOutputMat*color;\rcolor=saturate(color);\rreturn color;\r}\r#endif\n#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_DEFINITIONS\nvec4 applyImageProcessing(vec4 result) {\r#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_UPDATERESULT_ATSTART\n#ifdef EXPOSURE\nresult.rgb*=exposureLinear;\r#endif\n#ifdef VIGNETTE\nvec2 viewportXY=gl_FragCoord.xy*vInverseScreenSize;\rviewportXY=viewportXY*2.0-1.0;\rvec3 vignetteXY1=vec3(viewportXY*vignetteSettings1.xy+vignetteSettings1.zw,1.0);\rfloat vignetteTerm=dot(vignetteXY1,vignetteXY1);\rfloat vignette=pow(vignetteTerm,vignetteSettings2.w);\rvec3 vignetteColor=vignetteSettings2.rgb;\r#ifdef VIGNETTEBLENDMODEMULTIPLY\nvec3 vignetteColorMultiplier=mix(vignetteColor,vec3(1,1,1),vignette);\rresult.rgb*=vignetteColorMultiplier;\r#endif\n#ifdef VIGNETTEBLENDMODEOPAQUE\nresult.rgb=mix(vignetteColor,result.rgb,vignette);\r#endif\n#endif\n#ifdef TONEMAPPING\n#ifdef TONEMAPPING_ACES\nresult.rgb=ACESFitted(result.rgb);\r#else\nconst float tonemappingCalibration=1.590579;\rresult.rgb=1.0-exp2(-tonemappingCalibration*result.rgb);\r#endif\n#endif\nresult.rgb=toGammaSpace(result.rgb);\rresult.rgb=saturate(result.rgb);\r#ifdef CONTRAST\nvec3 resultHighContrast=result.rgb*result.rgb*(3.0-2.0*result.rgb);\rif (contrast<1.0) {\rresult.rgb=mix(vec3(0.5,0.5,0.5),result.rgb,contrast);\r} else {\rresult.rgb=mix(result.rgb,resultHighContrast,contrast-1.0);\r}\r#endif\n#ifdef COLORGRADING\nvec3 colorTransformInput=result.rgb*colorTransformSettings.xxx+colorTransformSettings.yyy;\r#ifdef COLORGRADING3D\nvec3 colorTransformOutput=texture(txColorTransform,colorTransformInput).rgb;\r#else\nvec3 colorTransformOutput=sampleTexture3D(txColorTransform,colorTransformInput,colorTransformSettings.yz).rgb;\r#endif\nresult.rgb=mix(result.rgb,colorTransformOutput,colorTransformSettings.www);\r#endif\n#ifdef COLORCURVES\nfloat luma=getLuminance(result.rgb);\rvec2 curveMix=clamp(vec2(luma*3.0-1.5,luma*-3.0+1.5),vec2(0.0),vec2(1.0));\rvec4 colorCurve=vCameraColorCurveNeutral+curveMix.x*vCameraColorCurvePositive-curveMix.y*vCameraColorCurveNegative;\rresult.rgb*=colorCurve.rgb;\rresult.rgb=mix(vec3(luma),result.rgb,colorCurve.a);\r#endif\n#ifdef DITHER\nfloat rand=getRand(gl_FragCoord.xy*vInverseScreenSize);\rfloat dither=mix(-ditherIntensity,ditherIntensity,rand);\rresult.rgb=saturate(result.rgb+vec3(dither));\r#endif\n#define CUSTOM_IMAGEPROCESSINGFUNCTIONS_UPDATERESULT_ATEND\nreturn result;\r}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const imageProcessingFunctions = { name, shader };\n//# sourceMappingURL=imageProcessingFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"bumpFragmentMainFunctions\";\nconst shader = `#if defined(BUMP) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC) || defined(DETAIL)\n#if defined(TANGENT) && defined(NORMAL) \nvarying mat3 vTBN;\r#endif\n#ifdef OBJECTSPACE_NORMALMAP\nuniform mat4 normalMatrix;\r#if defined(WEBGL2) || defined(WEBGPU)\nmat4 toNormalMatrix(mat4 wMatrix)\r{\rmat4 ret=inverse(wMatrix);\rret=transpose(ret);\rret[0][3]=0.;\rret[1][3]=0.;\rret[2][3]=0.;\rret[3]=vec4(0.,0.,0.,1.);\rreturn ret;\r}\r#else\nmat4 toNormalMatrix(mat4 m)\r{\rfloat\ra00=m[0][0],a01=m[0][1],a02=m[0][2],a03=m[0][3],\ra10=m[1][0],a11=m[1][1],a12=m[1][2],a13=m[1][3],\ra20=m[2][0],a21=m[2][1],a22=m[2][2],a23=m[2][3],\ra30=m[3][0],a31=m[3][1],a32=m[3][2],a33=m[3][3],\rb00=a00*a11-a01*a10,\rb01=a00*a12-a02*a10,\rb02=a00*a13-a03*a10,\rb03=a01*a12-a02*a11,\rb04=a01*a13-a03*a11,\rb05=a02*a13-a03*a12,\rb06=a20*a31-a21*a30,\rb07=a20*a32-a22*a30,\rb08=a20*a33-a23*a30,\rb09=a21*a32-a22*a31,\rb10=a21*a33-a23*a31,\rb11=a22*a33-a23*a32,\rdet=b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06;\rmat4 mi=mat4(\ra11*b11-a12*b10+a13*b09,\ra02*b10-a01*b11-a03*b09,\ra31*b05-a32*b04+a33*b03,\ra22*b04-a21*b05-a23*b03,\ra12*b08-a10*b11-a13*b07,\ra00*b11-a02*b08+a03*b07,\ra32*b02-a30*b05-a33*b01,\ra20*b05-a22*b02+a23*b01,\ra10*b10-a11*b08+a13*b06,\ra01*b08-a00*b10-a03*b06,\ra30*b04-a31*b02+a33*b00,\ra21*b02-a20*b04-a23*b00,\ra11*b07-a10*b09-a12*b06,\ra00*b09-a01*b07+a02*b06,\ra31*b01-a30*b03-a32*b00,\ra20*b03-a21*b01+a22*b00)/det;\rreturn mat4(mi[0][0],mi[1][0],mi[2][0],mi[3][0],\rmi[0][1],mi[1][1],mi[2][1],mi[3][1],\rmi[0][2],mi[1][2],mi[2][2],mi[3][2],\rmi[0][3],mi[1][3],mi[2][3],mi[3][3]);\r}\r#endif\n#endif\nvec3 perturbNormalBase(mat3 cotangentFrame,vec3 normal,float scale)\r{\r#ifdef NORMALXYSCALE\nnormal=normalize(normal*vec3(scale,scale,1.0));\r#endif\nreturn normalize(cotangentFrame*normal);\r}\rvec3 perturbNormal(mat3 cotangentFrame,vec3 textureSample,float scale)\r{\rreturn perturbNormalBase(cotangentFrame,textureSample*2.0-1.0,scale);\r}\rmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv,vec2 tangentSpaceParams)\r{\rvec3 dp1=dFdx(p);\rvec3 dp2=dFdy(p);\rvec2 duv1=dFdx(uv);\rvec2 duv2=dFdy(uv);\rvec3 dp2perp=cross(dp2,normal);\rvec3 dp1perp=cross(normal,dp1);\rvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\rvec3 bitangent=dp2perp*duv1.y+dp1perp*duv2.y;\rtangent*=tangentSpaceParams.x;\rbitangent*=tangentSpaceParams.y;\rfloat det=max(dot(tangent,tangent),dot(bitangent,bitangent));\rfloat invmax=det==0.0 ? 0.0 : inversesqrt(det);\rreturn mat3(tangent*invmax,bitangent*invmax,normal);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpFragmentMainFunctions = { name, shader };\n//# sourceMappingURL=bumpFragmentMainFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nimport \"./samplerFragmentDeclaration.js\";\nconst name = \"bumpFragmentFunctions\";\nconst shader = `#if defined(BUMP)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump)\n#endif\n#if defined(DETAIL)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail,_SAMPLERNAME_,detail)\n#endif\n#if defined(BUMP) && defined(PARALLAX)\nconst float minSamples=4.;\rconst float maxSamples=15.;\rconst int iMaxSamples=15;\rvec2 parallaxOcclusion(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale) {\rfloat parallaxLimit=length(vViewDirCoT.xy)/vViewDirCoT.z;\rparallaxLimit*=parallaxScale;\rvec2 vOffsetDir=normalize(vViewDirCoT.xy);\rvec2 vMaxOffset=vOffsetDir*parallaxLimit;\rfloat numSamples=maxSamples+(dot(vViewDirCoT,vNormalCoT)*(minSamples-maxSamples));\rfloat stepSize=1.0/numSamples;\rfloat currRayHeight=1.0;\rvec2 vCurrOffset=vec2(0,0);\rvec2 vLastOffset=vec2(0,0);\rfloat lastSampledHeight=1.0;\rfloat currSampledHeight=1.0;\rbool keepWorking=true;\rfor (int i=0; i<iMaxSamples; i++)\r{\rcurrSampledHeight=texture2D(bumpSampler,texCoord+vCurrOffset).w;\rif (!keepWorking)\r{\r}\relse if (currSampledHeight>currRayHeight)\r{\rfloat delta1=currSampledHeight-currRayHeight;\rfloat delta2=(currRayHeight+stepSize)-lastSampledHeight;\rfloat ratio=delta1/(delta1+delta2);\rvCurrOffset=(ratio)* vLastOffset+(1.0-ratio)*vCurrOffset;\rkeepWorking=false;\r}\relse\r{\rcurrRayHeight-=stepSize;\rvLastOffset=vCurrOffset;\rvCurrOffset+=stepSize*vMaxOffset;\rlastSampledHeight=currSampledHeight;\r}\r}\rreturn vCurrOffset;\r}\rvec2 parallaxOffset(vec3 viewDir,float heightScale)\r{\rfloat height=texture2D(bumpSampler,vBumpUV).w;\rvec2 texCoordOffset=heightScale*viewDir.xy*height;\rreturn -texCoordOffset;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpFragmentFunctions = { name, shader };\n//# sourceMappingURL=bumpFragmentFunctions.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"logDepthDeclaration\";\nconst shader = `#ifdef LOGARITHMICDEPTH\nuniform float logarithmicDepthConstant;\rvarying float vFragmentDepth;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const logDepthDeclaration = { name, shader };\n//# sourceMappingURL=logDepthDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"fogFragmentDeclaration\";\nconst shader = `#ifdef FOG\n#define FOGMODE_NONE 0.\n#define FOGMODE_EXP 1.\n#define FOGMODE_EXP2 2.\n#define FOGMODE_LINEAR 3.\n#define E 2.71828\nuniform vec4 vFogInfos;\runiform vec3 vFogColor;\rvarying vec3 vFogDistance;\rfloat CalcFogFactor()\r{\rfloat fogCoeff=1.0;\rfloat fogStart=vFogInfos.y;\rfloat fogEnd=vFogInfos.z;\rfloat fogDensity=vFogInfos.w;\rfloat fogDistance=length(vFogDistance);\rif (FOGMODE_LINEAR==vFogInfos.x)\r{\rfogCoeff=(fogEnd-fogDistance)/(fogEnd-fogStart);\r}\relse if (FOGMODE_EXP==vFogInfos.x)\r{\rfogCoeff=1.0/pow(E,fogDistance*fogDensity);\r}\relse if (FOGMODE_EXP2==vFogInfos.x)\r{\rfogCoeff=1.0/pow(E,fogDistance*fogDistance*fogDensity*fogDensity);\r}\rreturn clamp(fogCoeff,0.0,1.0);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const fogFragmentDeclaration = { name, shader };\n//# sourceMappingURL=fogFragmentDeclaration.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"bumpFragment\";\nconst shader = `vec2 uvOffset=vec2(0.0,0.0);\r#if defined(BUMP) || defined(PARALLAX) || defined(DETAIL)\n#ifdef NORMALXYSCALE\nfloat normalScale=1.0;\r#elif defined(BUMP)\nfloat normalScale=vBumpInfos.y;\r#else\nfloat normalScale=1.0;\r#endif\n#if defined(TANGENT) && defined(NORMAL)\nmat3 TBN=vTBN;\r#elif defined(BUMP)\nvec2 TBNUV=gl_FrontFacing ? vBumpUV : -vBumpUV;\rmat3 TBN=cotangent_frame(normalW*normalScale,vPositionW,TBNUV,vTangentSpaceParams);\r#else\nvec2 TBNUV=gl_FrontFacing ? vDetailUV : -vDetailUV;\rmat3 TBN=cotangent_frame(normalW*normalScale,vPositionW,TBNUV,vec2(1.,1.));\r#endif\n#elif defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL)\nmat3 TBN=vTBN;\r#else\nvec2 TBNUV=gl_FrontFacing ? vMainUV1 : -vMainUV1;\rmat3 TBN=cotangent_frame(normalW,vPositionW,TBNUV,vec2(1.,1.));\r#endif\n#endif\n#ifdef PARALLAX\nmat3 invTBN=transposeMat3(TBN);\r#ifdef PARALLAXOCCLUSION\nuvOffset=parallaxOcclusion(invTBN*-viewDirectionW,invTBN*normalW,vBumpUV,vBumpInfos.z);\r#else\nuvOffset=parallaxOffset(invTBN*viewDirectionW,vBumpInfos.z);\r#endif\n#endif\n#ifdef DETAIL\nvec4 detailColor=texture2D(detailSampler,vDetailUV+uvOffset);\rvec2 detailNormalRG=detailColor.wy*2.0-1.0;\rfloat detailNormalB=sqrt(1.-saturate(dot(detailNormalRG,detailNormalRG)));\rvec3 detailNormal=vec3(detailNormalRG,detailNormalB);\r#endif\n#ifdef BUMP\n#ifdef OBJECTSPACE_NORMALMAP\n#define CUSTOM_FRAGMENT_BUMP_FRAGMENT\nnormalW=normalize(texture2D(bumpSampler,vBumpUV).xyz *2.0-1.0);\rnormalW=normalize(mat3(normalMatrix)*normalW);\r#elif !defined(DETAIL)\nnormalW=perturbNormal(TBN,texture2D(bumpSampler,vBumpUV+uvOffset).xyz,vBumpInfos.y);\r#else\nvec3 bumpNormal=texture2D(bumpSampler,vBumpUV+uvOffset).xyz*2.0-1.0;\r#if DETAIL_NORMALBLENDMETHOD==0 \ndetailNormal.xy*=vDetailInfos.z;\rvec3 blendedNormal=normalize(vec3(bumpNormal.xy+detailNormal.xy,bumpNormal.z*detailNormal.z));\r#elif DETAIL_NORMALBLENDMETHOD==1 \ndetailNormal.xy*=vDetailInfos.z;\rbumpNormal+=vec3(0.0,0.0,1.0);\rdetailNormal*=vec3(-1.0,-1.0,1.0);\rvec3 blendedNormal=bumpNormal*dot(bumpNormal,detailNormal)/bumpNormal.z-detailNormal;\r#endif\nnormalW=perturbNormalBase(TBN,blendedNormal,vBumpInfos.y);\r#endif\n#elif defined(DETAIL)\ndetailNormal.xy*=vDetailInfos.z;\rnormalW=perturbNormalBase(TBN,detailNormal,vDetailInfos.z);\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpFragment = { name, shader };\n//# sourceMappingURL=bumpFragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"decalFragment\";\nconst shader = `#ifdef DECAL\n#ifdef GAMMADECAL\ndecalColor.rgb=toLinearSpace(decalColor.rgb);\r#endif\n#ifdef DECAL_SMOOTHALPHA\ndecalColor.a*=decalColor.a;\r#endif\nsurfaceAlbedo.rgb=mix(surfaceAlbedo.rgb,decalColor.rgb,decalColor.a);\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const decalFragment = { name, shader };\n//# sourceMappingURL=decalFragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"depthPrePass\";\nconst shader = `#ifdef DEPTHPREPASS\ngl_FragColor=vec4(0.,0.,0.,1.0);\rreturn;\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const depthPrePass = { name, shader };\n//# sourceMappingURL=depthPrePass.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"lightFragment\";\nconst shader = `#ifdef LIGHT{X}\n#if defined(SHADOWONLY) || defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X}) && defined(LIGHTMAPNOSPECULAR{X})\n#else\n#ifdef PBR\n#ifdef SPOTLIGHT{X}\npreInfo=computePointAndSpotPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#elif defined(POINTLIGHT{X})\npreInfo=computePointAndSpotPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#elif defined(HEMILIGHT{X})\npreInfo=computeHemisphericPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#elif defined(DIRLIGHT{X})\npreInfo=computeDirectionalPreLightingInfo(light{X}.vLightData,viewDirectionW,normalW);\r#endif\npreInfo.NdotV=NdotV;\r#ifdef SPOTLIGHT{X}\n#ifdef LIGHT_FALLOFF_GLTF{X}\npreInfo.attenuation=computeDistanceLightFalloff_GLTF(preInfo.lightDistanceSquared,light{X}.vLightFalloff.y);\rpreInfo.attenuation*=computeDirectionalLightFalloff_GLTF(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightFalloff.z,light{X}.vLightFalloff.w);\r#elif defined(LIGHT_FALLOFF_PHYSICAL{X})\npreInfo.attenuation=computeDistanceLightFalloff_Physical(preInfo.lightDistanceSquared);\rpreInfo.attenuation*=computeDirectionalLightFalloff_Physical(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightDirection.w);\r#elif defined(LIGHT_FALLOFF_STANDARD{X})\npreInfo.attenuation=computeDistanceLightFalloff_Standard(preInfo.lightOffset,light{X}.vLightFalloff.x);\rpreInfo.attenuation*=computeDirectionalLightFalloff_Standard(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightDirection.w,light{X}.vLightData.w);\r#else\npreInfo.attenuation=computeDistanceLightFalloff(preInfo.lightOffset,preInfo.lightDistanceSquared,light{X}.vLightFalloff.x,light{X}.vLightFalloff.y);\rpreInfo.attenuation*=computeDirectionalLightFalloff(light{X}.vLightDirection.xyz,preInfo.L,light{X}.vLightDirection.w,light{X}.vLightData.w,light{X}.vLightFalloff.z,light{X}.vLightFalloff.w);\r#endif\n#elif defined(POINTLIGHT{X})\n#ifdef LIGHT_FALLOFF_GLTF{X}\npreInfo.attenuation=computeDistanceLightFalloff_GLTF(preInfo.lightDistanceSquared,light{X}.vLightFalloff.y);\r#elif defined(LIGHT_FALLOFF_PHYSICAL{X})\npreInfo.attenuation=computeDistanceLightFalloff_Physical(preInfo.lightDistanceSquared);\r#elif defined(LIGHT_FALLOFF_STANDARD{X})\npreInfo.attenuation=computeDistanceLightFalloff_Standard(preInfo.lightOffset,light{X}.vLightFalloff.x);\r#else\npreInfo.attenuation=computeDistanceLightFalloff(preInfo.lightOffset,preInfo.lightDistanceSquared,light{X}.vLightFalloff.x,light{X}.vLightFalloff.y);\r#endif\n#else\npreInfo.attenuation=1.0;\r#endif\n#ifdef HEMILIGHT{X}\npreInfo.roughness=roughness;\r#else\npreInfo.roughness=adjustRoughnessFromLightProperties(roughness,light{X}.vLightSpecular.a,preInfo.lightDistance);\r#endif\n#ifdef IRIDESCENCE\npreInfo.iridescenceIntensity=iridescenceIntensity;\r#endif\n#ifdef HEMILIGHT{X}\ninfo.diffuse=computeHemisphericDiffuseLighting(preInfo,light{X}.vLightDiffuse.rgb,light{X}.vLightGround);\r#elif defined(SS_TRANSLUCENCY)\ninfo.diffuse=computeDiffuseAndTransmittedLighting(preInfo,light{X}.vLightDiffuse.rgb,subSurfaceOut.transmittance);\r#else\ninfo.diffuse=computeDiffuseLighting(preInfo,light{X}.vLightDiffuse.rgb);\r#endif\n#ifdef SPECULARTERM\n#ifdef ANISOTROPIC\ninfo.specular=computeAnisotropicSpecularLighting(preInfo,viewDirectionW,normalW,anisotropicOut.anisotropicTangent,anisotropicOut.anisotropicBitangent,anisotropicOut.anisotropy,clearcoatOut.specularEnvironmentR0,specularEnvironmentR90,AARoughnessFactors.x,light{X}.vLightDiffuse.rgb);\r#else\ninfo.specular=computeSpecularLighting(preInfo,normalW,clearcoatOut.specularEnvironmentR0,specularEnvironmentR90,AARoughnessFactors.x,light{X}.vLightDiffuse.rgb);\r#endif\n#endif\n#ifdef SHEEN\n#ifdef SHEEN_LINKWITHALBEDO\npreInfo.roughness=sheenOut.sheenIntensity;\r#else\n#ifdef HEMILIGHT{X}\npreInfo.roughness=sheenOut.sheenRoughness;\r#else\npreInfo.roughness=adjustRoughnessFromLightProperties(sheenOut.sheenRoughness,light{X}.vLightSpecular.a,preInfo.lightDistance);\r#endif\n#endif\ninfo.sheen=computeSheenLighting(preInfo,normalW,sheenOut.sheenColor,specularEnvironmentR90,AARoughnessFactors.x,light{X}.vLightDiffuse.rgb);\r#endif\n#ifdef CLEARCOAT\n#ifdef HEMILIGHT{X}\npreInfo.roughness=clearcoatOut.clearCoatRoughness;\r#else\npreInfo.roughness=adjustRoughnessFromLightProperties(clearcoatOut.clearCoatRoughness,light{X}.vLightSpecular.a,preInfo.lightDistance);\r#endif\ninfo.clearCoat=computeClearCoatLighting(preInfo,clearcoatOut.clearCoatNormalW,clearcoatOut.clearCoatAARoughnessFactors.x,clearcoatOut.clearCoatIntensity,light{X}.vLightDiffuse.rgb);\r#ifdef CLEARCOAT_TINT\nabsorption=computeClearCoatLightingAbsorption(clearcoatOut.clearCoatNdotVRefract,preInfo.L,clearcoatOut.clearCoatNormalW,clearcoatOut.clearCoatColor,clearcoatOut.clearCoatThickness,clearcoatOut.clearCoatIntensity);\rinfo.diffuse*=absorption;\r#ifdef SPECULARTERM\ninfo.specular*=absorption;\r#endif\n#endif\ninfo.diffuse*=info.clearCoat.w;\r#ifdef SPECULARTERM\ninfo.specular*=info.clearCoat.w;\r#endif\n#ifdef SHEEN\ninfo.sheen*=info.clearCoat.w;\r#endif\n#endif\n#else\n#ifdef SPOTLIGHT{X}\ninfo=computeSpotLighting(viewDirectionW,normalW,light{X}.vLightData,light{X}.vLightDirection,light{X}.vLightDiffuse.rgb,light{X}.vLightSpecular.rgb,light{X}.vLightDiffuse.a,glossiness);\r#elif defined(HEMILIGHT{X})\ninfo=computeHemisphericLighting(viewDirectionW,normalW,light{X}.vLightData,light{X}.vLightDiffuse.rgb,light{X}.vLightSpecular.rgb,light{X}.vLightGround,glossiness);\r#elif defined(POINTLIGHT{X}) || defined(DIRLIGHT{X})\ninfo=computeLighting(viewDirectionW,normalW,light{X}.vLightData,light{X}.vLightDiffuse.rgb,light{X}.vLightSpecular.rgb,light{X}.vLightDiffuse.a,glossiness);\r#endif\n#endif\n#ifdef PROJECTEDLIGHTTEXTURE{X}\ninfo.diffuse*=computeProjectionTextureDiffuseLighting(projectionLightSampler{X},textureProjectionMatrix{X});\r#endif\n#endif\n#ifdef SHADOW{X}\n#ifdef SHADOWCSM{X}\nfor (int i=0; i<SHADOWCSMNUM_CASCADES{X}; i++) \r{\r#ifdef SHADOWCSM_RIGHTHANDED{X}\ndiff{X}=viewFrustumZ{X}[i]+vPositionFromCamera{X}.z;\r#else\ndiff{X}=viewFrustumZ{X}[i]-vPositionFromCamera{X}.z;\r#endif\nif (diff{X}>=0.) {\rindex{X}=i;\rbreak;\r}\r}\r#ifdef SHADOWCSMUSESHADOWMAXZ{X}\nif (index{X}>=0)\r#endif\n{\r#if defined(SHADOWPCF{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithCSMPCF1(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithCSMPCF3(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nshadow=computeShadowWithCSMPCF5(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCSS{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithCSMPCSS16(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithCSMPCSS32(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#else\nshadow=computeShadowWithCSMPCSS64(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#endif\n#else\nshadow=computeShadowCSM(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#ifdef SHADOWCSMDEBUG{X}\nshadowDebug{X}=vec3(shadow)*vCascadeColorsMultiplier{X}[index{X}];\r#endif\n#ifndef SHADOWCSMNOBLEND{X}\nfloat frustumLength=frustumLengths{X}[index{X}];\rfloat diffRatio=clamp(diff{X}/frustumLength,0.,1.)*cascadeBlendFactor{X};\rif (index{X}<(SHADOWCSMNUM_CASCADES{X}-1) && diffRatio<1.)\r{\rindex{X}+=1;\rfloat nextShadow=0.;\r#if defined(SHADOWPCF{X})\n#if defined(SHADOWLOWQUALITY{X})\nnextShadow=computeShadowWithCSMPCF1(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nnextShadow=computeShadowWithCSMPCF3(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nnextShadow=computeShadowWithCSMPCF5(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCSS{X})\n#if defined(SHADOWLOWQUALITY{X})\nnextShadow=computeShadowWithCSMPCSS16(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#elif defined(SHADOWMEDIUMQUALITY{X})\nnextShadow=computeShadowWithCSMPCSS32(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#else\nnextShadow=computeShadowWithCSMPCSS64(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w,lightSizeUVCorrection{X}[index{X}],depthCorrection{X}[index{X}],penumbraDarkness{X});\r#endif\n#else\nnextShadow=computeShadowCSM(float(index{X}),vPositionFromLight{X}[index{X}],vDepthMetric{X}[index{X}],shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\nshadow=mix(nextShadow,shadow,diffRatio);\r#ifdef SHADOWCSMDEBUG{X}\nshadowDebug{X}=mix(vec3(nextShadow)*vCascadeColorsMultiplier{X}[index{X}],shadowDebug{X},diffRatio);\r#endif\n}\r#endif\n}\r#elif defined(SHADOWCLOSEESM{X})\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowWithCloseESMCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.depthValues);\r#else\nshadow=computeShadowWithCloseESM(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWESM{X})\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowWithESMCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.depthValues);\r#else\nshadow=computeShadowWithESM(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.z,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPOISSON{X})\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowWithPoissonSamplingCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.x,light{X}.depthValues);\r#else\nshadow=computeShadowWithPoissonSampling(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCF{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithPCF1(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithPCF3(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nshadow=computeShadowWithPCF5(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.yz,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#elif defined(SHADOWPCSS{X})\n#if defined(SHADOWLOWQUALITY{X})\nshadow=computeShadowWithPCSS16(vPositionFromLight{X},vDepthMetric{X},depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#elif defined(SHADOWMEDIUMQUALITY{X})\nshadow=computeShadowWithPCSS32(vPositionFromLight{X},vDepthMetric{X},depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#else\nshadow=computeShadowWithPCSS64(vPositionFromLight{X},vDepthMetric{X},depthSampler{X},shadowSampler{X},light{X}.shadowsInfo.y,light{X}.shadowsInfo.z,light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#else\n#if defined(SHADOWCUBE{X})\nshadow=computeShadowCube(light{X}.vLightData.xyz,shadowSampler{X},light{X}.shadowsInfo.x,light{X}.depthValues);\r#else\nshadow=computeShadow(vPositionFromLight{X},vDepthMetric{X},shadowSampler{X},light{X}.shadowsInfo.x,light{X}.shadowsInfo.w);\r#endif\n#endif\n#ifdef SHADOWONLY\n#ifndef SHADOWINUSE\n#define SHADOWINUSE\n#endif\nglobalShadow+=shadow;\rshadowLightCount+=1.0;\r#endif\n#else\nshadow=1.;\r#endif\n#ifndef SHADOWONLY\n#ifdef CUSTOMUSERLIGHTING\ndiffuseBase+=computeCustomDiffuseLighting(info,diffuseBase,shadow);\r#ifdef SPECULARTERM\nspecularBase+=computeCustomSpecularLighting(info,specularBase,shadow);\r#endif\n#elif defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X})\ndiffuseBase+=lightmapColor.rgb*shadow;\r#ifdef SPECULARTERM\n#ifndef LIGHTMAPNOSPECULAR{X}\nspecularBase+=info.specular*shadow*lightmapColor.rgb;\r#endif\n#endif\n#ifdef CLEARCOAT\n#ifndef LIGHTMAPNOSPECULAR{X}\nclearCoatBase+=info.clearCoat.rgb*shadow*lightmapColor.rgb;\r#endif\n#endif\n#ifdef SHEEN\n#ifndef LIGHTMAPNOSPECULAR{X}\nsheenBase+=info.sheen.rgb*shadow;\r#endif\n#endif\n#else\n#ifdef SHADOWCSMDEBUG{X}\ndiffuseBase+=info.diffuse*shadowDebug{X};\r#else \ndiffuseBase+=info.diffuse*shadow;\r#endif\n#ifdef SPECULARTERM\nspecularBase+=info.specular*shadow;\r#endif\n#ifdef CLEARCOAT\nclearCoatBase+=info.clearCoat.rgb*shadow;\r#endif\n#ifdef SHEEN\nsheenBase+=info.sheen.rgb*shadow;\r#endif\n#endif\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const lightFragment = { name, shader };\n//# sourceMappingURL=lightFragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"oitFragment\";\nconst shader = `#ifdef ORDER_INDEPENDENT_TRANSPARENCY\nfloat fragDepth=gl_FragCoord.z; \r#ifdef ORDER_INDEPENDENT_TRANSPARENCY_16BITS\nuint halfFloat=packHalf2x16(vec2(fragDepth));\rvec2 full=unpackHalf2x16(halfFloat);\rfragDepth=full.x;\r#endif\nivec2 fragCoord=ivec2(gl_FragCoord.xy);\rvec2 lastDepth=texelFetch(oitDepthSampler,fragCoord,0).rg;\rvec4 lastFrontColor=texelFetch(oitFrontColorSampler,fragCoord,0);\rdepth.rg=vec2(-MAX_DEPTH);\rfrontColor=lastFrontColor;\rbackColor=vec4(0.0);\r#ifdef USE_REVERSE_DEPTHBUFFER\nfloat furthestDepth=-lastDepth.x;\rfloat nearestDepth=lastDepth.y;\r#else\nfloat nearestDepth=-lastDepth.x;\rfloat furthestDepth=lastDepth.y;\r#endif\nfloat alphaMultiplier=1.0-lastFrontColor.a;\r#ifdef USE_REVERSE_DEPTHBUFFER\nif (fragDepth>nearestDepth || fragDepth<furthestDepth) {\r#else\nif (fragDepth<nearestDepth || fragDepth>furthestDepth) {\r#endif\nreturn;\r}\r#ifdef USE_REVERSE_DEPTHBUFFER\nif (fragDepth<nearestDepth && fragDepth>furthestDepth) {\r#else\nif (fragDepth>nearestDepth && fragDepth<furthestDepth) {\r#endif\ndepth.rg=vec2(-fragDepth,fragDepth);\rreturn;\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const oitFragment = { name, shader };\n//# sourceMappingURL=oitFragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/defaultFragmentDeclaration.js\";\nimport \"./ShadersInclude/defaultUboDeclaration.js\";\nimport \"./ShadersInclude/prePassDeclaration.js\";\nimport \"./ShadersInclude/oitDeclaration.js\";\nimport \"./ShadersInclude/mainUVVaryingDeclaration.js\";\nimport \"./ShadersInclude/helperFunctions.js\";\nimport \"./ShadersInclude/lightFragmentDeclaration.js\";\nimport \"./ShadersInclude/lightUboDeclaration.js\";\nimport \"./ShadersInclude/lightsFragmentFunctions.js\";\nimport \"./ShadersInclude/shadowsFragmentFunctions.js\";\nimport \"./ShadersInclude/samplerFragmentDeclaration.js\";\nimport \"./ShadersInclude/fresnelFunction.js\";\nimport \"./ShadersInclude/reflectionFunction.js\";\nimport \"./ShadersInclude/imageProcessingDeclaration.js\";\nimport \"./ShadersInclude/imageProcessingFunctions.js\";\nimport \"./ShadersInclude/bumpFragmentMainFunctions.js\";\nimport \"./ShadersInclude/bumpFragmentFunctions.js\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration.js\";\nimport \"./ShadersInclude/logDepthDeclaration.js\";\nimport \"./ShadersInclude/fogFragmentDeclaration.js\";\nimport \"./ShadersInclude/clipPlaneFragment.js\";\nimport \"./ShadersInclude/bumpFragment.js\";\nimport \"./ShadersInclude/decalFragment.js\";\nimport \"./ShadersInclude/depthPrePass.js\";\nimport \"./ShadersInclude/lightFragment.js\";\nimport \"./ShadersInclude/logDepthFragment.js\";\nimport \"./ShadersInclude/fogFragment.js\";\nimport \"./ShadersInclude/oitFragment.js\";\nconst name = \"defaultPixelShader\";\nconst shader = `#include<__decl__defaultFragment>\n#if defined(BUMP) || !defined(NORMAL)\n#extension GL_OES_standard_derivatives : enable\n#endif\n#include<prePassDeclaration>[SCENE_MRT_COUNT]\n#include<oitDeclaration>\n#define CUSTOM_FRAGMENT_BEGIN\n#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\n#define RECIPROCAL_PI2 0.15915494\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nvarying vec4 vColor;\r#endif\n#include<mainUVVaryingDeclaration>[1..7]\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DIFFUSE,_VARYINGNAME_,Diffuse,_SAMPLERNAME_,diffuse)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,AMBIENT,_VARYINGNAME_,Ambient,_SAMPLERNAME_,ambient)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,OPACITY,_VARYINGNAME_,Opacity,_SAMPLERNAME_,opacity)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,EMISSIVE,_VARYINGNAME_,Emissive,_SAMPLERNAME_,emissive)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,LIGHTMAP,_VARYINGNAME_,Lightmap,_SAMPLERNAME_,lightmap)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DECAL,_VARYINGNAME_,Decal,_SAMPLERNAME_,decal)\n#ifdef REFRACTION\n#ifdef REFRACTIONMAP_3D\nuniform samplerCube refractionCubeSampler;\r#else\nuniform sampler2D refraction2DSampler;\r#endif\n#endif\n#if defined(SPECULARTERM)\n#include<samplerFragmentDeclaration>(_DEFINENAME_,SPECULAR,_VARYINGNAME_,Specular,_SAMPLERNAME_,specular)\n#endif\n#include<fresnelFunction>\n#ifdef REFLECTION\n#ifdef REFLECTIONMAP_3D\nuniform samplerCube reflectionCubeSampler;\r#else\nuniform sampler2D reflection2DSampler;\r#endif\n#ifdef REFLECTIONMAP_SKYBOX\nvarying vec3 vPositionUVW;\r#else\n#if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\nvarying vec3 vDirectionW;\r#endif\n#endif\n#include<reflectionFunction>\n#endif\n#include<imageProcessingDeclaration>\n#include<imageProcessingFunctions>\n#include<bumpFragmentMainFunctions>\n#include<bumpFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\rvec4 baseColor=vec4(1.,1.,1.,1.);\rvec3 diffuseColor=vDiffuseColor.rgb;\rfloat alpha=vDiffuseColor.a;\r#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=normalize(-cross(dFdx(vPositionW),dFdy(vPositionW)));\r#endif\n#include<bumpFragment>\n#ifdef TWOSIDEDLIGHTING\nnormalW=gl_FrontFacing ? normalW : -normalW;\r#endif\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV+uvOffset);\r#if defined(ALPHATEST) && !defined(ALPHATEST_AFTERALLALPHACOMPUTATIONS)\nif (baseColor.a<alphaCutOff)\rdiscard;\r#endif\n#ifdef ALPHAFROMDIFFUSE\nalpha*=baseColor.a;\r#endif\n#define CUSTOM_FRAGMENT_UPDATE_ALPHA\nbaseColor.rgb*=vDiffuseInfos.y;\r#endif\n#ifdef DECAL\nvec4 decalColor=texture2D(decalSampler,vDecalUV+uvOffset);\r#include<decalFragment>(surfaceAlbedo,baseColor,GAMMADECAL,_GAMMADECAL_NOTUSED_)\n#endif\n#include<depthPrePass>\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nbaseColor.rgb*=vColor.rgb;\r#endif\n#ifdef DETAIL\nbaseColor.rgb=baseColor.rgb*2.0*mix(0.5,detailColor.r,vDetailInfos.y);\r#endif\n#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE\nvec3 baseAmbientColor=vec3(1.,1.,1.);\r#ifdef AMBIENT\nbaseAmbientColor=texture2D(ambientSampler,vAmbientUV+uvOffset).rgb*vAmbientInfos.y;\r#endif\n#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\rvec3 specularColor=vSpecularColor.rgb;\r#ifdef SPECULAR\nvec4 specularMapColor=texture2D(specularSampler,vSpecularUV+uvOffset);\rspecularColor=specularMapColor.rgb;\r#ifdef GLOSSINESS\nglossiness=glossiness*specularMapColor.a;\r#endif\n#endif\n#else\nfloat glossiness=0.;\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\r#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\r#endif\nfloat shadow=1.;\r#ifdef LIGHTMAP\nvec4 lightmapColor=texture2D(lightmapSampler,vLightmapUV+uvOffset);\r#ifdef RGBDLIGHTMAP\nlightmapColor.rgb=fromRGBD(lightmapColor);\r#endif\nlightmapColor.rgb*=vLightmapInfos.y;\r#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec4 refractionColor=vec4(0.,0.,0.,1.);\r#ifdef REFRACTION\nvec3 refractionVector=normalize(refract(-viewDirectionW,normalW,vRefractionInfos.y));\r#ifdef REFRACTIONMAP_3D\n#ifdef USE_LOCAL_REFRACTIONMAP_CUBIC\nrefractionVector=parallaxCorrectNormal(vPositionW,refractionVector,vRefractionSize,vRefractionPosition);\r#endif\nrefractionVector.y=refractionVector.y*vRefractionInfos.w;\rvec4 refractionLookup=textureCube(refractionCubeSampler,refractionVector);\rif (dot(refractionVector,viewDirectionW)<1.0) {\rrefractionColor=refractionLookup;\r}\r#else\nvec3 vRefractionUVW=vec3(refractionMatrix*(view*vec4(vPositionW+refractionVector*vRefractionInfos.z,1.0)));\rvec2 refractionCoords=vRefractionUVW.xy/vRefractionUVW.z;\rrefractionCoords.y=1.0-refractionCoords.y;\rrefractionColor=texture2D(refraction2DSampler,refractionCoords);\r#endif\n#ifdef RGBDREFRACTION\nrefractionColor.rgb=fromRGBD(refractionColor);\r#endif\n#ifdef IS_REFRACTION_LINEAR\nrefractionColor.rgb=toGammaSpace(refractionColor.rgb);\r#endif\nrefractionColor.rgb*=vRefractionInfos.x;\r#endif\nvec4 reflectionColor=vec4(0.,0.,0.,1.);\r#ifdef REFLECTION\nvec3 vReflectionUVW=computeReflectionCoords(vec4(vPositionW,1.0),normalW);\r#ifdef REFLECTIONMAP_OPPOSITEZ\nvReflectionUVW.z*=-1.0;\r#endif\n#ifdef REFLECTIONMAP_3D\n#ifdef ROUGHNESS\nfloat bias=vReflectionInfos.y;\r#ifdef SPECULARTERM\n#ifdef SPECULAR\n#ifdef GLOSSINESS\nbias*=(1.0-specularMapColor.a);\r#endif\n#endif\n#endif\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW,bias);\r#else\nreflectionColor=textureCube(reflectionCubeSampler,vReflectionUVW);\r#endif\n#else\nvec2 coords=vReflectionUVW.xy;\r#ifdef REFLECTIONMAP_PROJECTION\ncoords/=vReflectionUVW.z;\r#endif\ncoords.y=1.0-coords.y;\rreflectionColor=texture2D(reflection2DSampler,coords);\r#endif\n#ifdef RGBDREFLECTION\nreflectionColor.rgb=fromRGBD(reflectionColor);\r#endif\n#ifdef IS_REFLECTION_LINEAR\nreflectionColor.rgb=toGammaSpace(reflectionColor.rgb);\r#endif\nreflectionColor.rgb*=vReflectionInfos.x;\r#ifdef REFLECTIONFRESNEL\nfloat reflectionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,reflectionRightColor.a,reflectionLeftColor.a);\r#ifdef REFLECTIONFRESNELFROMSPECULAR\n#ifdef SPECULARTERM\nreflectionColor.rgb*=specularColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\r#else\nreflectionColor.rgb*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\r#endif\n#else\nreflectionColor.rgb*=reflectionLeftColor.rgb*(1.0-reflectionFresnelTerm)+reflectionFresnelTerm*reflectionRightColor.rgb;\r#endif\n#endif\n#endif\n#ifdef REFRACTIONFRESNEL\nfloat refractionFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,refractionRightColor.a,refractionLeftColor.a);\rrefractionColor.rgb*=refractionLeftColor.rgb*(1.0-refractionFresnelTerm)+refractionFresnelTerm*refractionRightColor.rgb;\r#endif\n#ifdef OPACITY\nvec4 opacityMap=texture2D(opacitySampler,vOpacityUV+uvOffset);\r#ifdef OPACITYRGB\nopacityMap.rgb=opacityMap.rgb*vec3(0.3,0.59,0.11);\ralpha*=(opacityMap.x+opacityMap.y+opacityMap.z)* vOpacityInfos.y;\r#else\nalpha*=opacityMap.a*vOpacityInfos.y;\r#endif\n#endif\n#if defined(VERTEXALPHA) || defined(INSTANCESCOLOR) && defined(INSTANCES)\nalpha*=vColor.a;\r#endif\n#ifdef OPACITYFRESNEL\nfloat opacityFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,opacityParts.z,opacityParts.w);\ralpha+=opacityParts.x*(1.0-opacityFresnelTerm)+opacityFresnelTerm*opacityParts.y;\r#endif\n#ifdef ALPHATEST\n#ifdef ALPHATEST_AFTERALLALPHACOMPUTATIONS\nif (alpha<alphaCutOff)\rdiscard;\r#endif\n#ifndef ALPHABLEND\nalpha=1.0;\r#endif\n#endif\nvec3 emissiveColor=vEmissiveColor;\r#ifdef EMISSIVE\nemissiveColor+=texture2D(emissiveSampler,vEmissiveUV+uvOffset).rgb*vEmissiveInfos.y;\r#endif\n#ifdef EMISSIVEFRESNEL\nfloat emissiveFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,emissiveRightColor.a,emissiveLeftColor.a);\remissiveColor*=emissiveLeftColor.rgb*(1.0-emissiveFresnelTerm)+emissiveFresnelTerm*emissiveRightColor.rgb;\r#endif\n#ifdef DIFFUSEFRESNEL\nfloat diffuseFresnelTerm=computeFresnelTerm(viewDirectionW,normalW,diffuseRightColor.a,diffuseLeftColor.a);\rdiffuseBase*=diffuseLeftColor.rgb*(1.0-diffuseFresnelTerm)+diffuseFresnelTerm*diffuseRightColor.rgb;\r#endif\n#ifdef EMISSIVEASILLUMINATION\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\r#else\n#ifdef LINKEMISSIVEWITHDIFFUSE\nvec3 finalDiffuse=clamp((diffuseBase+emissiveColor)*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\r#else\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+emissiveColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\r#endif\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\r#ifdef SPECULAROVERALPHA\nalpha=clamp(alpha+dot(finalSpecular,vec3(0.3,0.59,0.11)),0.,1.);\r#endif\n#else\nvec3 finalSpecular=vec3(0.0);\r#endif\n#ifdef REFLECTIONOVERALPHA\nalpha=clamp(alpha+dot(reflectionColor.rgb,vec3(0.3,0.59,0.11)),0.,1.);\r#endif\n#ifdef EMISSIVEASILLUMINATION\nvec4 color=vec4(clamp(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor.rgb+emissiveColor+refractionColor.rgb,0.0,1.0),alpha);\r#else\nvec4 color=vec4(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor.rgb+refractionColor.rgb,alpha);\r#endif\n#ifdef LIGHTMAP\n#ifndef LIGHTMAPEXCLUDED\n#ifdef USELIGHTMAPASSHADOWMAP\ncolor.rgb*=lightmapColor.rgb;\r#else\ncolor.rgb+=lightmapColor.rgb;\r#endif\n#endif\n#endif\n#define CUSTOM_FRAGMENT_BEFORE_FOG\ncolor.rgb=max(color.rgb,0.);\r#include<logDepthFragment>\n#include<fogFragment>\n#ifdef IMAGEPROCESSINGPOSTPROCESS\ncolor.rgb=toLinearSpace(color.rgb);\r#else\n#ifdef IMAGEPROCESSING\ncolor.rgb=toLinearSpace(color.rgb);\rcolor=applyImageProcessing(color);\r#endif\n#endif\ncolor.a*=visibility;\r#ifdef PREMULTIPLYALPHA\ncolor.rgb*=color.a;\r#endif\n#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\n#ifdef PREPASS\nfloat writeGeometryInfo=color.a>0.4 ? 1.0 : 0.0;\rgl_FragData[0]=color; \r#ifdef PREPASS_POSITION\ngl_FragData[PREPASS_POSITION_INDEX]=vec4(vPositionW,writeGeometryInfo);\r#endif\n#ifdef PREPASS_VELOCITY\nvec2 a=(vCurrentPosition.xy/vCurrentPosition.w)*0.5+0.5;\rvec2 b=(vPreviousPosition.xy/vPreviousPosition.w)*0.5+0.5;\rvec2 velocity=abs(a-b);\rvelocity=vec2(pow(velocity.x,1.0/3.0),pow(velocity.y,1.0/3.0))*sign(a-b)*0.5+0.5;\rgl_FragData[PREPASS_VELOCITY_INDEX]=vec4(velocity,0.0,writeGeometryInfo);\r#endif\n#ifdef PREPASS_IRRADIANCE\ngl_FragData[PREPASS_IRRADIANCE_INDEX]=vec4(0.0,0.0,0.0,writeGeometryInfo); \r#endif\n#ifdef PREPASS_DEPTH\ngl_FragData[PREPASS_DEPTH_INDEX]=vec4(vViewPos.z,0.0,0.0,writeGeometryInfo); \r#endif\n#ifdef PREPASS_NORMAL\ngl_FragData[PREPASS_NORMAL_INDEX]=vec4(normalize((view*vec4(normalW,0.0)).rgb),writeGeometryInfo); \r#endif\n#ifdef PREPASS_ALBEDO_SQRT\ngl_FragData[PREPASS_ALBEDO_SQRT_INDEX]=vec4(0.0,0.0,0.0,writeGeometryInfo); \r#endif\n#ifdef PREPASS_REFLECTIVITY\n#if defined(SPECULARTERM)\n#if defined(SPECULAR)\ngl_FragData[PREPASS_REFLECTIVITY_INDEX]=vec4(toLinearSpace(specularMapColor))*writeGeometryInfo; \r#else\ngl_FragData[PREPASS_REFLECTIVITY_INDEX]=vec4(toLinearSpace(specularColor),1.0)*writeGeometryInfo;\r#endif\n#else\ngl_FragData[PREPASS_REFLECTIVITY_INDEX]=vec4(0.0,0.0,0.0,1.0)*writeGeometryInfo;\r#endif\n#endif\n#endif\n#if !defined(PREPASS) || defined(WEBGL2)\ngl_FragColor=color;\r#endif\n#include<oitFragment>\n#if ORDER_INDEPENDENT_TRANSPARENCY\nif (fragDepth==nearestDepth) {\rfrontColor.rgb+=color.rgb*color.a*alphaMultiplier;\rfrontColor.a=1.0-alphaMultiplier*(1.0-color.a);\r} else {\rbackColor+=color;\r}\r#endif\n#define CUSTOM_FRAGMENT_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const defaultPixelShader = { name, shader };\n//# sourceMappingURL=default.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"bumpVertexDeclaration\";\nconst shader = `#if defined(BUMP) || defined(PARALLAX) || defined(CLEARCOAT_BUMP) || defined(ANISOTROPIC)\n#if defined(TANGENT) && defined(NORMAL) \nvarying mat3 vTBN;\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bumpVertexDeclaration = { name, shader };\n//# sourceMappingURL=bumpVertexDeclaration.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\nimport { MaterialPluginManager } from \"./materialPluginManager.js\";\n\n/**\n * Base class for material plugins.\n * @since 5.0\n */\nexport class MaterialPluginBase {\n    _enable(enable) {\n        if (enable) {\n            this._pluginManager._activatePlugin(this);\n        }\n    }\n    /**\n     * Creates a new material plugin\n     * @param material parent material of the plugin\n     * @param name name of the plugin\n     * @param priority priority of the plugin\n     * @param defines list of defines used by the plugin. The value of the property is the default value for this property\n     * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\n     * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\n     */\n    constructor(material, name, priority, defines, addToPluginList = true, enable = false) {\n        /**\n         * Defines the priority of the plugin. Lower numbers run first.\n         */\n        this.priority = 500;\n        /**\n         * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\n         */\n        this.registerForExtraEvents = false;\n        this._material = material;\n        this.name = name;\n        this.priority = priority;\n        if (!material.pluginManager) {\n            material.pluginManager = new MaterialPluginManager(material);\n            material.onDisposeObservable.add(() => {\n                material.pluginManager = undefined;\n            });\n        }\n        this._pluginDefineNames = defines;\n        this._pluginManager = material.pluginManager;\n        if (addToPluginList) {\n            this._pluginManager._addPlugin(this);\n        }\n        if (enable) {\n            this._enable(true);\n        }\n        this.markAllDefinesAsDirty = material._dirtyCallbacks[63];\n    }\n    /**\n     * Gets the current class name useful for serialization or dynamic coding.\n     * @returns The class name.\n     */\n    getClassName() {\n        return \"MaterialPluginBase\";\n    }\n    /**\n     * Specifies that the submesh is ready to be used.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene the material belongs to.\n     * @param engine the engine this scene belongs to.\n     * @param subMesh the submesh to check for readiness\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isReadyForSubMesh(defines, scene, engine, subMesh) {\n        return true;\n    }\n    /**\n     * Binds the material data (this function is called even if mustRebind() returns false)\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param subMesh the submesh to bind data for\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    hardBindForSubMesh(uniformBuffer, scene, engine, subMesh) { }\n    /**\n     * Binds the material data.\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine the engine this scene belongs to.\n     * @param subMesh the submesh to bind data for\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bindForSubMesh(uniformBuffer, scene, engine, subMesh) { }\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    dispose(forceDisposeTextures) { }\n    /**\n     * Returns a list of custom shader code fragments to customize the shader.\n     * @param shaderType \"vertex\" or \"fragment\"\n     * @returns null if no code to be added, or a list of pointName => code.\n     * Note that `pointName` can also be a regular expression if it starts with a `!`.\n     * In that case, the string found by the regular expression (if any) will be\n     * replaced by the code provided.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getCustomCode(shaderType) {\n        return null;\n    }\n    /**\n     * Collects all defines.\n     * @param defines The object to append to.\n     */\n    collectDefines(defines) {\n        if (!this._pluginDefineNames) {\n            return;\n        }\n        for (const key of Object.keys(this._pluginDefineNames)) {\n            if (key[0] === \"_\") {\n                continue;\n            }\n            const type = typeof this._pluginDefineNames[key];\n            defines[key] = {\n                type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\n                default: this._pluginDefineNames[key],\n            };\n        }\n    }\n    /**\n     * Sets the defines for the next rendering. Called before MaterialHelper.PrepareDefinesForAttributes is called.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     * @param mesh the mesh being rendered\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareDefinesBeforeAttributes(defines, scene, mesh) { }\n    /**\n     * Sets the defines for the next rendering\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     * @param mesh the mesh being rendered\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareDefines(defines, scene, mesh) { }\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    hasTexture(texture) {\n        return false;\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     * @returns true if this uses a render target otherwise false.\n     */\n    hasRenderTargetTextures() {\n        return false;\n    }\n    /**\n     * Fills the list of render target textures.\n     * @param renderTargets the list of render targets to update\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillRenderTargetTextures(renderTargets) { }\n    /**\n     * Returns an array of the actively used textures.\n     * @param activeTextures Array of BaseTextures\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getActiveTextures(activeTextures) { }\n    /**\n     * Returns the animatable textures.\n     * @param animatables Array of animatable textures.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAnimatables(animatables) { }\n    /**\n     * Add fallbacks to the effect fallbacks list.\n     * @param defines defines the Base texture to use.\n     * @param fallbacks defines the current fallback list.\n     * @param currentRank defines the current fallback rank.\n     * @returns the new fallback rank.\n     */\n    addFallbacks(defines, fallbacks, currentRank) {\n        return currentRank;\n    }\n    /**\n     * Gets the samplers used by the plugin.\n     * @param samplers list that the sampler names should be added to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getSamplers(samplers) { }\n    /**\n     * Gets the attributes used by the plugin.\n     * @param attributes list that the attribute names should be added to.\n     * @param scene the scene that the material belongs to.\n     * @param mesh the mesh being rendered.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAttributes(attributes, scene, mesh) { }\n    /**\n     * Gets the uniform buffers names added by the plugin.\n     * @param ubos list that the ubo names should be added to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getUniformBuffersNames(ubos) { }\n    /**\n     * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\n     * @returns the description of the uniforms\n     */\n    getUniforms() {\n        return {};\n    }\n    /**\n     * Makes a duplicate of the current configuration into another one.\n     * @param plugin define the config where to copy the info\n     */\n    copyTo(plugin) {\n        SerializationHelper.Clone(() => plugin, this);\n    }\n    /**\n     * Serializes this clear coat configuration.\n     * @returns - An object with the serialized config.\n     */\n    serialize() {\n        return SerializationHelper.Serialize(this);\n    }\n    /**\n     * Parses a anisotropy Configuration from a serialized object.\n     * @param source - Serialized object.\n     * @param scene Defines the scene we are parsing for\n     * @param rootUrl Defines the rootUrl to load from\n     */\n    parse(source, scene, rootUrl) {\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\n    }\n}\n__decorate([\n    serialize()\n], MaterialPluginBase.prototype, \"name\", void 0);\n__decorate([\n    serialize()\n], MaterialPluginBase.prototype, \"priority\", void 0);\n__decorate([\n    serialize()\n], MaterialPluginBase.prototype, \"registerForExtraEvents\", void 0);\n//# sourceMappingURL=materialPluginBase.js.map","import { __decorate } from \"../tslib.es6.js\";\nimport { Material } from \"./material.js\";\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { MaterialDefines } from \"./materialDefines.js\";\nimport { MaterialPluginBase } from \"./materialPluginBase.js\";\n\n/**\n * @internal\n */\nexport class MaterialDetailMapDefines extends MaterialDefines {\n    constructor() {\n        super(...arguments);\n        this.DETAIL = false;\n        this.DETAILDIRECTUV = 0;\n        this.DETAIL_NORMALBLENDMETHOD = 0;\n    }\n}\n/**\n * Plugin that implements the detail map component of a material\n *\n * Inspired from:\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\n */\nexport class DetailMapConfiguration extends MaterialPluginBase {\n    /** @internal */\n    _markAllSubMeshesAsTexturesDirty() {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    }\n    constructor(material, addToPluginList = true) {\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\n        this._texture = null;\n        /**\n         * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\n         * Bigger values mean stronger blending\n         */\n        this.diffuseBlendLevel = 1;\n        /**\n         * Defines how strongly the detail roughness channel is blended with the regular roughness value\n         * Bigger values mean stronger blending. Only used with PBR materials\n         */\n        this.roughnessBlendLevel = 1;\n        /**\n         * Defines how strong the bump effect from the detail map is\n         * Bigger values mean stronger effect\n         */\n        this.bumpLevel = 1;\n        this._normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\n        this._isEnabled = false;\n        /**\n         * Enable or disable the detail map on this material\n         */\n        this.isEnabled = false;\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n    }\n    isReadyForSubMesh(defines, scene, engine) {\n        if (!this._isEnabled) {\n            return true;\n        }\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\n                // Detail texture cannot be not blocking.\n                if (!this._texture.isReady()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    prepareDefines(defines, scene) {\n        if (this._isEnabled) {\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n            const engine = scene.getEngine();\n            if (defines._areTexturesDirty) {\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n                }\n                else {\n                    defines.DETAIL = false;\n                }\n            }\n        }\n        else {\n            defines.DETAIL = false;\n        }\n    }\n    bindForSubMesh(uniformBuffer, scene) {\n        if (!this._isEnabled) {\n            return;\n        }\n        const isFrozen = this._material.isFrozen;\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\n            }\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\n            }\n        }\n    }\n    hasTexture(texture) {\n        if (this._texture === texture) {\n            return true;\n        }\n        return false;\n    }\n    getActiveTextures(activeTextures) {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n    }\n    getAnimatables(animatables) {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n    }\n    dispose(forceDisposeTextures) {\n        var _a;\n        if (forceDisposeTextures) {\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n    }\n    getClassName() {\n        return \"DetailMapConfiguration\";\n    }\n    getSamplers(samplers) {\n        samplers.push(\"detailSampler\");\n    }\n    getUniforms() {\n        return {\n            ubo: [\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\n            ],\n        };\n    }\n}\n__decorate([\n    serializeAsTexture(\"detailTexture\"),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], DetailMapConfiguration.prototype, \"texture\", void 0);\n__decorate([\n    serialize()\n], DetailMapConfiguration.prototype, \"diffuseBlendLevel\", void 0);\n__decorate([\n    serialize()\n], DetailMapConfiguration.prototype, \"roughnessBlendLevel\", void 0);\n__decorate([\n    serialize()\n], DetailMapConfiguration.prototype, \"bumpLevel\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], DetailMapConfiguration.prototype, \"normalBlendMethod\", void 0);\n__decorate([\n    serialize(),\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], DetailMapConfiguration.prototype, \"isEnabled\", void 0);\n//# sourceMappingURL=material.detailMapConfiguration.js.map","import { __decorate } from \"../tslib.es6.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Scene } from \"../scene.js\";\nimport { Matrix } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { PrePassConfiguration } from \"./prePassConfiguration.js\";\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\nimport { MaterialDefines } from \"../Materials/materialDefines.js\";\nimport { PushMaterial } from \"./pushMaterial.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport \"../Shaders/default.fragment.js\";\nimport \"../Shaders/default.vertex.js\";\n\nimport { EffectFallbacks } from \"./effectFallbacks.js\";\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration.js\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"./clipPlaneMaterialHelper.js\";\nconst onCreatedEffectParameters = { effect: null, subMesh: null };\n/** @internal */\nexport class StandardMaterialDefines extends MaterialDefines {\n    /**\n     * Initializes the Standard Material defines.\n     * @param externalProperties The external properties\n     */\n    constructor(externalProperties) {\n        super(externalProperties);\n        this.MAINUV1 = false;\n        this.MAINUV2 = false;\n        this.MAINUV3 = false;\n        this.MAINUV4 = false;\n        this.MAINUV5 = false;\n        this.MAINUV6 = false;\n        this.DIFFUSE = false;\n        this.DIFFUSEDIRECTUV = 0;\n        this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        this.AMBIENT = false;\n        this.AMBIENTDIRECTUV = 0;\n        this.OPACITY = false;\n        this.OPACITYDIRECTUV = 0;\n        this.OPACITYRGB = false;\n        this.REFLECTION = false;\n        this.EMISSIVE = false;\n        this.EMISSIVEDIRECTUV = 0;\n        this.SPECULAR = false;\n        this.SPECULARDIRECTUV = 0;\n        this.BUMP = false;\n        this.BUMPDIRECTUV = 0;\n        this.PARALLAX = false;\n        this.PARALLAXOCCLUSION = false;\n        this.SPECULAROVERALPHA = false;\n        this.CLIPPLANE = false;\n        this.CLIPPLANE2 = false;\n        this.CLIPPLANE3 = false;\n        this.CLIPPLANE4 = false;\n        this.CLIPPLANE5 = false;\n        this.CLIPPLANE6 = false;\n        this.ALPHATEST = false;\n        this.DEPTHPREPASS = false;\n        this.ALPHAFROMDIFFUSE = false;\n        this.POINTSIZE = false;\n        this.FOG = false;\n        this.SPECULARTERM = false;\n        this.DIFFUSEFRESNEL = false;\n        this.OPACITYFRESNEL = false;\n        this.REFLECTIONFRESNEL = false;\n        this.REFRACTIONFRESNEL = false;\n        this.EMISSIVEFRESNEL = false;\n        this.FRESNEL = false;\n        this.NORMAL = false;\n        this.TANGENT = false;\n        this.UV1 = false;\n        this.UV2 = false;\n        this.UV3 = false;\n        this.UV4 = false;\n        this.UV5 = false;\n        this.UV6 = false;\n        this.VERTEXCOLOR = false;\n        this.VERTEXALPHA = false;\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.BONETEXTURE = false;\n        this.BONES_VELOCITY_ENABLED = false;\n        this.INSTANCES = false;\n        this.THIN_INSTANCES = false;\n        this.INSTANCESCOLOR = false;\n        this.GLOSSINESS = false;\n        this.ROUGHNESS = false;\n        this.EMISSIVEASILLUMINATION = false;\n        this.LINKEMISSIVEWITHDIFFUSE = false;\n        this.REFLECTIONFRESNELFROMSPECULAR = false;\n        this.LIGHTMAP = false;\n        this.LIGHTMAPDIRECTUV = 0;\n        this.OBJECTSPACE_NORMALMAP = false;\n        this.USELIGHTMAPASSHADOWMAP = false;\n        this.REFLECTIONMAP_3D = false;\n        this.REFLECTIONMAP_SPHERICAL = false;\n        this.REFLECTIONMAP_PLANAR = false;\n        this.REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        this.USE_LOCAL_REFRACTIONMAP_CUBIC = false;\n        this.REFLECTIONMAP_PROJECTION = false;\n        this.REFLECTIONMAP_SKYBOX = false;\n        this.REFLECTIONMAP_EXPLICIT = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        this.REFLECTIONMAP_OPPOSITEZ = false;\n        this.INVERTCUBICMAP = false;\n        this.LOGARITHMICDEPTH = false;\n        this.REFRACTION = false;\n        this.REFRACTIONMAP_3D = false;\n        this.REFLECTIONOVERALPHA = false;\n        this.TWOSIDEDLIGHTING = false;\n        this.SHADOWFLOAT = false;\n        this.MORPHTARGETS = false;\n        this.MORPHTARGETS_NORMAL = false;\n        this.MORPHTARGETS_TANGENT = false;\n        this.MORPHTARGETS_UV = false;\n        this.NUM_MORPH_INFLUENCERS = 0;\n        this.MORPHTARGETS_TEXTURE = false;\n        this.NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\n        this.PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\n        this.ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\n        this.ALPHABLEND = true;\n        this.PREPASS = false;\n        this.PREPASS_IRRADIANCE = false;\n        this.PREPASS_IRRADIANCE_INDEX = -1;\n        this.PREPASS_ALBEDO_SQRT = false;\n        this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        this.PREPASS_DEPTH = false;\n        this.PREPASS_DEPTH_INDEX = -1;\n        this.PREPASS_NORMAL = false;\n        this.PREPASS_NORMAL_INDEX = -1;\n        this.PREPASS_POSITION = false;\n        this.PREPASS_POSITION_INDEX = -1;\n        this.PREPASS_VELOCITY = false;\n        this.PREPASS_VELOCITY_INDEX = -1;\n        this.PREPASS_REFLECTIVITY = false;\n        this.PREPASS_REFLECTIVITY_INDEX = -1;\n        this.SCENE_MRT_COUNT = 0;\n        this.RGBDLIGHTMAP = false;\n        this.RGBDREFLECTION = false;\n        this.RGBDREFRACTION = false;\n        this.IMAGEPROCESSING = false;\n        this.VIGNETTE = false;\n        this.VIGNETTEBLENDMODEMULTIPLY = false;\n        this.VIGNETTEBLENDMODEOPAQUE = false;\n        this.TONEMAPPING = false;\n        this.TONEMAPPING_ACES = false;\n        this.CONTRAST = false;\n        this.COLORCURVES = false;\n        this.COLORGRADING = false;\n        this.COLORGRADING3D = false;\n        this.SAMPLER3DGREENDEPTH = false;\n        this.SAMPLER3DBGRMAP = false;\n        this.DITHER = false;\n        this.IMAGEPROCESSINGPOSTPROCESS = false;\n        this.SKIPFINALCOLORCLAMP = false;\n        this.MULTIVIEW = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n        this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n        this.CAMERA_ORTHOGRAPHIC = false;\n        this.CAMERA_PERSPECTIVE = false;\n        /**\n         * If the reflection texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFLECTION_LINEAR = false;\n        /**\n         * If the refraction texture on this material is in linear color space\n         * @internal\n         */\n        this.IS_REFRACTION_LINEAR = false;\n        this.EXPOSURE = false;\n        this.rebuild();\n    }\n    setReflectionMode(modeToEnable) {\n        const modes = [\n            \"REFLECTIONMAP_CUBIC\",\n            \"REFLECTIONMAP_EXPLICIT\",\n            \"REFLECTIONMAP_PLANAR\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_SKYBOX\",\n            \"REFLECTIONMAP_SPHERICAL\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\n        ];\n        for (const mode of modes) {\n            this[mode] = mode === modeToEnable;\n        }\n    }\n}\n/**\n * This is the default material used in Babylon. It is the best trade off between quality\n * and performances.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n */\nexport class StandardMaterial extends PushMaterial {\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get imageProcessingConfiguration() {\n        return this._imageProcessingConfiguration;\n    }\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set imageProcessingConfiguration(value) {\n        this._attachImageProcessingConfiguration(value);\n        // Ensure the effect will be rebuilt.\n        this._markAllSubMeshesAsTexturesDirty();\n    }\n    /**\n     * Attaches a new image processing configuration to the Standard Material.\n     * @param configuration\n     */\n    _attachImageProcessingConfiguration(configuration) {\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed\n        if (!configuration) {\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\n                this._markAllSubMeshesAsImageProcessingDirty();\n            });\n        }\n    }\n    /**\n     * Can this material render to prepass\n     */\n    get isPrePassCapable() {\n        return !this.disableDepthWrite;\n    }\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get cameraColorCurvesEnabled() {\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\n    }\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set cameraColorCurvesEnabled(value) {\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get cameraColorGradingEnabled() {\n        return this.imageProcessingConfiguration.colorGradingEnabled;\n    }\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    set cameraColorGradingEnabled(value) {\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\n    }\n    /**\n     * Gets whether tonemapping is enabled or not.\n     */\n    get cameraToneMappingEnabled() {\n        return this._imageProcessingConfiguration.toneMappingEnabled;\n    }\n    /**\n     * Sets whether tonemapping is enabled or not\n     */\n    set cameraToneMappingEnabled(value) {\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\n    }\n    /**\n     * The camera exposure used on this material.\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\n     * This corresponds to a photographic exposure.\n     */\n    get cameraExposure() {\n        return this._imageProcessingConfiguration.exposure;\n    }\n    /**\n     * The camera exposure used on this material.\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\n     * This corresponds to a photographic exposure.\n     */\n    set cameraExposure(value) {\n        this._imageProcessingConfiguration.exposure = value;\n    }\n    /**\n     * Gets The camera contrast used on this material.\n     */\n    get cameraContrast() {\n        return this._imageProcessingConfiguration.contrast;\n    }\n    /**\n     * Sets The camera contrast used on this material.\n     */\n    set cameraContrast(value) {\n        this._imageProcessingConfiguration.contrast = value;\n    }\n    /**\n     * Gets the Color Grading 2D Lookup Texture.\n     */\n    get cameraColorGradingTexture() {\n        return this._imageProcessingConfiguration.colorGradingTexture;\n    }\n    /**\n     * Sets the Color Grading 2D Lookup Texture.\n     */\n    set cameraColorGradingTexture(value) {\n        this._imageProcessingConfiguration.colorGradingTexture = value;\n    }\n    /**\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n     */\n    get cameraColorCurves() {\n        return this._imageProcessingConfiguration.colorCurves;\n    }\n    /**\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n     */\n    set cameraColorCurves(value) {\n        this._imageProcessingConfiguration.colorCurves = value;\n    }\n    /**\n     * Can this material render to several textures at once\n     */\n    get canRenderToMRT() {\n        return true;\n    }\n    /**\n     * Instantiates a new standard material.\n     * This is the default material used in Babylon. It is the best trade off between quality\n     * and performances.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belong to\n     */\n    constructor(name, scene) {\n        super(name, scene);\n        this._diffuseTexture = null;\n        this._ambientTexture = null;\n        this._opacityTexture = null;\n        this._reflectionTexture = null;\n        this._emissiveTexture = null;\n        this._specularTexture = null;\n        this._bumpTexture = null;\n        this._lightmapTexture = null;\n        this._refractionTexture = null;\n        /**\n         * The color of the material lit by the environmental background lighting.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\n         */\n        this.ambientColor = new Color3(0, 0, 0);\n        /**\n         * The basic color of the material as viewed under a light.\n         */\n        this.diffuseColor = new Color3(1, 1, 1);\n        /**\n         * Define how the color and intensity of the highlight given by the light in the material.\n         */\n        this.specularColor = new Color3(1, 1, 1);\n        /**\n         * Define the color of the material as if self lit.\n         * This will be mixed in the final result even in the absence of light.\n         */\n        this.emissiveColor = new Color3(0, 0, 0);\n        /**\n         * Defines how sharp are the highlights in the material.\n         * The bigger the value the sharper giving a more glossy feeling to the result.\n         * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\n         */\n        this.specularPower = 64;\n        this._useAlphaFromDiffuseTexture = false;\n        this._useEmissiveAsIllumination = false;\n        this._linkEmissiveWithDiffuse = false;\n        this._useSpecularOverAlpha = false;\n        this._useReflectionOverAlpha = false;\n        this._disableLighting = false;\n        this._useObjectSpaceNormalMap = false;\n        this._useParallax = false;\n        this._useParallaxOcclusion = false;\n        /**\n         * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\n         */\n        this.parallaxScaleBias = 0.05;\n        this._roughness = 0;\n        /**\n         * In case of refraction, define the value of the index of refraction.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.indexOfRefraction = 0.98;\n        /**\n         * Invert the refraction texture alongside the y axis.\n         * It can be useful with procedural textures or probe for instance.\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\n         */\n        this.invertRefractionY = true;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        this.alphaCutOff = 0.4;\n        this._useLightmapAsShadowmap = false;\n        this._useReflectionFresnelFromSpecular = false;\n        this._useGlossinessFromSpecularMapAlpha = false;\n        this._maxSimultaneousLights = 4;\n        this._invertNormalMapX = false;\n        this._invertNormalMapY = false;\n        this._twoSidedLighting = false;\n        this._renderTargets = new SmartArray(16);\n        this._worldViewProjectionMatrix = Matrix.Zero();\n        this._globalAmbientColor = new Color3(0, 0, 0);\n        this._cacheHasRenderTargetTextures = false;\n        this.detailMap = new DetailMapConfiguration(this);\n        // Setup the default processing configuration to the scene.\n        this._attachImageProcessingConfiguration(null);\n        this.prePassConfiguration = new PrePassConfiguration();\n        this.getRenderTargetTextures = () => {\n            this._renderTargets.reset();\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n                this._renderTargets.push(this._reflectionTexture);\n            }\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n                this._renderTargets.push(this._refractionTexture);\n            }\n            this._eventInfo.renderTargets = this._renderTargets;\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\n            return this._renderTargets;\n        };\n    }\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get hasRenderTargetTextures() {\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n            return true;\n        }\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n            return true;\n        }\n        return this._cacheHasRenderTargetTextures;\n    }\n    /**\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    getClassName() {\n        return \"StandardMaterial\";\n    }\n    /**\n     * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\n     * You can try switching to logarithmic depth.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/logarithmicDepthBuffer\n     */\n    get useLogarithmicDepth() {\n        return this._useLogarithmicDepth;\n    }\n    set useLogarithmicDepth(value) {\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n        this._markAllSubMeshesAsMiscDirty();\n    }\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    needAlphaBlending() {\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return (this.alpha < 1.0 ||\n            this._opacityTexture != null ||\n            this._shouldUseAlphaFromDiffuseTexture() ||\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled));\n    }\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    needAlphaTesting() {\n        if (this._forceAlphaTest) {\n            return true;\n        }\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\n    }\n    /**\n     * Specifies whether or not the alpha value of the diffuse texture should be used for alpha blending.\n     */\n    _shouldUseAlphaFromDiffuseTexture() {\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\n    }\n    /**\n     * Specifies whether or not there is a usable alpha channel for transparency.\n     */\n    _hasAlphaChannel() {\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\n    }\n    /**\n     * Get the texture used for alpha test purpose.\n     * @returns the diffuse texture in case of the standard material.\n     */\n    getAlphaTestTexture() {\n        return this._diffuseTexture;\n    }\n    /**\n     * Get if the submesh is ready to be used and all its information available.\n     * Child classes can use it to update shaders\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    isReadyForSubMesh(mesh, subMesh, useInstances = false) {\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        if (subMesh.effect && this.isFrozen) {\n            if (subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\n        }\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Lights\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        // Multiview\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\n        // Textures\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            defines._needUVs = false;\n            for (let i = 1; i <= 6; ++i) {\n                defines[\"MAINUV\" + i] = false;\n            }\n            if (scene.texturesEnabled) {\n                defines.DIFFUSEDIRECTUV = 0;\n                defines.BUMPDIRECTUV = 0;\n                defines.AMBIENTDIRECTUV = 0;\n                defines.OPACITYDIRECTUV = 0;\n                defines.EMISSIVEDIRECTUV = 0;\n                defines.SPECULARDIRECTUV = 0;\n                defines.LIGHTMAPDIRECTUV = 0;\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\n                    }\n                }\n                else {\n                    defines.DIFFUSE = false;\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n                    }\n                }\n                else {\n                    defines.AMBIENT = false;\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n                    }\n                }\n                else {\n                    defines.OPACITY = false;\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needNormals = true;\n                        defines.REFLECTION = true;\n                        defines.ROUGHNESS = this._roughness > 0;\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\n                        defines.REFLECTIONMAP_OPPOSITEZ =\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\n                        switch (this._reflectionTexture.coordinatesMode) {\n                            case Texture.EXPLICIT_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\n                                break;\n                            case Texture.PLANAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\n                                break;\n                            case Texture.PROJECTION_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\n                                break;\n                            case Texture.SKYBOX_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\n                                break;\n                            case Texture.SPHERICAL_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\n                                break;\n                            case Texture.EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.CUBIC_MODE:\n                            case Texture.INVCUBIC_MODE:\n                            default:\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\n                                break;\n                        }\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = this._reflectionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFLECTION = false;\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n                    }\n                }\n                else {\n                    defines.EMISSIVE = false;\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n                    }\n                }\n                else {\n                    defines.LIGHTMAP = false;\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\n                    }\n                }\n                else {\n                    defines.SPECULAR = false;\n                }\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                    // Bump texture can not be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n                        defines.PARALLAX = this._useParallax;\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.BUMP = false;\n                    defines.PARALLAX = false;\n                    defines.PARALLAXOCCLUSION = false;\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needUVs = true;\n                        defines.REFRACTION = true;\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = this._refractionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFRACTION = false;\n                }\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\n            }\n            else {\n                defines.DIFFUSE = false;\n                defines.AMBIENT = false;\n                defines.OPACITY = false;\n                defines.REFLECTION = false;\n                defines.EMISSIVE = false;\n                defines.LIGHTMAP = false;\n                defines.BUMP = false;\n                defines.REFRACTION = false;\n            }\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n            defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n            this._imageProcessingConfiguration.prepareDefines(defines);\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\n        }\n        if (defines._areFresnelDirty) {\n            if (StandardMaterial.FresnelEnabled) {\n                // Fresnel\n                if (this._diffuseFresnelParameters ||\n                    this._opacityFresnelParameters ||\n                    this._emissiveFresnelParameters ||\n                    this._refractionFresnelParameters ||\n                    this._reflectionFresnelParameters) {\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\n                    defines._needNormals = true;\n                    defines.FRESNEL = true;\n                }\n            }\n            else {\n                defines.FRESNEL = false;\n            }\n        }\n        // Misc.\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n        // Get correct effect\n        let forceWasNotReadyPreviously = false;\n        if (defines.isDirty) {\n            const lightDisposed = defines._areLightsDisposed;\n            defines.markAsProcessed();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.REFLECTION) {\n                fallbacks.addFallback(0, \"REFLECTION\");\n            }\n            if (defines.SPECULAR) {\n                fallbacks.addFallback(0, \"SPECULAR\");\n            }\n            if (defines.BUMP) {\n                fallbacks.addFallback(0, \"BUMP\");\n            }\n            if (defines.PARALLAX) {\n                fallbacks.addFallback(1, \"PARALLAX\");\n            }\n            if (defines.PARALLAXOCCLUSION) {\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\n            }\n            if (defines.SPECULAROVERALPHA) {\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\n            }\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            if (defines.POINTSIZE) {\n                fallbacks.addFallback(0, \"POINTSIZE\");\n            }\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\n            if (defines.SPECULARTERM) {\n                fallbacks.addFallback(0, \"SPECULARTERM\");\n            }\n            if (defines.DIFFUSEFRESNEL) {\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\n            }\n            if (defines.OPACITYFRESNEL) {\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\n            }\n            if (defines.REFLECTIONFRESNEL) {\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\n            }\n            if (defines.EMISSIVEFRESNEL) {\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\n            }\n            if (defines.FRESNEL) {\n                fallbacks.addFallback(4, \"FRESNEL\");\n            }\n            if (defines.MULTIVIEW) {\n                fallbacks.addFallback(0, \"MULTIVIEW\");\n            }\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            for (let i = 1; i <= 6; ++i) {\n                if (defines[\"UV\" + i]) {\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\n                }\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n            let shaderName = \"default\";\n            const uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vAmbientColor\",\n                \"vDiffuseColor\",\n                \"vSpecularColor\",\n                \"vEmissiveColor\",\n                \"visibility\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"vAmbientInfos\",\n                \"vOpacityInfos\",\n                \"vReflectionInfos\",\n                \"vEmissiveInfos\",\n                \"vSpecularInfos\",\n                \"vBumpInfos\",\n                \"vLightmapInfos\",\n                \"vRefractionInfos\",\n                \"mBones\",\n                \"diffuseMatrix\",\n                \"ambientMatrix\",\n                \"opacityMatrix\",\n                \"reflectionMatrix\",\n                \"emissiveMatrix\",\n                \"specularMatrix\",\n                \"bumpMatrix\",\n                \"normalMatrix\",\n                \"lightmapMatrix\",\n                \"refractionMatrix\",\n                \"diffuseLeftColor\",\n                \"diffuseRightColor\",\n                \"opacityParts\",\n                \"reflectionLeftColor\",\n                \"reflectionRightColor\",\n                \"emissiveLeftColor\",\n                \"emissiveRightColor\",\n                \"refractionLeftColor\",\n                \"refractionRightColor\",\n                \"vReflectionPosition\",\n                \"vReflectionSize\",\n                \"vRefractionPosition\",\n                \"vRefractionSize\",\n                \"logarithmicDepthConstant\",\n                \"vTangentSpaceParams\",\n                \"alphaCutOff\",\n                \"boneTextureWidth\",\n                \"morphTargetTextureInfo\",\n                \"morphTargetTextureIndices\",\n            ];\n            const samplers = [\n                \"diffuseSampler\",\n                \"ambientSampler\",\n                \"opacitySampler\",\n                \"reflectionCubeSampler\",\n                \"reflection2DSampler\",\n                \"emissiveSampler\",\n                \"specularSampler\",\n                \"bumpSampler\",\n                \"lightmapSampler\",\n                \"refractionCubeSampler\",\n                \"refraction2DSampler\",\n                \"boneSampler\",\n                \"morphTargets\",\n                \"oitDepthSampler\",\n                \"oitFrontColorSampler\",\n            ];\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n            this._eventInfo.fallbacks = fallbacks;\n            this._eventInfo.fallbackRank = 0;\n            this._eventInfo.defines = defines;\n            this._eventInfo.uniforms = uniforms;\n            this._eventInfo.attributes = attribs;\n            this._eventInfo.samplers = samplers;\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\n            this._eventInfo.customCode = undefined;\n            this._eventInfo.mesh = mesh;\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\n            PrePassConfiguration.AddUniforms(uniforms);\n            PrePassConfiguration.AddSamplers(samplers);\n            if (ImageProcessingConfiguration) {\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n            }\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this._maxSimultaneousLights,\n            });\n            addClipPlaneUniforms(uniforms);\n            const csnrOptions = {};\n            if (this.customShaderNameResolve) {\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n            }\n            const join = defines.toString();\n            const previousEffect = subMesh.effect;\n            let effect = scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\n                processFinalCode: csnrOptions.processFinalCode,\n                processCodeAfterIncludes: this._eventInfo.customCode,\n                multiTarget: defines.PREPASS,\n            }, engine);\n            this._eventInfo.customCode = undefined;\n            if (effect) {\n                if (this._onEffectCreatedObservable) {\n                    onCreatedEffectParameters.effect = effect;\n                    onCreatedEffectParameters.subMesh = subMesh;\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n                }\n                // Use previous effect while new one is compiling\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                    effect = previousEffect;\n                    defines.markAsUnprocessed();\n                    forceWasNotReadyPreviously = this.isFrozen;\n                    if (lightDisposed) {\n                        // re register in case it takes more than one frame.\n                        defines._areLightsDisposed = true;\n                        return false;\n                    }\n                }\n                else {\n                    scene.resetCachedMaterial();\n                    subMesh.setEffect(effect, defines, this._materialContext);\n                }\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\n        subMesh.effect._wasPreviouslyUsingInstances = useInstances;\n        this._checkScenePerformancePriority();\n        return true;\n    }\n    /**\n     * Builds the material UBO layouts.\n     * Used internally during the effect preparation.\n     */\n    buildUniformLayout() {\n        // Order is important !\n        const ubo = this._uniformBuffer;\n        ubo.addUniform(\"diffuseLeftColor\", 4);\n        ubo.addUniform(\"diffuseRightColor\", 4);\n        ubo.addUniform(\"opacityParts\", 4);\n        ubo.addUniform(\"reflectionLeftColor\", 4);\n        ubo.addUniform(\"reflectionRightColor\", 4);\n        ubo.addUniform(\"refractionLeftColor\", 4);\n        ubo.addUniform(\"refractionRightColor\", 4);\n        ubo.addUniform(\"emissiveLeftColor\", 4);\n        ubo.addUniform(\"emissiveRightColor\", 4);\n        ubo.addUniform(\"vDiffuseInfos\", 2);\n        ubo.addUniform(\"vAmbientInfos\", 2);\n        ubo.addUniform(\"vOpacityInfos\", 2);\n        ubo.addUniform(\"vReflectionInfos\", 2);\n        ubo.addUniform(\"vReflectionPosition\", 3);\n        ubo.addUniform(\"vReflectionSize\", 3);\n        ubo.addUniform(\"vEmissiveInfos\", 2);\n        ubo.addUniform(\"vLightmapInfos\", 2);\n        ubo.addUniform(\"vSpecularInfos\", 2);\n        ubo.addUniform(\"vBumpInfos\", 3);\n        ubo.addUniform(\"diffuseMatrix\", 16);\n        ubo.addUniform(\"ambientMatrix\", 16);\n        ubo.addUniform(\"opacityMatrix\", 16);\n        ubo.addUniform(\"reflectionMatrix\", 16);\n        ubo.addUniform(\"emissiveMatrix\", 16);\n        ubo.addUniform(\"lightmapMatrix\", 16);\n        ubo.addUniform(\"specularMatrix\", 16);\n        ubo.addUniform(\"bumpMatrix\", 16);\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"alphaCutOff\", 1);\n        ubo.addUniform(\"refractionMatrix\", 16);\n        ubo.addUniform(\"vRefractionInfos\", 4);\n        ubo.addUniform(\"vRefractionPosition\", 3);\n        ubo.addUniform(\"vRefractionSize\", 3);\n        ubo.addUniform(\"vSpecularColor\", 4);\n        ubo.addUniform(\"vEmissiveColor\", 3);\n        ubo.addUniform(\"vDiffuseColor\", 4);\n        ubo.addUniform(\"vAmbientColor\", 3);\n        super.buildUniformLayout();\n    }\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    bindForSubMesh(world, mesh, subMesh) {\n        var _a;\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        const mustRebind = effect._forceRebindOnNextCall || this._mustRebind(scene, effect, mesh.visibility);\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, effect);\n        const ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || effect._forceRebindOnNextCall) {\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\n                    // Fresnel\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\n                    }\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"opacityParts\", new Color3(this.opacityFresnelParameters.leftColor.toLuminance(), this.opacityFresnelParameters.rightColor.toLuminance(), this.opacityFresnelParameters.bias), this.opacityFresnelParameters.power);\n                    }\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\n                    }\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\n                    }\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\n                    }\n                }\n                // Textures\n                if (scene.texturesEnabled) {\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\n                    }\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n                    }\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n                    }\n                    if (this._hasAlphaChannel()) {\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\n                    }\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\n                        if (this._reflectionTexture.boundingBoxSize) {\n                            const cubeTexture = this._reflectionTexture;\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n                    }\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n                    }\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._specularTexture, ubo, \"specular\");\n                    }\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                        let depth = 1.0;\n                        if (!this._refractionTexture.isCube) {\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\n                            if (this._refractionTexture.depth) {\n                                depth = this._refractionTexture.depth;\n                            }\n                        }\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\n                        if (this._refractionTexture.boundingBoxSize) {\n                            const cubeTexture = this._refractionTexture;\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                if (defines.SPECULARTERM) {\n                    ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n                }\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (this._reflectionTexture.isCube) {\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\n                    }\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\n                }\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (this._refractionTexture.isCube) {\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\n                    }\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            bindClipPlane(effect, this, scene);\n            // Colors\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                MaterialHelper.BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\n                this._reflectionTexture ||\n                this._refractionTexture ||\n                mesh.receiveShadows ||\n                defines.PREPASS) {\n                this.bindView(effect);\n            }\n            // Fog\n            MaterialHelper.BindFogParameters(scene, mesh, effect);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                (_a = mesh.bakedVertexAnimationManager) === null || _a === void 0 ? void 0 : _a.bind(effect, defines.INSTANCES);\n            }\n            // Log. depth\n            if (this.useLogarithmicDepth) {\n                MaterialHelper.BindLogDepth(defines, effect, scene);\n            }\n            // image processing\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n                this._imageProcessingConfiguration.bind(this._activeEffect);\n            }\n        }\n        this._afterBind(mesh, this._activeEffect);\n        ubo.update();\n    }\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    getAnimatables() {\n        const results = super.getAnimatables();\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\n            results.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n            results.push(this._ambientTexture);\n        }\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n            results.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n            results.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n            results.push(this._emissiveTexture);\n        }\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\n            results.push(this._specularTexture);\n        }\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            results.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n            results.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\n            results.push(this._refractionTexture);\n        }\n        return results;\n    }\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    getActiveTextures() {\n        const activeTextures = super.getActiveTextures();\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture) {\n            activeTextures.push(this._ambientTexture);\n        }\n        if (this._opacityTexture) {\n            activeTextures.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture) {\n            activeTextures.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture) {\n            activeTextures.push(this._emissiveTexture);\n        }\n        if (this._specularTexture) {\n            activeTextures.push(this._specularTexture);\n        }\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture) {\n            activeTextures.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture) {\n            activeTextures.push(this._refractionTexture);\n        }\n        return activeTextures;\n    }\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    hasTexture(texture) {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n        if (this._diffuseTexture === texture) {\n            return true;\n        }\n        if (this._ambientTexture === texture) {\n            return true;\n        }\n        if (this._opacityTexture === texture) {\n            return true;\n        }\n        if (this._reflectionTexture === texture) {\n            return true;\n        }\n        if (this._emissiveTexture === texture) {\n            return true;\n        }\n        if (this._specularTexture === texture) {\n            return true;\n        }\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n        if (this._lightmapTexture === texture) {\n            return true;\n        }\n        if (this._refractionTexture === texture) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     */\n    dispose(forceDisposeEffect, forceDisposeTextures) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (forceDisposeTextures) {\n            (_a = this._diffuseTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n            (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n            (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n            (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n            (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n            (_f = this._specularTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n            (_g = this._bumpTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n            (_h = this._lightmapTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n            (_j = this._refractionTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n        }\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\n    }\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    clone(name) {\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this);\n        result.name = name;\n        result.id = name;\n        this.stencil.copyTo(result.stencil);\n        return result;\n    }\n    /**\n     * Creates a standard material from parsed material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new standard material\n     */\n    static Parse(source, scene, rootUrl) {\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        return material;\n    }\n    // Flags used to enable or disable a type of texture for all Standard Materials\n    /**\n     * Are diffuse textures enabled in the application.\n     */\n    static get DiffuseTextureEnabled() {\n        return MaterialFlags.DiffuseTextureEnabled;\n    }\n    static set DiffuseTextureEnabled(value) {\n        MaterialFlags.DiffuseTextureEnabled = value;\n    }\n    /**\n     * Are detail textures enabled in the application.\n     */\n    static get DetailTextureEnabled() {\n        return MaterialFlags.DetailTextureEnabled;\n    }\n    static set DetailTextureEnabled(value) {\n        MaterialFlags.DetailTextureEnabled = value;\n    }\n    /**\n     * Are ambient textures enabled in the application.\n     */\n    static get AmbientTextureEnabled() {\n        return MaterialFlags.AmbientTextureEnabled;\n    }\n    static set AmbientTextureEnabled(value) {\n        MaterialFlags.AmbientTextureEnabled = value;\n    }\n    /**\n     * Are opacity textures enabled in the application.\n     */\n    static get OpacityTextureEnabled() {\n        return MaterialFlags.OpacityTextureEnabled;\n    }\n    static set OpacityTextureEnabled(value) {\n        MaterialFlags.OpacityTextureEnabled = value;\n    }\n    /**\n     * Are reflection textures enabled in the application.\n     */\n    static get ReflectionTextureEnabled() {\n        return MaterialFlags.ReflectionTextureEnabled;\n    }\n    static set ReflectionTextureEnabled(value) {\n        MaterialFlags.ReflectionTextureEnabled = value;\n    }\n    /**\n     * Are emissive textures enabled in the application.\n     */\n    static get EmissiveTextureEnabled() {\n        return MaterialFlags.EmissiveTextureEnabled;\n    }\n    static set EmissiveTextureEnabled(value) {\n        MaterialFlags.EmissiveTextureEnabled = value;\n    }\n    /**\n     * Are specular textures enabled in the application.\n     */\n    static get SpecularTextureEnabled() {\n        return MaterialFlags.SpecularTextureEnabled;\n    }\n    static set SpecularTextureEnabled(value) {\n        MaterialFlags.SpecularTextureEnabled = value;\n    }\n    /**\n     * Are bump textures enabled in the application.\n     */\n    static get BumpTextureEnabled() {\n        return MaterialFlags.BumpTextureEnabled;\n    }\n    static set BumpTextureEnabled(value) {\n        MaterialFlags.BumpTextureEnabled = value;\n    }\n    /**\n     * Are lightmap textures enabled in the application.\n     */\n    static get LightmapTextureEnabled() {\n        return MaterialFlags.LightmapTextureEnabled;\n    }\n    static set LightmapTextureEnabled(value) {\n        MaterialFlags.LightmapTextureEnabled = value;\n    }\n    /**\n     * Are refraction textures enabled in the application.\n     */\n    static get RefractionTextureEnabled() {\n        return MaterialFlags.RefractionTextureEnabled;\n    }\n    static set RefractionTextureEnabled(value) {\n        MaterialFlags.RefractionTextureEnabled = value;\n    }\n    /**\n     * Are color grading textures enabled in the application.\n     */\n    static get ColorGradingTextureEnabled() {\n        return MaterialFlags.ColorGradingTextureEnabled;\n    }\n    static set ColorGradingTextureEnabled(value) {\n        MaterialFlags.ColorGradingTextureEnabled = value;\n    }\n    /**\n     * Are fresnels enabled in the application.\n     */\n    static get FresnelEnabled() {\n        return MaterialFlags.FresnelEnabled;\n    }\n    static set FresnelEnabled(value) {\n        MaterialFlags.FresnelEnabled = value;\n    }\n}\n__decorate([\n    serializeAsTexture(\"diffuseTexture\")\n], StandardMaterial.prototype, \"_diffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"diffuseTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"ambientTexture\")\n], StandardMaterial.prototype, \"_ambientTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"ambientTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"opacityTexture\")\n], StandardMaterial.prototype, \"_opacityTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"reflectionTexture\")\n], StandardMaterial.prototype, \"_reflectionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"reflectionTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"emissiveTexture\")\n], StandardMaterial.prototype, \"_emissiveTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"emissiveTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"specularTexture\")\n], StandardMaterial.prototype, \"_specularTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"specularTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"bumpTexture\")\n], StandardMaterial.prototype, \"_bumpTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"bumpTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"lightmapTexture\")\n], StandardMaterial.prototype, \"_lightmapTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"lightmapTexture\", void 0);\n__decorate([\n    serializeAsTexture(\"refractionTexture\")\n], StandardMaterial.prototype, \"_refractionTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"refractionTexture\", void 0);\n__decorate([\n    serializeAsColor3(\"ambient\")\n], StandardMaterial.prototype, \"ambientColor\", void 0);\n__decorate([\n    serializeAsColor3(\"diffuse\")\n], StandardMaterial.prototype, \"diffuseColor\", void 0);\n__decorate([\n    serializeAsColor3(\"specular\")\n], StandardMaterial.prototype, \"specularColor\", void 0);\n__decorate([\n    serializeAsColor3(\"emissive\")\n], StandardMaterial.prototype, \"emissiveColor\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"specularPower\", void 0);\n__decorate([\n    serialize(\"useAlphaFromDiffuseTexture\")\n], StandardMaterial.prototype, \"_useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n], StandardMaterial.prototype, \"useAlphaFromDiffuseTexture\", void 0);\n__decorate([\n    serialize(\"useEmissiveAsIllumination\")\n], StandardMaterial.prototype, \"_useEmissiveAsIllumination\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useEmissiveAsIllumination\", void 0);\n__decorate([\n    serialize(\"linkEmissiveWithDiffuse\")\n], StandardMaterial.prototype, \"_linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"linkEmissiveWithDiffuse\", void 0);\n__decorate([\n    serialize(\"useSpecularOverAlpha\")\n], StandardMaterial.prototype, \"_useSpecularOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useSpecularOverAlpha\", void 0);\n__decorate([\n    serialize(\"useReflectionOverAlpha\")\n], StandardMaterial.prototype, \"_useReflectionOverAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useReflectionOverAlpha\", void 0);\n__decorate([\n    serialize(\"disableLighting\")\n], StandardMaterial.prototype, \"_disableLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"disableLighting\", void 0);\n__decorate([\n    serialize(\"useObjectSpaceNormalMap\")\n], StandardMaterial.prototype, \"_useObjectSpaceNormalMap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n__decorate([\n    serialize(\"useParallax\")\n], StandardMaterial.prototype, \"_useParallax\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallax\", void 0);\n__decorate([\n    serialize(\"useParallaxOcclusion\")\n], StandardMaterial.prototype, \"_useParallaxOcclusion\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useParallaxOcclusion\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"parallaxScaleBias\", void 0);\n__decorate([\n    serialize(\"roughness\")\n], StandardMaterial.prototype, \"_roughness\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"roughness\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"indexOfRefraction\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"invertRefractionY\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"alphaCutOff\", void 0);\n__decorate([\n    serialize(\"useLightmapAsShadowmap\")\n], StandardMaterial.prototype, \"_useLightmapAsShadowmap\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"diffuseFresnelParameters\")\n], StandardMaterial.prototype, \"_diffuseFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"diffuseFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"opacityFresnelParameters\")\n], StandardMaterial.prototype, \"_opacityFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\n], StandardMaterial.prototype, \"opacityFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"reflectionFresnelParameters\")\n], StandardMaterial.prototype, \"_reflectionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"reflectionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"refractionFresnelParameters\")\n], StandardMaterial.prototype, \"_refractionFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"refractionFresnelParameters\", void 0);\n__decorate([\n    serializeAsFresnelParameters(\"emissiveFresnelParameters\")\n], StandardMaterial.prototype, \"_emissiveFresnelParameters\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"emissiveFresnelParameters\", void 0);\n__decorate([\n    serialize(\"useReflectionFresnelFromSpecular\")\n], StandardMaterial.prototype, \"_useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n], StandardMaterial.prototype, \"useReflectionFresnelFromSpecular\", void 0);\n__decorate([\n    serialize(\"useGlossinessFromSpecularMapAlpha\")\n], StandardMaterial.prototype, \"_useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"useGlossinessFromSpecularMapAlpha\", void 0);\n__decorate([\n    serialize(\"maxSimultaneousLights\")\n], StandardMaterial.prototype, \"_maxSimultaneousLights\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n], StandardMaterial.prototype, \"maxSimultaneousLights\", void 0);\n__decorate([\n    serialize(\"invertNormalMapX\")\n], StandardMaterial.prototype, \"_invertNormalMapX\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapX\", void 0);\n__decorate([\n    serialize(\"invertNormalMapY\")\n], StandardMaterial.prototype, \"_invertNormalMapY\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"invertNormalMapY\", void 0);\n__decorate([\n    serialize(\"twoSidedLighting\")\n], StandardMaterial.prototype, \"_twoSidedLighting\", void 0);\n__decorate([\n    expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n], StandardMaterial.prototype, \"twoSidedLighting\", void 0);\n__decorate([\n    serialize()\n], StandardMaterial.prototype, \"useLogarithmicDepth\", null);\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\nScene.DefaultMaterialFactory = (scene) => {\n    return new StandardMaterial(\"default material\", scene);\n};\n//# sourceMappingURL=standardMaterial.js.map","// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nconst name = \"imageProcessingCompatibility\";\nconst shader = `#ifdef IMAGEPROCESSINGPOSTPROCESS\ngl_FragColor.rgb=pow(gl_FragColor.rgb,vec3(2.2));\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const imageProcessingCompatibility = { name, shader };\n//# sourceMappingURL=imageProcessingCompatibility.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/helperFunctions.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragmentDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragmentDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneFragment.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragment.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogFragment.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/imageProcessingCompatibility.js\";\nconst name = \"shadowOnlyPixelShader\";\nconst shader = `precision highp float;\runiform vec4 vEyePosition;\runiform float alpha;\runiform vec3 shadowColor;\rvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#include<helperFunctions>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition.xyz-vPositionW);\r#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\r#else\nvec3 normalW=vec3(1.0,1.0,1.0);\r#endif\nvec3 diffuseBase=vec3(0.,0.,0.);\rlightingInfo info;\rfloat shadow=1.;\rfloat glossiness=0.;\r#include<lightFragment>[0..1]\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\r#include<fogFragment>\ngl_FragColor=color;\r#include<imageProcessingCompatibility>\n#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowOnlyPixelShader = { name, shader };\n//# sourceMappingURL=shadowOnly.fragment.js.map","// Do not edit.\nimport { ShaderStore } from \"@babylonjs/core/Engines/shaderStore.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bakedVertexAnimationDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertexDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertexDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/instancesVertex.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bonesVertex.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/bakedVertexAnimation.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/clipPlaneVertex.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/fogVertex.js\";\nimport \"@babylonjs/core/Shaders/ShadersInclude/shadowsVertex.js\";\nconst name = \"shadowOnlyVertexShader\";\nconst shader = `precision highp float;\rattribute vec3 position;\r#ifdef NORMAL\nattribute vec3 normal;\r#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<instancesDeclaration>\nuniform mat4 view;\runiform mat4 viewProjection;\r#ifdef POINTSIZE\nuniform float pointSize;\r#endif\nvarying vec3 vPositionW;\r#ifdef NORMAL\nvarying vec3 vNormalW;\r#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\r#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(position,1.0);\rgl_Position=viewProjection*worldPos;\rvPositionW=vec3(worldPos);\r#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\r#endif\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#if defined(POINTSIZE) && !defined(WEBGPU)\ngl_PointSize=pointSize;\r#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowOnlyVertexShader = { name, shader };\n//# sourceMappingURL=shadowOnly.vertex.js.map","import { SerializationHelper } from \"@babylonjs/core/Misc/decorators.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { MaterialDefines } from \"@babylonjs/core/Materials/materialDefines.js\";\nimport { MaterialHelper } from \"@babylonjs/core/Materials/materialHelper.js\";\nimport { PushMaterial } from \"@babylonjs/core/Materials/pushMaterial.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { Scene } from \"@babylonjs/core/scene.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nimport \"./shadowOnly.fragment.js\";\nimport \"./shadowOnly.vertex.js\";\nimport { EffectFallbacks } from \"@babylonjs/core/Materials/effectFallbacks.js\";\nimport { addClipPlaneUniforms, bindClipPlane } from \"@babylonjs/core/Materials/clipPlaneMaterialHelper.js\";\nclass ShadowOnlyMaterialDefines extends MaterialDefines {\n    constructor() {\n        super();\n        this.CLIPPLANE = false;\n        this.CLIPPLANE2 = false;\n        this.CLIPPLANE3 = false;\n        this.CLIPPLANE4 = false;\n        this.CLIPPLANE5 = false;\n        this.CLIPPLANE6 = false;\n        this.POINTSIZE = false;\n        this.FOG = false;\n        this.NORMAL = false;\n        this.NUM_BONE_INFLUENCERS = 0;\n        this.BonesPerMesh = 0;\n        this.INSTANCES = false;\n        this.IMAGEPROCESSINGPOSTPROCESS = false;\n        this.SKIPFINALCOLORCLAMP = false;\n        this.rebuild();\n    }\n}\nexport class ShadowOnlyMaterial extends PushMaterial {\n    constructor(name, scene) {\n        super(name, scene);\n        this._needAlphaBlending = true;\n        this.shadowColor = Color3.Black();\n    }\n    needAlphaBlending() {\n        return this._needAlphaBlending;\n    }\n    needAlphaTesting() {\n        return false;\n    }\n    getAlphaTestTexture() {\n        return null;\n    }\n    get activeLight() {\n        return this._activeLight;\n    }\n    set activeLight(light) {\n        this._activeLight = light;\n    }\n    _getFirstShadowLightForMesh(mesh) {\n        for (const light of mesh.lightSources) {\n            if (light.shadowEnabled) {\n                return light;\n            }\n        }\n        return null;\n    }\n    // Methods\n    isReadyForSubMesh(mesh, subMesh, useInstances) {\n        var _a;\n        if (this.isFrozen) {\n            if (subMesh.effect && subMesh.effect._wasPreviouslyReady && subMesh.effect._wasPreviouslyUsingInstances === useInstances) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            subMesh.materialDefines = new ShadowOnlyMaterialDefines();\n        }\n        const defines = subMesh.materialDefines;\n        const scene = this.getScene();\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        const engine = scene.getEngine();\n        // Ensure that active light is the first shadow light\n        if (this._activeLight) {\n            for (const light of mesh.lightSources) {\n                if (light.shadowEnabled) {\n                    if (this._activeLight === light) {\n                        break; // We are good\n                    }\n                    const lightPosition = mesh.lightSources.indexOf(this._activeLight);\n                    if (lightPosition !== -1) {\n                        mesh.lightSources.splice(lightPosition, 1);\n                        mesh.lightSources.splice(0, 0, this._activeLight);\n                    }\n                    break;\n                }\n            }\n        }\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false);\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, 1);\n        const shadowGenerator = (_a = this._getFirstShadowLightForMesh(mesh)) === null || _a === void 0 ? void 0 : _a.getShadowGenerator();\n        this._needAlphaBlending = true;\n        if (shadowGenerator && shadowGenerator.getClassName && shadowGenerator.getClassName() === \"CascadedShadowGenerator\") {\n            const csg = shadowGenerator;\n            this._needAlphaBlending = !csg.autoCalcDepthBounds;\n        }\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n            // Fallbacks\n            const fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, 1);\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n            defines.IMAGEPROCESSINGPOSTPROCESS = scene.imageProcessingConfiguration.applyByPostProcess;\n            //Attributes\n            const attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            const shaderName = \"shadowOnly\";\n            const join = defines.toString();\n            const uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"alpha\", \"shadowColor\", \"mBones\"];\n            const samplers = new Array();\n            const uniformBuffers = new Array();\n            addClipPlaneUniforms(uniforms);\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: 1,\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: 1 },\n            }, engine), defines, this._materialContext);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        subMesh.effect._wasPreviouslyUsingInstances = !!useInstances;\n        return true;\n    }\n    bindForSubMesh(world, mesh, subMesh) {\n        const scene = this.getScene();\n        const defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        const effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n        if (this._mustRebind(scene, effect)) {\n            // Clip plane\n            bindClipPlane(effect, this, scene);\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n            this._activeEffect.setFloat(\"alpha\", this.alpha);\n            this._activeEffect.setColor3(\"shadowColor\", this.shadowColor);\n            scene.bindEyePosition(effect);\n        }\n        // Lights\n        if (scene.lightsEnabled) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, 1);\n            const light = this._getFirstShadowLightForMesh(mesh);\n            if (light) {\n                // Make sure the uniforms for this light will be rebound for other materials using this light when rendering the current frame.\n                // Indeed, there is an optimization in Light that binds the light uniforms only once per frame for a given light (if using ubo).\n                // Doing this way assumes that all uses of this light are the same, meaning all parameters passed to Light._bindLlight\n                // are the same, notably useSpecular. However, isReadyForSubMesh (see above) is passing false for this parameter, which may not be\n                // the value the other materials may pass.\n                light._renderId = -1;\n            }\n        }\n        // View\n        if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) || defines[\"SHADOWCSM0\"]) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n        this._afterBind(mesh, this._activeEffect);\n    }\n    clone(name) {\n        return SerializationHelper.Clone(() => new ShadowOnlyMaterial(name, this.getScene()), this);\n    }\n    serialize() {\n        const serializationObject = super.serialize();\n        serializationObject.customType = \"BABYLON.ShadowOnlyMaterial\";\n        return serializationObject;\n    }\n    getClassName() {\n        return \"ShadowOnlyMaterial\";\n    }\n    // Statics\n    static Parse(source, scene, rootUrl) {\n        return SerializationHelper.Parse(() => new ShadowOnlyMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\nRegisterClass(\"BABYLON.ShadowOnlyMaterial\", ShadowOnlyMaterial);\n//# sourceMappingURL=shadowOnlyMaterial.js.map","import { Color3 } from '@babylonjs/core/Maths/math.color'\nimport { CreateBox } from '@babylonjs/core/Meshes/Builders/boxBuilder'\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial'\nimport { TransformNode } from '@babylonjs/core/Meshes/transformNode'\nimport { Vector3 } from '@babylonjs/core/Maths/math.vector'\nimport { ShadowOnlyMaterial } from '@babylonjs/materials/shadowOnly/shadowOnlyMaterial'\n\nconst defaultOptions = {\n  aspect: 300 / 150,\n  enableDebugging: false,\n  enableShadows: true,\n}\n\nclass Container{\n\tsize = 9.5\n\tconstructor(options){\n\t\tthis.config = {...defaultOptions, ...options}\n\t\tthis.create()\n\t}\n\tcreate(options){\n\t\t// remove any previously existing boxes\n\t\tthis.destroy()\n\t\t// extend config with options on create\n\t\tObject.assign(this.config,options)\n\t\tconst { aspect, enableDebugging, enableShadows } = this.config\n\t\tconst wallHeight = 30\n\n\t\tthis.box = new TransformNode(\"diceBox\");\n\t\tlet boxMaterial = new ShadowOnlyMaterial('shadowOnly',this.config.scene)\n\t\tboxMaterial.alpha = enableShadows? 1 : 0\n\n\n\t\tif(enableDebugging) {\n\t\t\tboxMaterial = new StandardMaterial(\"diceBox_material\")\n\t\t\tboxMaterial.alpha = .7\n\t\t\tboxMaterial.diffuseColor = new Color3(1, 1, 0);\n\t\t}\n\n\t\t// Bottom of the Box\n\t\tconst ground = CreateBox(\"ground\",{\n\t\t\twidth: this.size * 2, \n\t\t\theight: 1,\n\t\t\tdepth: this.size * 2\n\t\t}, this.config.scene)\n\t\tground.scaling = new Vector3(aspect, 1, 1)\n\t\tground.material = boxMaterial\n\t\tground.receiveShadows = true\n\t\tground.setParent(this.box)\n\n\t\tif(enableDebugging) {\n\t\t\t// North Wall\n\t\t\tconst wallTop = CreateBox(\"wallTop\",{\n\t\t\t\twidth: this.size,\n\t\t\t\theight: wallHeight,\n\t\t\t\tdepth: 1\n\t\t\t}, this.config.scene)\n\t\t\twallTop.position.y = wallHeight / 2\n\t\t\twallTop.position.z = this.size / -2\n\t\t\twallTop.scaling = new Vector3(aspect, 1, 1)\n\t\t\twallTop.material = boxMaterial\n\t\t\t// wallTop.receiveShadows = true\n\t\t\twallTop.setParent(this.box)\n\n\t\t\t// Right Wall\n\t\t\tconst wallRight = CreateBox(\"wallRight\",{\n\t\t\t\twidth: 1, \n\t\t\t\theight: wallHeight,\n\t\t\t\tdepth: this.size\n\t\t\t}, this.config.scene )\n\t\t\twallRight.position.x = this.size * aspect / 2\n\t\t\twallRight.position.y = wallHeight / 2\n\t\t\twallRight.material = boxMaterial\n\t\t\t// wallRight.receiveShadows = true\n\t\t\twallRight.setParent(this.box)\n\n\t\t\t// South Wall\n\t\t\tconst wallBottom = CreateBox(\"wallBottom\",{\n\t\t\t\twidth: this.size, \n\t\t\t\theight: wallHeight,\n\t\t\t\tdepth: 1\n\t\t\t}, this.config.scene)\n\t\t\twallBottom.position.y = wallHeight / 2\n\t\t\twallBottom.position.z = this.size / 2\n\t\t\twallBottom.scaling = new Vector3(aspect, 1, 1)\n\t\t\twallBottom.material = boxMaterial\n\t\t\t// wallBottom.receiveShadows = true\n\t\t\twallBottom.setParent(this.box)\n\n\t\t\t// Left Wall\n\t\t\tconst wallLeft = CreateBox(\"wallLeft\",{\n\t\t\t\twidth: 1, \n\t\t\t\theight: wallHeight,\n\t\t\t\tdepth: this.size\n\t\t\t}, this.config.scene)\n\t\t\twallLeft.position.x = this.size * aspect / -2\n\t\t\twallLeft.position.y = wallHeight / 2\n\t\t\twallLeft.material = boxMaterial\n\t\t\t// wallLeft.receiveShadows = true\n\t\t\twallLeft.setParent(this.box)\n\t\t}\n\n\t}\n\tdestroy(){\n\t\tif(this.box) {\n\t\t\tthis.box.dispose()\n\t\t}\n\t}\n}\n\nexport default Container","import { Effect } from \"@babylonjs/core/Materials/effect.js\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial.js\";\nimport { RegisterClass } from \"@babylonjs/core/Misc/typeStore.js\";\nexport class CustomShaderStructure {\n    constructor() { }\n}\nexport class ShaderSpecialParts {\n    constructor() { }\n}\nexport class CustomMaterial extends StandardMaterial {\n    AttachAfterBind(mesh, effect) {\n        if (this._newUniformInstances) {\n            for (const el in this._newUniformInstances) {\n                const ea = el.toString().split(\"-\");\n                if (ea[0] == \"vec2\") {\n                    effect.setVector2(ea[1], this._newUniformInstances[el]);\n                }\n                else if (ea[0] == \"vec3\") {\n                    effect.setVector3(ea[1], this._newUniformInstances[el]);\n                }\n                else if (ea[0] == \"vec4\") {\n                    effect.setVector4(ea[1], this._newUniformInstances[el]);\n                }\n                else if (ea[0] == \"mat4\") {\n                    effect.setMatrix(ea[1], this._newUniformInstances[el]);\n                }\n                else if (ea[0] == \"float\") {\n                    effect.setFloat(ea[1], this._newUniformInstances[el]);\n                }\n            }\n        }\n        if (this._newSamplerInstances) {\n            for (const el in this._newSamplerInstances) {\n                const ea = el.toString().split(\"-\");\n                if (ea[0] == \"sampler2D\" && this._newSamplerInstances[el].isReady && this._newSamplerInstances[el].isReady()) {\n                    effect.setTexture(ea[1], this._newSamplerInstances[el]);\n                }\n            }\n        }\n    }\n    ReviewUniform(name, arr) {\n        if (name == \"uniform\" && this._newUniforms) {\n            for (let ind = 0; ind < this._newUniforms.length; ind++) {\n                if (this._customUniform[ind].indexOf(\"sampler\") == -1) {\n                    arr.push(this._newUniforms[ind].replace(/\\[\\d*\\]/g, \"\"));\n                }\n            }\n        }\n        if (name == \"sampler\" && this._newUniforms) {\n            for (let ind = 0; ind < this._newUniforms.length; ind++) {\n                if (this._customUniform[ind].indexOf(\"sampler\") != -1) {\n                    arr.push(this._newUniforms[ind].replace(/\\[\\d*\\]/g, \"\"));\n                }\n            }\n        }\n        return arr;\n    }\n    Builder(shaderName, uniforms, uniformBuffers, samplers, defines, attributes) {\n        if (attributes && this._customAttributes && this._customAttributes.length > 0) {\n            attributes.push(...this._customAttributes);\n        }\n        this.ReviewUniform(\"uniform\", uniforms);\n        this.ReviewUniform(\"sampler\", samplers);\n        if (this._isCreatedShader) {\n            return this._createdShaderName;\n        }\n        this._isCreatedShader = false;\n        CustomMaterial.ShaderIndexer++;\n        const name = \"custom_\" + CustomMaterial.ShaderIndexer;\n        const fn_afterBind = this._afterBind.bind(this);\n        this._afterBind = (m, e) => {\n            if (!e) {\n                return;\n            }\n            this.AttachAfterBind(m, e);\n            try {\n                fn_afterBind(m, e);\n            }\n            catch (e) { }\n        };\n        Effect.ShadersStore[name + \"VertexShader\"] = this.VertexShader.replace(\"#define CUSTOM_VERTEX_BEGIN\", this.CustomParts.Vertex_Begin ? this.CustomParts.Vertex_Begin : \"\")\n            .replace(\"#define CUSTOM_VERTEX_DEFINITIONS\", (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Vertex_Definitions ? this.CustomParts.Vertex_Definitions : \"\"))\n            .replace(\"#define CUSTOM_VERTEX_MAIN_BEGIN\", this.CustomParts.Vertex_MainBegin ? this.CustomParts.Vertex_MainBegin : \"\")\n            .replace(\"#define CUSTOM_VERTEX_UPDATE_POSITION\", this.CustomParts.Vertex_Before_PositionUpdated ? this.CustomParts.Vertex_Before_PositionUpdated : \"\")\n            .replace(\"#define CUSTOM_VERTEX_UPDATE_NORMAL\", this.CustomParts.Vertex_Before_NormalUpdated ? this.CustomParts.Vertex_Before_NormalUpdated : \"\")\n            .replace(\"#define CUSTOM_VERTEX_MAIN_END\", this.CustomParts.Vertex_MainEnd ? this.CustomParts.Vertex_MainEnd : \"\");\n        if (this.CustomParts.Vertex_After_WorldPosComputed) {\n            Effect.ShadersStore[name + \"VertexShader\"] = Effect.ShadersStore[name + \"VertexShader\"].replace(\"#define CUSTOM_VERTEX_UPDATE_WORLDPOS\", this.CustomParts.Vertex_After_WorldPosComputed);\n        }\n        Effect.ShadersStore[name + \"PixelShader\"] = this.FragmentShader.replace(\"#define CUSTOM_FRAGMENT_BEGIN\", this.CustomParts.Fragment_Begin ? this.CustomParts.Fragment_Begin : \"\")\n            .replace(\"#define CUSTOM_FRAGMENT_MAIN_BEGIN\", this.CustomParts.Fragment_MainBegin ? this.CustomParts.Fragment_MainBegin : \"\")\n            .replace(\"#define CUSTOM_FRAGMENT_DEFINITIONS\", (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Fragment_Definitions ? this.CustomParts.Fragment_Definitions : \"\"))\n            .replace(\"#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE\", this.CustomParts.Fragment_Custom_Diffuse ? this.CustomParts.Fragment_Custom_Diffuse : \"\")\n            .replace(\"#define CUSTOM_FRAGMENT_UPDATE_ALPHA\", this.CustomParts.Fragment_Custom_Alpha ? this.CustomParts.Fragment_Custom_Alpha : \"\")\n            .replace(\"#define CUSTOM_FRAGMENT_BEFORE_LIGHTS\", this.CustomParts.Fragment_Before_Lights ? this.CustomParts.Fragment_Before_Lights : \"\")\n            .replace(\"#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR\", this.CustomParts.Fragment_Before_FragColor ? this.CustomParts.Fragment_Before_FragColor : \"\")\n            .replace(\"#define CUSTOM_FRAGMENT_MAIN_END\", this.CustomParts.Fragment_MainEnd ? this.CustomParts.Fragment_MainEnd : \"\");\n        if (this.CustomParts.Fragment_Before_Fog) {\n            Effect.ShadersStore[name + \"PixelShader\"] = Effect.ShadersStore[name + \"PixelShader\"].replace(\"#define CUSTOM_FRAGMENT_BEFORE_FOG\", this.CustomParts.Fragment_Before_Fog);\n        }\n        this._isCreatedShader = true;\n        this._createdShaderName = name;\n        return name;\n    }\n    constructor(name, scene) {\n        super(name, scene);\n        this.CustomParts = new ShaderSpecialParts();\n        this.customShaderNameResolve = this.Builder;\n        this.FragmentShader = Effect.ShadersStore[\"defaultPixelShader\"];\n        this.VertexShader = Effect.ShadersStore[\"defaultVertexShader\"];\n    }\n    AddUniform(name, kind, param) {\n        if (!this._customUniform) {\n            this._customUniform = new Array();\n            this._newUniforms = new Array();\n            this._newSamplerInstances = {};\n            this._newUniformInstances = {};\n        }\n        if (param) {\n            if (kind.indexOf(\"sampler\") != -1) {\n                this._newSamplerInstances[kind + \"-\" + name] = param;\n            }\n            else {\n                this._newUniformInstances[kind + \"-\" + name] = param;\n            }\n        }\n        this._customUniform.push(\"uniform \" + kind + \" \" + name + \";\");\n        this._newUniforms.push(name);\n        return this;\n    }\n    AddAttribute(name) {\n        if (!this._customAttributes) {\n            this._customAttributes = [];\n        }\n        this._customAttributes.push(name);\n        return this;\n    }\n    Fragment_Begin(shaderPart) {\n        this.CustomParts.Fragment_Begin = shaderPart;\n        return this;\n    }\n    Fragment_Definitions(shaderPart) {\n        this.CustomParts.Fragment_Definitions = shaderPart;\n        return this;\n    }\n    Fragment_MainBegin(shaderPart) {\n        this.CustomParts.Fragment_MainBegin = shaderPart;\n        return this;\n    }\n    Fragment_MainEnd(shaderPart) {\n        this.CustomParts.Fragment_MainEnd = shaderPart;\n        return this;\n    }\n    Fragment_Custom_Diffuse(shaderPart) {\n        this.CustomParts.Fragment_Custom_Diffuse = shaderPart.replace(\"result\", \"diffuseColor\");\n        return this;\n    }\n    Fragment_Custom_Alpha(shaderPart) {\n        this.CustomParts.Fragment_Custom_Alpha = shaderPart.replace(\"result\", \"alpha\");\n        return this;\n    }\n    Fragment_Before_Lights(shaderPart) {\n        this.CustomParts.Fragment_Before_Lights = shaderPart;\n        return this;\n    }\n    Fragment_Before_Fog(shaderPart) {\n        this.CustomParts.Fragment_Before_Fog = shaderPart;\n        return this;\n    }\n    Fragment_Before_FragColor(shaderPart) {\n        this.CustomParts.Fragment_Before_FragColor = shaderPart.replace(\"result\", \"color\");\n        return this;\n    }\n    Vertex_Begin(shaderPart) {\n        this.CustomParts.Vertex_Begin = shaderPart;\n        return this;\n    }\n    Vertex_Definitions(shaderPart) {\n        this.CustomParts.Vertex_Definitions = shaderPart;\n        return this;\n    }\n    Vertex_MainBegin(shaderPart) {\n        this.CustomParts.Vertex_MainBegin = shaderPart;\n        return this;\n    }\n    Vertex_Before_PositionUpdated(shaderPart) {\n        this.CustomParts.Vertex_Before_PositionUpdated = shaderPart.replace(\"result\", \"positionUpdated\");\n        return this;\n    }\n    Vertex_Before_NormalUpdated(shaderPart) {\n        this.CustomParts.Vertex_Before_NormalUpdated = shaderPart.replace(\"result\", \"normalUpdated\");\n        return this;\n    }\n    Vertex_After_WorldPosComputed(shaderPart) {\n        this.CustomParts.Vertex_After_WorldPosComputed = shaderPart;\n        return this;\n    }\n    Vertex_MainEnd(shaderPart) {\n        this.CustomParts.Vertex_MainEnd = shaderPart;\n        return this;\n    }\n}\nCustomMaterial.ShaderIndexer = 1;\nRegisterClass(\"BABYLON.CustomMaterial\", CustomMaterial);\n//# sourceMappingURL=customMaterial.js.map","import { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial'\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture'\nimport { CustomMaterial } from '@babylonjs/materials/custom/customMaterial';\nimport { SerializationHelper } from '@babylonjs/core/Misc/decorators'\nimport { deepCopy } from '../helpers'\n\n// this is a monkey patch for cloning CustomMaterial in BabylonJS\nCustomMaterial.prototype.clone = function (name)  {\n  const th = this\n  const result = SerializationHelper.Clone(() => new CustomMaterial(name, this.getScene()), this)\n\n  result.name = name\n  result.id = name  \n  result.CustomParts.Fragment_Begin = th.CustomParts.Fragment_Begin\n  result.CustomParts.Fragment_Definitions = th.CustomParts.Fragment_Definitions\n  result.CustomParts.Fragment_MainBegin = th.CustomParts.Fragment_MainBegin\n  result.CustomParts.Fragment_Custom_Diffuse = th.CustomParts.Fragment_Custom_Diffuse\n  result.CustomParts.Fragment_Before_Lights = th.CustomParts.Fragment_Before_Lights\n  result.CustomParts.Fragment_Before_Fog = th.CustomParts.Fragment_Before_Fog\n  result.CustomParts.Fragment_Custom_Alpha = th.CustomParts.Fragment_Custom_Alpha\n  result.CustomParts.Fragment_Before_FragColor = th.CustomParts.Fragment_Before_FragColor\n  result.CustomParts.Vertex_Begin = th.CustomParts.Vertex_Begin\n  result.CustomParts.Vertex_Definitions = th.CustomParts.Vertex_Definitions\n  result.CustomParts.Vertex_MainBegin = th.CustomParts.Vertex_MainBegin\n  result.CustomParts.Vertex_Before_PositionUpdated = th.CustomParts.Vertex_Before_PositionUpdated\n  result.CustomParts.Vertex_Before_NormalUpdated = th.CustomParts.Vertex_Before_NormalUpdated\n  result.CustomParts.Vertex_After_WorldPosComputed = th.CustomParts.Vertex_After_WorldPosComputed\n  result.CustomParts.Vertex_MainEnd = th.CustomParts.Vertex_MainEnd \n\n  return result\n}\n\nclass ThemeLoader {\n  loadedThemes = {}\n  themeData = {}\n  constructor(options) {\n    this.scene = options.scene\n  }\n\n  async loadStandardMaterial(options) {\n    const {theme, material: matParams} = options\n    //TODO: apply more matParams\n    const diceMaterial = new StandardMaterial(theme, this.scene);\n\n    // TODO: make these methods reusable getDiffuseTexture(matParams, material)\n    if(matParams.diffuseTexture){\n      diceMaterial.diffuseTexture = await this.getTexture('diffuse', options)\n    }\n    if(matParams.bumpTexture){\n      diceMaterial.bumpTexture = await this.getTexture('bump', options)\n    }\n    if(matParams.specularTexture){\n      diceMaterial.specularTexture = await this.getTexture('specular', options)\n    }\n\n    diceMaterial.allowShaderHotSwapping = false\n\n    // other fun params for the future\n    // diceMaterial.useAlphaFromDiffuseTexture\n    // diceMaterial.useEmissiveAsIllumination\n    // diceMaterial.opacityTexture\n    // diceMaterial.emissiveTexture\n    // diceMaterial.ambientTexture\n    // diceMaterial.reflectionTexture\n    // diceMaterial.refractionTexture\n    // diceMaterial.lightmapTexture\n\n  }\n\n  // this will create two materials - one with light text and one with dark text, the underlying color can be changed by color instance buffers\n  async loadColorMaterial(options) {\n    const {theme, material: matParams} = options\n    // create the custom color material with white/light numbers\n    const diceMatLight = new CustomMaterial(theme+'_light',this.scene)\n    // Other fun params for the future\n    // diceMatLight.useEmissiveAsIllumination = true\n    // diceMatLight.useAlphaFromDiffuseTexture = true\n    // diceMatLight.ambientColor = Color3.White()\n    // diceMatLight.ambientTexture = diceTexture\n    // diceMatLight.emissiveTexture = diceTexture\n    // diceMatLight.opacityTexture = diceTexture\n    const opts = deepCopy(options)\n    if(matParams.diffuseTexture && matParams.diffuseTexture.light){\n      opts.material.diffuseTexture = options.material.diffuseTexture.light\n      diceMatLight.diffuseTexture = await this.getTexture('diffuse', opts)\n    }\n    if(matParams.bumpTexture){\n      diceMatLight.bumpTexture = await this.getTexture('bump', options)\n    }\n    if(matParams.specularTexture){\n      diceMatLight.specularTexture = await this.getTexture('specular', options)\n    }\n  \n    diceMatLight.allowShaderHotSwapping = false\n  \n    // the magic that allows for the material color to be changed on instances\n    diceMatLight.Vertex_Definitions(`\n      attribute vec3 customColor;\n      varying vec3 vColor;\n    `)\n    .Vertex_MainEnd(`\n      vColor = customColor;\n    `)\n    .Fragment_Definitions(`\n      varying vec3 vColor;\n    `)\n    .Fragment_Custom_Diffuse(`\n      baseColor.rgb = mix(vColor.rgb, baseColor.rgb, baseColor.a);\n    `)\n\n    diceMatLight.AddAttribute('customColor')\n  \n    // create the custom color material with black/dark numbers\n    const diceMatDark = diceMatLight.clone(theme+'_dark')\n    if(matParams.diffuseTexture && matParams.diffuseTexture.dark){\n      opts.material.diffuseTexture = options.material.diffuseTexture.dark\n      diceMatDark.diffuseTexture = await this.getTexture('diffuse', opts)\n    }\n    // this must be set again for some reason - does not clone\n    diceMatDark.AddAttribute('customColor')\n  }\n\n  async getTexture(type, options){\n    const {basePath, material: matParams, theme} = options\n    let texture\n    const level = type + 'Level'\n    const textureKey = type + 'Texture'\n    // const power = type + 'Power'\n    try {        \n      switch (type) {\n        case \"diffuse\":\n          texture = await this.importTextureAsync(`${basePath}/${matParams[textureKey]}`, theme)\n          if(matParams[level]) {\n            texture.level = matParams[level]\n          }\n          break;\n        case \"bump\":\n          texture = await this.importTextureAsync(`${basePath}/${matParams[textureKey]}`, theme)\n          if(matParams[level]) {\n            texture.level = matParams[level]\n          }\n          break;\n        case \"specular\":    \n            texture = await this.importTextureAsync(`${basePath}/${matParams[textureKey]}`, theme)\n            if(matParams.specularPower){\n              texture.specularPower = matParams.specularPower\n            }\n          break;\n      \n        default:\n          throw new Error(`Texture type: ${type} is not supported`)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n    return texture\n  }\n\n  async importTextureAsync(url,theme) {\n    return new Promise((resolve, reject) => {\n      let fileName = url.match(/^(.*\\/)(.*)$/)\n      let texture = new Texture(\n          url, // url: Nullable<string>\n          this.scene, // sceneOrEngine: Nullable<Scene | ThinEngine>\n          undefined, // noMipmapOrOptions?: boolean | ITextureCreationOptions\n          true, // invertY?: boolean\n          undefined, // samplingMode?: number\n          () => resolve(texture), // onLoad?: Nullable<() => void>\n          () => reject(`Unable to load texture '${fileName[2]}' for theme: '${theme}'. Check that your assetPath is configured correctly and that the files exist at path: '${fileName[1]}'`) // onError?: Nullable<(message?: string\n        )\n    }).catch(error => console.error(error))\n  }\n\n  async load(options){\n    const { material } = options\n\n    if(material.type === \"color\") {\n      await this.loadColorMaterial(options)\n    } \n    else if (material.type === \"standard\") {\n      await this.loadStandardMaterial(options)\n    } \n    //TODO: more material options\n    // else if (material.type === \"semiTransparent\") {\n    //   await this.loadSemiTransparentMaterial(options)\n    // }\n    else {\n      console.error(`Material type: ${material.type} not supported`)\n    }\n  }\n}\n\n\nexport default ThemeLoader","import { Vector3 } from '@babylonjs/core/Maths/math.vector'\nimport { createEngine } from './world/engine'\nimport { createScene } from './world/scene'\nimport { createCamera } from './world/camera'\nimport { createLights } from './world/lights'\nimport Container from './Container'\nimport Dice from './Dice'\nimport ThemeLoader from './ThemeLoader'\n\nclass WorldOnscreen {\n\tconfig\n\tinitialized = false\n\t#dieCache = {}\n\t#count = 0\n\t#sleeperCount = 0\n\t#dieRollTimer = []\n\t#canvas\n\t#engine\n\t#scene\n\t#camera\n\t#lights\n\t#container\n\t#themeLoader\n\t#physicsWorkerPort\n\t#meshList = {}\n\tnoop = () => {}\n\tdiceBufferView = new Float32Array(8000)\n\n\tconstructor(options){\n\t\tthis.onInitComplete = options.onInitComplete || this.noop\n\t\tthis.onThemeLoaded = options.onThemeLoaded || this.noop\n\t\tthis.onRollResult = options.onRollResult || this.noop\n\t\tthis.onRollComplete = options.onRollComplete || this.noop\n\t\tthis.onDieRemoved = options.onDieRemoved || this.noop\n\t\tthis.initialized = this.initScene(options)\n\t}\n\t\n\t// initialize the babylon scene\n\tasync initScene(config) {\n\t\tthis.#canvas  = config.canvas\n\t\tthis.#canvas.width = config.width\n\t\tthis.#canvas.height = config.height\n\t\n\t\t// set the config from World\n\t\tthis.config = config.options\n\t\n\t\t// setup babylonJS scene\n\t\tthis.#engine  = createEngine(this.#canvas )\n\t\tthis.#scene = createScene({engine:this.#engine })\n\t\tthis.#camera  = createCamera({engine:this.#engine, scene: this.#scene})\n\t\tthis.#lights  = createLights({\n\t\t\tenableShadows: this.config.enableShadows,\n\t\t\tshadowTransparency: this.config.shadowTransparency,\n\t\t\tintensity: this.config.lightIntensity,\n\t\t\tscene: this.#scene\n\t\t})\n\t\n\t\t// create the box that provides surfaces for shadows to render on\n\t\tthis.#container  = new Container({\n\t\t\tenableShadows: this.config.enableShadows,\n\t\t\taspect: this.#canvas.width / this.#canvas.height,\n\t\t\tlights: this.#lights,\n\t\t\tscene: this.#scene\n\t\t})\n\t\t\n\t\tthis.#themeLoader = new ThemeLoader({scene: this.#scene})\n\n\t\t// init complete - let the world know\n\t\tthis.onInitComplete()\n\t}\n\n\tconnect(port){\n\t\tthis.#physicsWorkerPort = port\n\n\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\taction: \"initBuffer\",\n\t\t\tdiceBuffer: this.diceBufferView.buffer\n\t\t}, [this.diceBufferView.buffer])\n\n\t\tthis.#physicsWorkerPort.onmessage = (e) => {\n\t\t\tswitch (e.data.action) {\n\t\t\t\tcase \"updates\": // dice status/position updates from physics worker\n\t\t\t\t\tthis.updatesFromPhysics(e.data.diceBuffer)\n\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(\"action from physicsWorker not found in offscreen worker\")\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateConfig(options){\n\t\tconst prevConfig = this.config\n\t\tthis.config = options\n\t\t// check if shadows setting has changed\n\t\tif(prevConfig.enableShadows !== this.config.enableShadows) {\n\t\t\t// regenerate the lights\n\t\t\tObject.values(this.#lights ).forEach(light => light.dispose())\n\t\t\tthis.#lights = createLights(\n\t\t\t\t{\n\t\t\t\t\tenableShadows: this.config.enableShadows,\n\t\t\t\t\tshadowTransparency: this.config.shadowTransparency,\n\t\t\t\t\tintensity: this.config.lightIntensity,\n\t\t\t\t\tscene: this.#scene\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t\tif(prevConfig.scale !== this.config.scale) {\n\t\t\tObject.values(this.#dieCache).forEach(({mesh}) => {\n\t\t\t\tif(mesh){\n\t\t\t\t\tconst {x = 1,y = 1,z = 1} = mesh?.metadata?.baseScale\n\t\t\t\t\tmesh.scaling = new Vector3(\n\t\t\t\t\t\tthis.config.scale * x,\n\t\t\t\t\t\tthis.config.scale * y,\n\t\t\t\t\t\tthis.config.scale * z\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tif(prevConfig.shadowTransparency !== this.config.shadowTransparency) {\n\t\t\tthis.#lights.directional.shadowGenerator.darkness = this.config.shadowTransparency\n\t\t}\n\t\tif(prevConfig.lightIntensity !== this.config.lightIntensity) {\n\t\t\tthis.#lights.directional.intensity = .65 * this.config.lightIntensity\n\t\t\tthis.#lights.hemispheric.intensity = .4 * this.config.lightIntensity\n\t\t}\n\t}\n\n\t// all this does is start the render engine.\n\trender(newStartPoint) {\n\t\t// document.body.addEventListener('click',()=>engine.stopRenderLoop())\n\t\tthis.#engine.runRenderLoop(this.renderLoop.bind(this))\n\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\taction: \"resumeSimulation\",\n\t\t\tnewStartPoint\n\t\t})\n\t}\n\n\trenderLoop() {\n\t\t// if no dice are awake then stop the render loop and save some CPU power\n\t\tif(this.#sleeperCount && this.#sleeperCount === Object.keys(this.#dieCache).length) {\n\t\t\t// console.log(`no dice moving`)\n\t\t\tthis.#engine.stopRenderLoop()\n\n\t\t\t// stop the physics engine\n\t\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\t\taction: \"stopSimulation\",\n\t\t\t})\n\n\t\t\t// trigger callback that roll is complete\n\t\t\tthis.onRollComplete()\n\t\t}\n\t\t// otherwise keep on rendering\n\t\telse {\n\t\t\tthis.#scene.render() // not the same as this.render()\n\t\t}\n\t}\n\n\tasync loadTheme(options) {\n\t\t// await loadTheme(theme, this.config.origin + this.config.assetPath, this.#scene)\n\t\tconst {theme, basePath, material, meshFilePath, meshName} = options\n\t\t// load the textures and create the materials needed for this theme\n\t\tawait this.#themeLoader.load({theme,basePath,material})\n\t\n\t\t// Load the 3D meshes declared by the theme and return the collider mesh data to be passed on to the physics worker\n\t\t// don't load same models twice\n\t\tif(!Object.keys(this.#meshList).includes(meshName)){\n\t\t\tthis.#meshList[meshName] = meshFilePath\n\t\t\tconst colliders = await Dice.loadModels({meshFilePath,meshName}, this.#scene)\n\n\t\t\tif(!colliders){\n\t\t\t\tthrow new Error(\"No colliders returned from the 3D mesh file. Low poly colliders are expected to be in the same file as the high poly dice and the mesh name contains the word 'collider'\")\n\t\t\t}\n\t\t\n\t\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\t\taction: \"loadModels\",\n\t\t\t\toptions: {\n\t\t\t\t\tcolliders,\n\t\t\t\t\tmeshName\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis.onThemeLoaded({id: theme})\n\t}\n\n\tclear() {\n\t\tif(!Object.keys(this.#dieCache).length && !this.#sleeperCount) {\n\t\t\treturn\n\t\t}\n\t\tif(this.diceBufferView.byteLength){\n\t\t\tthis.diceBufferView.fill(0)\n\t\t}\n\t\tthis.#dieRollTimer.forEach(timer=>clearTimeout(timer))\n\t\t// stop anything that's currently rendering\n\t\tthis.#engine.stopRenderLoop()\n\t\t// remove all dice\n\t\tObject.values(this.#dieCache).forEach(die => {\n\t\t\tif(die.mesh)\n\t\t\t\tdie.mesh.dispose()\n\t\t})\n\t\t\n\t\t// reset storage\n\t\tthis.#dieCache = {}\n\t\tthis.#count = 0\n\t\tthis.#sleeperCount = 0\n\n\t\t// step the animation forward\n\t\tthis.#scene.render()\n\t}\n\n\tadd(options) {\n\t\t// loadDie allows you to specify sides(dieType) and theme and returns the options you passed in\n\t\tDice.loadDie(options, this.#scene).then(resp => {\n\t\t\t// space out adding the dice so they don't lump together too much\n\t\t\tthis.#dieRollTimer.push(setTimeout(() => {\n\t\t\t\tthis.#add(resp)\n\t\t\t}, this.#count++ * this.config.delay))\n\t\t})\n\t}\n\n\taddNonDie(die){\n\t\tif(this.#engine.activeRenderLoops.length === 0) {\n\t\t\tthis.render(false)\n\t\t}\n\t\tconst {id, value, ...rest} = die\n\t\tconst newDie = {\n\t\t\tid,\n\t\t\tvalue,\n\t\t\tconfig: rest\n\t\t}\n\t\tthis.#dieCache[id] = newDie\n\t\t\n\t\t// double timeout to ensure any real dice have a chance to queue up and rollResults isn't triggered right away\n\t\tsetTimeout(()=>{\n\t\t\tthis.#dieRollTimer.push(setTimeout(() => {\n\t\t\t\tthis.handleAsleep(newDie)\n\t\t\t}, this.#count++ * this.config.delay))\n\t\t}, 10)\n\t}\n\n\t// add a die to the scene\n\tasync #add(options) {\n\t\tif(this.#engine.activeRenderLoops.length === 0) {\n\t\t\tthis.render(options.newStartPoint)\n\t\t}\n\t\tconst diceOptions = {\n\t\t\t...options,\n\t\t\tassetPath: this.config.assetPath,\n\t\t\tenableShadows: this.config.enableShadows,\n\t\t\tscale: this.config.scale,\n\t\t\tlights: this.#lights,\n\t\t}\n\t\t\n\t\tconst newDie = new Dice(diceOptions, this.#scene)\n\t\t\n\t\t// save the die just created to the cache\n\t\tthis.#dieCache[newDie.id] = newDie\n\t\t\n\t\t// tell the physics engine to roll this die type - which is a low poly collider\n\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\taction: \"addDie\",\n\t\t\toptions: {\n\t\t\t\tsides: options.sides,\n\t\t\t\tscale: this.config.scale,\n\t\t\t\tid: newDie.id,\n\t\t\t\tnewStartPoint: options.newStartPoint,\n\t\t\t\ttheme: options.theme,\n\t\t\t\tmeshName: options.meshName,\n\t\t\t}\n\t\t})\n\t\n\t\t// for d100's we need to add an additional d10 and pair it up with the d100 just created\n\t\tif(options.sides === 100 && options.data !== 'single') {\n\t\t\t// assign the new die to a property on the d100 - spread the options in order to pass a matching theme\n\t\t\tnewDie.d10Instance = await Dice.loadDie({...diceOptions, dieType: 'd10', sides: 10, id: newDie.id + 10000}, this.#scene).then( response =>  {\n\t\t\t\tconst d10Instance = new Dice(response, this.#scene)\n\t\t\t\t// identify the parent of this d10 so we can calculate the roll result later\n\t\t\t\td10Instance.dieParent = newDie\n\t\t\t\treturn d10Instance\n\t\t\t})\n\t\t\t// add the d10 to the cache and ask the physics worker for a collider\n\t\t\tthis.#dieCache[`${newDie.d10Instance.id}`] = newDie.d10Instance\n\t\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\t\taction: \"addDie\",\n\t\t\t\toptions: {\n\t\t\t\t\tsides: 10,\n\t\t\t\t\tscale: this.config.scale,\n\t\t\t\t\tid: newDie.d10Instance.id,\n\t\t\t\t\ttheme: options.theme,\n\t\t\t\t\tmeshName: options.meshName\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\n\t\t// return the die instance\n\t\treturn newDie\n\t\n\t}\n\t\n\tremove(data) {\n\t// TODO: test this with exploding dice\n\tconst dieData = this.#dieCache[data.id]\n\t\n\t// check if this is d100 and remove associated d10 first\n\tif(dieData.hasOwnProperty('d10Instance')){\n\t\t// remove die\n\t\tif(this.#dieCache[dieData.d10Instance.id].mesh){\n\t\t\tthis.#dieCache[dieData.d10Instance.id].mesh.dispose()\n\n\t\t\t// remove d10 physics body just for d100 items\n\t\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\t\taction: \"removeDie\",\n\t\t\t\tid: dieData.d10Instance.id\n\t\t\t})\n\t\t}\n\t\t// delete entry\n\t\tdelete this.#dieCache[dieData.d10Instance.id]\n\t\t// decrement count\n\t\tthis.#sleeperCount--\n\t}\n\n\t// remove die\n\tif(this.#dieCache[data.id].mesh){\n\t\tthis.#dieCache[data.id].mesh.dispose()\n\t}\n\t// delete entry\n\tdelete this.#dieCache[data.id]\n\t// decrement count\n\tthis.#sleeperCount--\n\n\t// step the animation forward\n\tthis.#scene.render()\n\n\tthis.onDieRemoved(data.rollId)\n}\n\t\n\tupdatesFromPhysics(buffer) {\n\t\tthis.diceBufferView = new Float32Array(buffer)\n\t\tlet bufferIndex = 1\n\n\t\t// loop will be based on diceBufferView[0] value which is the bodies length in physics.worker\n\tfor (let i = 0, len = this.diceBufferView[0]; i < len; i++) {\n\t\tif(!Object.keys(this.#dieCache).length){\n\t\t\tcontinue\n\t\t}\n\t\tconst die = this.#dieCache[`${this.diceBufferView[bufferIndex]}`]\n\t\tif(!die) {\n\t\t\tconsole.log(\"Error: die not available in scene to animate\")\n\t\t\tbreak\n\t\t}\n\t\t// if the first position index is -1 then this die has been flagged as asleep\n\t\tif(this.diceBufferView[bufferIndex + 1] === -1) {\n\t\t\tthis.handleAsleep(die)\n\t\t} else {\n\t\t\tconst px = this.diceBufferView[bufferIndex + 1]\n\t\t\tconst py = this.diceBufferView[bufferIndex + 2]\n\t\t\tconst pz = this.diceBufferView[bufferIndex + 3]\n\t\t\tconst qx = this.diceBufferView[bufferIndex + 4]\n\t\t\tconst qy = this.diceBufferView[bufferIndex + 5]\n\t\t\tconst qz = this.diceBufferView[bufferIndex + 6]\n\t\t\tconst qw = this.diceBufferView[bufferIndex + 7]\n\n\t\t\tdie.mesh.position.set(px, py, pz)\n\t\t\tdie.mesh.rotationQuaternion.set(qx, qy, qz, qw)\n\t\t}\n\n\t\tbufferIndex = bufferIndex + 8\n\t}\n\n\t// transfer the buffer back to physics worker\n\trequestAnimationFrame(()=>{\n\t\tthis.#physicsWorkerPort.postMessage({\n\t\t\taction: \"stepSimulation\",\n\t\t\tdiceBuffer: this.diceBufferView.buffer\n\t\t}, [this.diceBufferView.buffer])\n\t})\n\t}\n\t\n\t// handle the position updates from the physics worker. It's a simple flat array of numbers for quick and easy transfer\n\tasync handleAsleep(die){\n\t\t// mark this die as asleep\n\t\tdie.asleep = true\n\t\n\t\t// get the roll result for this die\n\t\tawait Dice.getRollResult(die, this.#scene)\n\t\n\t\tif(die.d10Instance || die.dieParent) {\n\t\t\t// if one of the pair is asleep and the other isn't then it falls through without getting the roll result\n\t\t\t// otherwise both dice in the d100 are asleep and ready to calc their roll result\n\t\t\tif(die?.d10Instance?.asleep || die?.dieParent?.asleep) {\n\t\t\t\tconst d100 = die.config.sides === 100 ? die : die.dieParent\n\t\t\t\tconst d10 = die.config.sides === 10 ? die : die.d10Instance\n\t\t\t\tif(d100.rawValue){\n\t\t\t\t\t// this die is being processed again for some reason, probably a physics ineration that woke it before it was immobilized\n\t\t\t\t\td100.value = d100.rawValue\n\t\t\t\t}\n\t\t\t\t// save the original value\n\t\t\t\td100.rawValue = d100.value\n\n\t\t\t\td100.value = d100.value + d10.value\n\t\n\t\t\t\tthis.onRollResult({\n\t\t\t\t\trollId: d100.config.rollId,\n\t\t\t\t\tvalue : d100.value\n\t\t\t\t})\n\t\t\t}\n\t\t} else {\n\t\t\t// turn 0's on a d10 into a 10\n\t\t\tif(die.config.sides === 10 && die.value === 0) {\n\t\t\t\tdie.value = 10\n\t\t\t}\n\t\t\tthis.onRollResult({\n\t\t\t\trollId: die.config.rollId,\n\t\t\t\tvalue: die.value\n\t\t\t})\n\t\t}\n\t\t// add to the sleeper count\n\t\tthis.#sleeperCount++\n\t}\n\t\n\tresize(options) {\n\t\t// redraw the dicebox\n\t\tconst width = this.#canvas.width = options.width\n\t\tconst height = this.#canvas.height = options.height\n\t\tthis.#container.create({aspect: width / height})\n\t\tthis.#engine.resize()\n\t}\n}\n\nexport default WorldOnscreen"],"names":["MaterialDefines","externalProperties","prop","disposed","key","name","other","index","_a","_b","_c","_d","_e","type","defValue","result","value","createEngine","canvas","Engine","SceneOptimization","scene","optimizer","priority","TextureOptimization","maximumSize","step","allDone","texture","currentSize","HardwareScalingOptimization","maximumScale","ShadowsOptimization","PostProcessesOptimization","LensFlaresOptimization","CustomOptimization","ParticlesOptimization","RenderTargetsOptimization","MergeMeshesOptimization","abstractMesh","Mesh","mesh","updateSelectionTree","globalPool","globalLength","currentPool","current","subIndex","otherMesh","sceneAsAny","SceneOptimizerOptions","targetFrameRate","trackerDuration","optimization","onApply","onGetDescription","SceneOptimizer","options","autoGeneratePriorities","improvementMode","Observable","optim","EngineStore","noOptimizationApplied","onSuccess","onFailure","createScene","engine","Scene","Color4","optimizationSettings","TargetCamera","Camera","position","setActiveOnSceneIfNoneActive","Vector3","Vector2","Quaternion","Matrix","distance","direction","lockedTarget","ignoreParentClass","lockedTargetPosition","target","Epsilon","vDir","TmpVectors","directionMultiplier","needToMove","needToRotate","Axis","up","parentWorldMatrix","cameraIndex","rigCamera","camLeft","camRight","leftSign","rightSign","halfSpace","newFocalTarget","__decorate","serializeAsVector3","serialize","serializeAsMeshReference","createCamera","camera","cameraDistance","Light","Node","Color3","UniformBuffer","effect","lightIndex","useSpecular","receiveShadows","iAsString","needUpdate","scaledIntensity","TmpColors","shadowGenerator","fullDetails","ret","doNotRecurse","disposeMaterialAndTextures","iterator","newParent","constructor","clonedLight","SerializationHelper","serializationObject","constructorFunc","parsedLight","light","animationIndex","parsedAnimation","internalClass","GetClass","array","oldPush","items","item","oldSplice","deleteCount","deleted","photometricScale","lightTypeID","photometricMode","apexAngleRadians","LightConstants","serializeAsColor3","expandToProperty","ShadowLight","faceIndex","xaxis","yaxis","force","activeCamera","matrix","viewMatrix","renderList","DirectionalLight","left","right","top","bottom","tempVector3","shadowMinZ","shadowMaxZ","meshIndex","boundingBox","xOffset","yOffset","minZ","maxZ","useReverseDepthBuffer","lightDataUniformName","defines","HemisphericLight","_effect","normalizeDirection","Size","width","height","hash","src","w","h","otherSize","start","end","amount","ThinTexture","internalTexture","samplingMode","BaseTexture","mat","gamma","RandomGUID","callback","sceneOrEngine","ratio","url","noMipmap","sampling","invertY","useSRGBBuffer","isCube","correctedUseSRGBBuffer","texturesCache","texturesCacheEntry","level","buffer","flushRenderer","noDataConversion","x","y","size","maxWidth","maxHeight","allowEmptyName","textures","numRemaining","i","onLoadObservable","serializeAsTexture","GenerateBase64StringFromPixelData","pixels","len","npixels","val","ctx","imageData","canvas2","ctx2","GenerateBase64StringFromTexture","GenerateBase64StringFromTextureAsync","Texture","noMipmapOrOptions","onLoad","onError","deleteBuffer","format","mimeType","loaderOptions","creationFlags","forcedExtension","_f","_g","_h","_j","CompatibilityOptions","load","errorHandler","message","exception","TimingTools","loadObserver","e","z","t","uBase","flagMaterialsAsTextureDirty","projectionMatrix","savedName","EncodeArrayBufferToBase64","parsedTexture","rootUrl","parsedCustomTexture","InstantiationTools","hasInternalTextureUniqueId","cache","onLoaded","generateMipMaps","mirrorTexture","Plane","renderTargetTexture","probe","data","jsonTexture","_WarnImport","renderTargetSize","RegisterClass","RenderTargetWrapper","initializeBuffers","isMulti","disposePrevious","layers","faces","layer","face","comparisonFunction","bilinearFiltering","generateStencil","samples","label","renderTarget","rtw","textureArray","generateDepthTexture","textureCount","lastTextureSource","InternalTextureSource","samplingModes","types","formats","targetTypes","layerIndex","layerCounts","internalTexture2Index","optionsMRT","bilinear","disposeOnlyFramebuffers","WebGLRenderTargetWrapper","context","gl","depthbuffer","framebuffer","attachmentIndex","faceIndexOrLayer","lodLevel","currentFB","attachment","ThinEngine","rtWrapper","generateDepthBuffer","generateStencilBuffer","noColorAttachment","colorAttachment","currentFrameBuffer","InternalTexture","Logger","internalOptions","hasStencil","internalFormat","glRtWrapper","hardwareTexture","colorRenderbuffer","fullOptions","filters","shader","ShaderStore","name$1r","shader$1r","defaultOptions$2","EffectRenderer","Viewport","positions","indices","VertexBuffer","viewport","effectWrapper","outputTexture","out","vertexBuffer","EffectWrapper","creationOptions","effectCreationOptions","uniformNames","DrawWrapper","Effect","shader$1q","name$1q","passPixelShader","DumpTools","renderer","wrapper","successCallback","fileName","bufferView","toArrayBuffer","quality","resolve","data2","n","v","Tools","blob","fileReader","event","arrayBuffer","initSideEffects","RenderTargetTexture","_ObserveArray","material","meshes","j","doNotChangeAspectRatio","delayAllocation","_functionName","previousLength","newLength","RenderingManager","numPasses","postProcess","PostProcessManager","dispose","newSize","wasCube","dumpForDebug","useCameraPostProcess","checkReadiness","id","sceneMeshes","currentRenderPassId","sceneCamera","returnValue","numLayers","currentRenderList","defaultRenderList","defaultRenderListLength","renderDimension","scale","curved","currentRenderListLength","checkLayerMask","sceneRenderId","meshToRender","isMasked","subMesh","particleIndex","particleSystem","emitter","saveGenerateMipMaps","renderingGroupId","opaqueSortCompareFn","alphaTestSortCompareFn","transparentSortCompareFn","autoClearDepthStencil","textureSize","newTexture","PostProcess","postProcessName","customShaderCodeProcessing","fragmentUrl","parameters","samplers","reusable","textureType","vertexUrl","indexParameters","blockCompilation","textureFormat","shaderLanguage","ShaderLanguage","SmartArray","uniforms","onCompiled","newUniforms","newSamplers","shaderType","code","textureOptions","channel","tex","currentRenderId","currentlyUsed","needMipMaps","forceDepthStencil","firstPP","sourceTexture","maxSize","requiredWidth","requiredHeight","webVRCamera","desiredWidth","desiredHeight","currentViewport","source","prePassRenderer","firstPostProcess","parsedPostProcess","postProcessType","targetCamera","serializeAsColor4","name$1p","shader$1p","name$1o","shader$1o","name$1n","shader$1n","name$1m","shader$1m","name$1l","shader$1l","name$1k","shader$1k","name$1j","shader$1j","BlurPostProcess","kernel","_blockCompilation","N","centerIndex","offsets","weights","totalWeight","u","linearSamplingWeights","linearSamplingOffsets","linearSamplingMap","sharedCell","weightLinear","offsetLinear","maxVaryingRows","freeVaryingVec2","varyingCount","depCount","idealKernel","k","sigma","denominator","exponent","decimalFigures","serializeAsVector2","EffectFallbacks","rank","define","currentDefines","currentFallbacks","name$1i","shader$1i","shader$1g","name$1g","name$1f","shader$1f","name$1e","shader$1e","name$1d","shader$1d","shader$1c","shader$1b","name$1b","name$1a","shader$1a","name$19","shader$19","name$18","shader$18","name$17","shader$17","name$16","shader$16","name$15","shader$15","name$14","shader$14","name$13","shader$13","name$12","shader$12","name$11","shader$11","name$10","shader$10","name$$","shader$$","name$_","shader$_","name$Z","shader$Z","name$Y","shader$Y","name$X","shader$X","name$W","shader$W","name$V","shader$V","name$U","shader$U","name$T","shader$T","name$S","shader$S","name$R","shader$R","ShadowGenerator","bias","normalBias","filter","filteringQuality","contactHardeningLightSizeUVRatio","darkness","transparent","includeDescendants","childMesh","child","mapSize","usefullFloatFirst","shadowGenerators","caps","shadowMap","clearZero","clearOne","rtt","targetSize","opaqueSubMeshes","alphaTestSubMeshes","depthOnlySubMeshes","transparentSubMeshes","isTransparent","renderingMesh","effectiveMesh","detNeg","sideOrientation","reverseSideOrientation","batch","hardwareInstancedRendering","shadowDepthWrapper","drawWrapper","skeleton","boneTexture","MaterialHelper","bindClipPlane","world","isInstance","worldOverride","localOptions","subMeshes","currentIndex","checkReady","useInstances","subMeshEffect","cachedDefines","attribs","needAlphaTesting","alphaCutOff","fallbacks","manager","morphInfluencers","prepareStringDefinesForClipPlanes","join","shaderName","uniformBuffers","addClipPlaneUniforms","attrib","uniform","sampler","lightPosition","ubo","entry","parsedShadowGenerator","constr","_","name$Q","shader$Q","name$P","shader$P","name$O","shader$O","DepthRenderer","storeNonLinearDepth","storeCameraSpaceZ","refreshRate","preWarm","renderSubMesh","renderingMaterial","cameraIsOrtho","alphaTexture","numMorphInfluencers","morphTargetManager","keysToDelete","name$N","shader$N","MinMaxReducer","depthRedux","forceFullscreenViewport","reductionInitial","reduction","func","minmax","disposeAll","DepthReducer","depthRenderer","UpDir","ZeroVec","tmpv1","tmpv2","tmpMatrix","CascadedShadowGenerator","freeze","boundingInfo","min","max","cascadeIndex","dbg","lambda","cascadeNum","near","far","cameraRange","minDistance","maxDistance","range","p","log","d","defaultOptions","prevSplitDist","splitDist","isNDCHalfZRange","invViewProj","cornerIndexOffset","cornerIndex","sphereRadius","dist","lightCameraPos","usefulFloatFirst","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","BoundingInfo","AbstractScene","SceneComponentConstants","parsedData","ShadowGeneratorSceneComponent","lights","container","renderTargets","component","defaultOptions$1","enableShadows","shadowTransparency","intensity","d_light","h_light","CreateBoxVertexData","depth","wrap","topBaseAt","bottomBaseAt","topOrder","bottomOrder","topIndex","bottomIndex","basePositions","topFaceBase","topFaceOrder","bottomFaceOrder","bottomFaceBase","scaleArray","accumulator","currentValue","VertexData","faceUV","faceColors","colors","f","Vector4","uvs","c","normals","vertexData","totalColors","CreateBox","box","updatable","PrePassConfiguration","isFrozen","PushMaterial","Material","storeEffectOnSubMeshes","normalMatrix","visibility","forceDisposeEffect","forceDisposeTextures","notBoundToMesh","MaterialFlags","name$M","shader$M","name$L","shader$L","name$K","shader$K","name$J","shader$J","name$I","shader$I","name$H","shader$H","name$G","shader$G","name$F","shader$F","name$E","shader$E","name$D","shader$D","name$C","shader$C","name$B","shader$B","name$A","shader$A","name$z","shader$z","name$y","shader$y","name$x","shader$x","name$w","shader$w","name$v","shader$v","name$u","shader$u","name$t","shader$t","name$s","shader$s","name$r","shader$r","name$q","shader$q","name$p","shader$p","name$o","shader$o","name$n","shader$n","name$m","shader$m","name$l","shader$l","name$k","shader$k","name$j","shader$j","name$i","shader$i","name$h","shader$h","name$g","shader$g","shader$f","name$f","name$e","shader$e","name$d","shader$d","name$c","shader$c","name$b","shader$b","name$a","shader$a","name$9","shader$9","name$8","shader$8","name$7","shader$7","name$6","shader$6","name$5","shader$5","name$4","shader$4","name$3","shader$3","rxOption","MaterialPluginManager","plugin","pluginClassName","a","b","defineNamesFromPlugins","eventData","isReady","hasRenderTargetTextures","info","MaterialPluginEvent","hasTexture","arraySize","customCode","pointName","existingCallback","points","injectedCode","regexFlags","matchOption","sourceCode","rx","match","newCode","fullPointName","MaterialPluginBase","enable","addToPluginList","uniformBuffer","activeTextures","animatables","currentRank","attributes","ubos","MaterialDetailMapDefines","DetailMapConfiguration","onCreatedEffectParameters","StandardMaterialDefines","modeToEnable","modes","mode","StandardMaterial","configuration","oit"],"mappings":"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_google_ignoreList":[0,2,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96]}